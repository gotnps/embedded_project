
irSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006734  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080068d4  080068d4  000168d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a00  08006a00  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006a00  08006a00  00016a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a08  08006a08  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a08  08006a08  00016a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a0c  08006a0c  00016a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040dc  20000074  08006a84  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004150  08006a84  00024150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013858  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cff  00000000  00000000  000338fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00036600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  000373b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e31  00000000  00000000  00038068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010420  00000000  00000000  0004fe99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099f4f  00000000  00000000  000602b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa208  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b20  00000000  00000000  000fa25c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080068bc 	.word	0x080068bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080068bc 	.word	0x080068bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000598:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <vApplicationGetIdleTaskMemory+0x30>)
 800059e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000090 	.word	0x20000090
 80005b8:	200000e4 	.word	0x200000e4

080005bc <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  //Rx_data[0]='1';

  HAL_UART_Receive_IT(&huart1, (uint8_t*) Rx_data, 1);
 80005c4:	2201      	movs	r2, #1
 80005c6:	4907      	ldr	r1, [pc, #28]	; (80005e4 <HAL_UART_RxCpltCallback+0x28>)
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <HAL_UART_RxCpltCallback+0x2c>)
 80005ca:	f002 fa56 	bl	8002a7a <HAL_UART_Receive_IT>

  HAL_UART_Transmit(&huart2, (uint8_t*) Rx_data, 1, 1000);
 80005ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d2:	2201      	movs	r2, #1
 80005d4:	4903      	ldr	r1, [pc, #12]	; (80005e4 <HAL_UART_RxCpltCallback+0x28>)
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <HAL_UART_RxCpltCallback+0x30>)
 80005d8:	f002 f9bd 	bl	8002956 <HAL_UART_Transmit>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200002e4 	.word	0x200002e4
 80005e8:	200040a4 	.word	0x200040a4
 80005ec:	200040f4 	.word	0x200040f4

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b0a6      	sub	sp, #152	; 0x98
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fdbd 	bl	8001174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f895 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f9a3 	bl	8000948 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000602:	f000 f977 	bl	80008f4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000606:	f000 f8f9 	bl	80007fc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800060a:	f000 f949 	bl	80008a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t*) Rx_data, 1); // Nhận Datan
 800060e:	2201      	movs	r2, #1
 8000610:	4938      	ldr	r1, [pc, #224]	; (80006f4 <main+0x104>)
 8000612:	4839      	ldr	r0, [pc, #228]	; (80006f8 <main+0x108>)
 8000614:	f002 fa31 	bl	8002a7a <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 8000618:	2300      	movs	r3, #0
 800061a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800061e:	2300      	movs	r3, #0
 8000620:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8000624:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000628:	4618      	mov	r0, r3
 800062a:	f003 f9b3 	bl	8003994 <osMutexCreate>
 800062e:	4603      	mov	r3, r0
 8000630:	4a32      	ldr	r2, [pc, #200]	; (80006fc <main+0x10c>)
 8000632:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000634:	4b32      	ldr	r3, [pc, #200]	; (8000700 <main+0x110>)
 8000636:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800063a:	461d      	mov	r5, r3
 800063c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000640:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000644:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000648:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f003 f92d 	bl	80038ae <osThreadCreate>
 8000654:	4603      	mov	r3, r0
 8000656:	4a2b      	ldr	r2, [pc, #172]	; (8000704 <main+0x114>)
 8000658:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartTask01, osPriorityIdle, 0, 128);
 800065a:	4b2b      	ldr	r3, [pc, #172]	; (8000708 <main+0x118>)
 800065c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000660:	461d      	mov	r5, r3
 8000662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 800066e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f003 f91a 	bl	80038ae <osThreadCreate>
 800067a:	4603      	mov	r3, r0
 800067c:	4a23      	ldr	r2, [pc, #140]	; (800070c <main+0x11c>)
 800067e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 8000680:	4b23      	ldr	r3, [pc, #140]	; (8000710 <main+0x120>)
 8000682:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000686:	461d      	mov	r5, r3
 8000688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000690:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000694:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f003 f907 	bl	80038ae <osThreadCreate>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a1c      	ldr	r2, [pc, #112]	; (8000714 <main+0x124>)
 80006a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 80006a6:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <main+0x128>)
 80006a8:	f107 0420 	add.w	r4, r7, #32
 80006ac:	461d      	mov	r5, r3
 80006ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f003 f8f4 	bl	80038ae <osThreadCreate>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4a14      	ldr	r2, [pc, #80]	; (800071c <main+0x12c>)
 80006ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityIdle, 0, 128);
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <main+0x130>)
 80006ce:	1d3c      	adds	r4, r7, #4
 80006d0:	461d      	mov	r5, r3
 80006d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f003 f8e3 	bl	80038ae <osThreadCreate>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <main+0x134>)
 80006ec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006ee:	f003 f8d7 	bl	80038a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <main+0x102>
 80006f4:	200002e4 	.word	0x200002e4
 80006f8:	200040a4 	.word	0x200040a4
 80006fc:	20004138 	.word	0x20004138
 8000700:	08006910 	.word	0x08006910
 8000704:	20004054 	.word	0x20004054
 8000708:	0800692c 	.word	0x0800692c
 800070c:	200040f0 	.word	0x200040f0
 8000710:	08006948 	.word	0x08006948
 8000714:	200040e8 	.word	0x200040e8
 8000718:	08006964 	.word	0x08006964
 800071c:	200040ec 	.word	0x200040ec
 8000720:	08006980 	.word	0x08006980
 8000724:	20004058 	.word	0x20004058

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b094      	sub	sp, #80	; 0x50
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0320 	add.w	r3, r7, #32
 8000732:	2230      	movs	r2, #48	; 0x30
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f005 fc98 	bl	800606c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	4b28      	ldr	r3, [pc, #160]	; (80007f4 <SystemClock_Config+0xcc>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	4a27      	ldr	r2, [pc, #156]	; (80007f4 <SystemClock_Config+0xcc>)
 8000756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075a:	6413      	str	r3, [r2, #64]	; 0x40
 800075c:	4b25      	ldr	r3, [pc, #148]	; (80007f4 <SystemClock_Config+0xcc>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000768:	2300      	movs	r3, #0
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	4b22      	ldr	r3, [pc, #136]	; (80007f8 <SystemClock_Config+0xd0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a21      	ldr	r2, [pc, #132]	; (80007f8 <SystemClock_Config+0xd0>)
 8000772:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <SystemClock_Config+0xd0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000784:	2302      	movs	r3, #2
 8000786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	2301      	movs	r3, #1
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078c:	2310      	movs	r3, #16
 800078e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000790:	2302      	movs	r3, #2
 8000792:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000794:	2300      	movs	r3, #0
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000798:	2310      	movs	r3, #16
 800079a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800079c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007a2:	2304      	movs	r3, #4
 80007a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a6:	2304      	movs	r3, #4
 80007a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 0320 	add.w	r3, r7, #32
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 fc10 	bl	8001fd4 <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007ba:	f000 fb41 	bl	8000e40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	230f      	movs	r3, #15
 80007c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2302      	movs	r3, #2
 80007c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2102      	movs	r1, #2
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 fe72 	bl	80024c4 <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007e6:	f000 fb2b 	bl	8000e40 <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3750      	adds	r7, #80	; 0x50
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000802:	463b      	mov	r3, r7
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800080e:	4b21      	ldr	r3, [pc, #132]	; (8000894 <MX_ADC1_Init+0x98>)
 8000810:	4a21      	ldr	r2, [pc, #132]	; (8000898 <MX_ADC1_Init+0x9c>)
 8000812:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000814:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <MX_ADC1_Init+0x98>)
 8000816:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800081a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800081c:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MX_ADC1_Init+0x98>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000822:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <MX_ADC1_Init+0x98>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000828:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_ADC1_Init+0x98>)
 800082a:	2200      	movs	r2, #0
 800082c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800082e:	4b19      	ldr	r3, [pc, #100]	; (8000894 <MX_ADC1_Init+0x98>)
 8000830:	2200      	movs	r2, #0
 8000832:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <MX_ADC1_Init+0x98>)
 8000838:	2200      	movs	r2, #0
 800083a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_ADC1_Init+0x98>)
 800083e:	4a17      	ldr	r2, [pc, #92]	; (800089c <MX_ADC1_Init+0xa0>)
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_ADC1_Init+0x98>)
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_ADC1_Init+0x98>)
 800084a:	2201      	movs	r2, #1
 800084c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_ADC1_Init+0x98>)
 8000850:	2200      	movs	r2, #0
 8000852:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_ADC1_Init+0x98>)
 8000858:	2201      	movs	r2, #1
 800085a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <MX_ADC1_Init+0x98>)
 800085e:	f000 fd1f 	bl	80012a0 <HAL_ADC_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000868:	f000 faea 	bl	8000e40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800086c:	2304      	movs	r3, #4
 800086e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000870:	2301      	movs	r3, #1
 8000872:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_ADC1_Init+0x98>)
 800087e:	f000 fe07 	bl	8001490 <HAL_ADC_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000888:	f000 fada 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2000405c 	.word	0x2000405c
 8000898:	40012000 	.word	0x40012000
 800089c:	0f000001 	.word	0x0f000001

080008a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008a6:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <MX_USART1_UART_Init+0x50>)
 80008a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008d8:	f001 fff0 	bl	80028bc <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008e2:	f000 faad 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200040a4 	.word	0x200040a4
 80008f0:	40011000 	.word	0x40011000

080008f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <MX_USART2_UART_Init+0x50>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 800092c:	f001 ffc6 	bl	80028bc <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000936:	f000 fa83 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200040f4 	.word	0x200040f4
 8000944:	40004400 	.word	0x40004400

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	; 0x28
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	4b33      	ldr	r3, [pc, #204]	; (8000a30 <MX_GPIO_Init+0xe8>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a32      	ldr	r2, [pc, #200]	; (8000a30 <MX_GPIO_Init+0xe8>)
 8000968:	f043 0304 	orr.w	r3, r3, #4
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b30      	ldr	r3, [pc, #192]	; (8000a30 <MX_GPIO_Init+0xe8>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0304 	and.w	r3, r3, #4
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	4b2c      	ldr	r3, [pc, #176]	; (8000a30 <MX_GPIO_Init+0xe8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a2b      	ldr	r2, [pc, #172]	; (8000a30 <MX_GPIO_Init+0xe8>)
 8000984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b29      	ldr	r3, [pc, #164]	; (8000a30 <MX_GPIO_Init+0xe8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <MX_GPIO_Init+0xe8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a24      	ldr	r2, [pc, #144]	; (8000a30 <MX_GPIO_Init+0xe8>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <MX_GPIO_Init+0xe8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <MX_GPIO_Init+0xe8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a1d      	ldr	r2, [pc, #116]	; (8000a30 <MX_GPIO_Init+0xe8>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <MX_GPIO_Init+0xe8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2120      	movs	r1, #32
 80009d2:	4818      	ldr	r0, [pc, #96]	; (8000a34 <MX_GPIO_Init+0xec>)
 80009d4:	f001 faca 	bl	8001f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	4812      	ldr	r0, [pc, #72]	; (8000a38 <MX_GPIO_Init+0xf0>)
 80009f0:	f001 f920 	bl	8001c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009f4:	2301      	movs	r3, #1
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	480b      	ldr	r0, [pc, #44]	; (8000a34 <MX_GPIO_Init+0xec>)
 8000a08:	f001 f914 	bl	8001c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a0c:	2320      	movs	r3, #32
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_GPIO_Init+0xec>)
 8000a24:	f001 f906 	bl	8001c34 <HAL_GPIO_Init>

}
 8000a28:	bf00      	nop
 8000a2a:	3728      	adds	r7, #40	; 0x28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020000 	.word	0x40020000
 8000a38:	40020800 	.word	0x40020800

08000a3c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a44:	2001      	movs	r0, #1
 8000a46:	f002 ff91 	bl	800396c <osDelay>
 8000a4a:	e7fb      	b.n	8000a44 <StartDefaultTask+0x8>

08000a4c <StartTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08e      	sub	sp, #56	; 0x38
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
	int count0 = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	637b      	str	r3, [r7, #52]	; 0x34
	//char buffer0[20];
	int check0 = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
	for(;;){
		  int threadID = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		  //int idx = 0;
		  char buffer1[32]={-1};
 8000a60:	23ff      	movs	r3, #255	; 0xff
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
 8000a74:	615a      	str	r2, [r3, #20]
 8000a76:	619a      	str	r2, [r3, #24]
		  if(Rx_data[0]=='s'){
 8000a78:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <StartTask01+0x124>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b73      	cmp	r3, #115	; 0x73
 8000a7e:	d12a      	bne.n	8000ad6 <StartTask01+0x8a>
				  count0=0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	637b      	str	r3, [r7, #52]	; 0x34
				  c1=1;
 8000a84:	4b3b      	ldr	r3, [pc, #236]	; (8000b74 <StartTask01+0x128>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	601a      	str	r2, [r3, #0]
				  sprintf(buffer1, "%da", count0);
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a90:	4939      	ldr	r1, [pc, #228]	; (8000b78 <StartTask01+0x12c>)
 8000a92:	4618      	mov	r0, r3
 8000a94:	f005 faf2 	bl	800607c <siprintf>
				  osMutexWait(myMutex01Handle, osWaitForever);
 8000a98:	4b38      	ldr	r3, [pc, #224]	; (8000b7c <StartTask01+0x130>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f002 ff8f 	bl	80039c4 <osMutexWait>
				  HAL_UART_Transmit(&huart1, buffer1, strlen(buffer1), 1000);
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fb98 	bl	80001e0 <strlen>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	f107 010c 	add.w	r1, r7, #12
 8000ab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000abc:	4830      	ldr	r0, [pc, #192]	; (8000b80 <StartTask01+0x134>)
 8000abe:	f001 ff4a 	bl	8002956 <HAL_UART_Transmit>
				  osMutexRelease(myMutex01Handle);
 8000ac2:	4b2e      	ldr	r3, [pc, #184]	; (8000b7c <StartTask01+0x130>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 ffca 	bl	8003a60 <osMutexRelease>
				  osThreadYield();
 8000acc:	f002 ff3c 	bl	8003948 <osThreadYield>
				  HAL_Delay(100);
 8000ad0:	2064      	movs	r0, #100	; 0x64
 8000ad2:	f000 fbc1 	bl	8001258 <HAL_Delay>
		  }
		  if(check0==0 && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 8000ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d13c      	bne.n	8000b56 <StartTask01+0x10a>
 8000adc:	2101      	movs	r1, #1
 8000ade:	4829      	ldr	r0, [pc, #164]	; (8000b84 <StartTask01+0x138>)
 8000ae0:	f001 fa2c 	bl	8001f3c <HAL_GPIO_ReadPin>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d135      	bne.n	8000b56 <StartTask01+0x10a>
				  //buffer0[0] = '1';
				  //HAL_UART_Transmit(&huart2, &buffer, strlen(buffer), 100);
				  check0=1;
 8000aea:	2301      	movs	r3, #1
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
				  count0++;
 8000aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af0:	3301      	adds	r3, #1
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
				  sprintf(buffer1, "%da", count0);
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000afa:	491f      	ldr	r1, [pc, #124]	; (8000b78 <StartTask01+0x12c>)
 8000afc:	4618      	mov	r0, r3
 8000afe:	f005 fabd 	bl	800607c <siprintf>
				  //idx++;
				  osMutexWait(myMutex01Handle, osWaitForever);
 8000b02:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <StartTask01+0x130>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f04f 31ff 	mov.w	r1, #4294967295
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f002 ff5a 	bl	80039c4 <osMutexWait>
				  HAL_UART_Transmit(&huart1, buffer1, strlen(buffer1), 1000);
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fb63 	bl	80001e0 <strlen>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	f107 010c 	add.w	r1, r7, #12
 8000b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b26:	4816      	ldr	r0, [pc, #88]	; (8000b80 <StartTask01+0x134>)
 8000b28:	f001 ff15 	bl	8002956 <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart2, buffer1, strlen(buffer1), 1000);
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fb55 	bl	80001e0 <strlen>
 8000b36:	4603      	mov	r3, r0
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	f107 010c 	add.w	r1, r7, #12
 8000b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b42:	4811      	ldr	r0, [pc, #68]	; (8000b88 <StartTask01+0x13c>)
 8000b44:	f001 ff07 	bl	8002956 <HAL_UART_Transmit>
				  osMutexRelease(myMutex01Handle);
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <StartTask01+0x130>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f002 ff87 	bl	8003a60 <osMutexRelease>
				  osThreadYield();
 8000b52:	f002 fef9 	bl	8003948 <osThreadYield>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 8000b56:	2101      	movs	r1, #1
 8000b58:	480a      	ldr	r0, [pc, #40]	; (8000b84 <StartTask01+0x138>)
 8000b5a:	f001 f9ef 	bl	8001f3c <HAL_GPIO_ReadPin>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <StartTask01+0x11c>
				  check0=0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	633b      	str	r3, [r7, #48]	; 0x30
				  //buffer0[0] = '0';
				  //HAL_UART_Transmit(&huart2, &buffer, strlen(buffer), 100);
		  }
		  HAL_Delay(50);
 8000b68:	2032      	movs	r0, #50	; 0x32
 8000b6a:	f000 fb75 	bl	8001258 <HAL_Delay>
	for(;;){
 8000b6e:	e775      	b.n	8000a5c <StartTask01+0x10>
 8000b70:	200002e4 	.word	0x200002e4
 8000b74:	200002ec 	.word	0x200002ec
 8000b78:	0800699c 	.word	0x0800699c
 8000b7c:	20004138 	.word	0x20004138
 8000b80:	200040a4 	.word	0x200040a4
 8000b84:	40020000 	.word	0x40020000
 8000b88:	200040f4 	.word	0x200040f4

08000b8c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08e      	sub	sp, #56	; 0x38
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	int count1 = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	637b      	str	r3, [r7, #52]	; 0x34
	int ADCValue=0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	633b      	str	r3, [r7, #48]	; 0x30
	 for(;;){
		  int threadID = 1;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
		  int idx = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
		  char buffer2[32]={-1};
 8000ba4:	23ff      	movs	r3, #255	; 0xff
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
 8000bb8:	615a      	str	r2, [r3, #20]
 8000bba:	619a      	str	r2, [r3, #24]
		  HAL_ADC_Start(&hadc1);
 8000bbc:	4840      	ldr	r0, [pc, #256]	; (8000cc0 <StartTask02+0x134>)
 8000bbe:	f000 fbb3 	bl	8001328 <HAL_ADC_Start>
		  if(Rx_data[0]=='s'){
 8000bc2:	4b40      	ldr	r3, [pc, #256]	; (8000cc4 <StartTask02+0x138>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b73      	cmp	r3, #115	; 0x73
 8000bc8:	d12a      	bne.n	8000c20 <StartTask02+0x94>
				  count1=0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
				  sprintf(buffer2, "%dp", count1);
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bd4:	493c      	ldr	r1, [pc, #240]	; (8000cc8 <StartTask02+0x13c>)
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f005 fa50 	bl	800607c <siprintf>
				  osMutexWait(myMutex01Handle, osWaitForever);
 8000bdc:	4b3b      	ldr	r3, [pc, #236]	; (8000ccc <StartTask02+0x140>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295
 8000be4:	4618      	mov	r0, r3
 8000be6:	f002 feed 	bl	80039c4 <osMutexWait>
				  HAL_UART_Transmit(&huart1, buffer2, strlen(buffer2), 1000);
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff faf6 	bl	80001e0 <strlen>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	f107 0108 	add.w	r1, r7, #8
 8000bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c00:	4833      	ldr	r0, [pc, #204]	; (8000cd0 <StartTask02+0x144>)
 8000c02:	f001 fea8 	bl	8002956 <HAL_UART_Transmit>
				  osMutexRelease(myMutex01Handle);
 8000c06:	4b31      	ldr	r3, [pc, #196]	; (8000ccc <StartTask02+0x140>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f002 ff28 	bl	8003a60 <osMutexRelease>
				  osThreadYield();
 8000c10:	f002 fe9a 	bl	8003948 <osThreadYield>
				  HAL_Delay(100);
 8000c14:	2064      	movs	r0, #100	; 0x64
 8000c16:	f000 fb1f 	bl	8001258 <HAL_Delay>
				  c2=1;
 8000c1a:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <StartTask02+0x148>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]
		  }
		  if(check1==0 && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)){
 8000c20:	4b2d      	ldr	r3, [pc, #180]	; (8000cd8 <StartTask02+0x14c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d13d      	bne.n	8000ca4 <StartTask02+0x118>
 8000c28:	2102      	movs	r1, #2
 8000c2a:	482c      	ldr	r0, [pc, #176]	; (8000cdc <StartTask02+0x150>)
 8000c2c:	f001 f986 	bl	8001f3c <HAL_GPIO_ReadPin>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d136      	bne.n	8000ca4 <StartTask02+0x118>
			  	  //buffer0[0] = '1';
			  	  //HAL_UART_Transmit(&huart2, &buffer, strlen(buffer), 100);
			  	  check1=1;
 8000c36:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <StartTask02+0x14c>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	601a      	str	r2, [r3, #0]
			  	  count1++;
 8000c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c3e:	3301      	adds	r3, #1
 8000c40:	637b      	str	r3, [r7, #52]	; 0x34
			  	  sprintf(buffer2, "%dp", count1);
 8000c42:	f107 0308 	add.w	r3, r7, #8
 8000c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c48:	491f      	ldr	r1, [pc, #124]	; (8000cc8 <StartTask02+0x13c>)
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f005 fa16 	bl	800607c <siprintf>
			  	  //idx++;
			  	  osMutexWait(myMutex01Handle, osWaitForever);
 8000c50:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <StartTask02+0x140>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f002 feb3 	bl	80039c4 <osMutexWait>
			  	  HAL_UART_Transmit(&huart1, buffer2, strlen(buffer2), 1000);
 8000c5e:	f107 0308 	add.w	r3, r7, #8
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fabc 	bl	80001e0 <strlen>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	f107 0108 	add.w	r1, r7, #8
 8000c70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c74:	4816      	ldr	r0, [pc, #88]	; (8000cd0 <StartTask02+0x144>)
 8000c76:	f001 fe6e 	bl	8002956 <HAL_UART_Transmit>
			  	  HAL_UART_Transmit(&huart2, buffer2, strlen(buffer2), 1000);
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff faae 	bl	80001e0 <strlen>
 8000c84:	4603      	mov	r3, r0
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	f107 0108 	add.w	r1, r7, #8
 8000c8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c90:	4813      	ldr	r0, [pc, #76]	; (8000ce0 <StartTask02+0x154>)
 8000c92:	f001 fe60 	bl	8002956 <HAL_UART_Transmit>
			  	  osMutexRelease(myMutex01Handle);
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <StartTask02+0x140>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f002 fee0 	bl	8003a60 <osMutexRelease>
			  	  osThreadYield();
 8000ca0:	f002 fe52 	bl	8003948 <osThreadYield>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)){
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <StartTask02+0x150>)
 8000ca8:	f001 f948 	bl	8001f3c <HAL_GPIO_ReadPin>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d002      	beq.n	8000cb8 <StartTask02+0x12c>
			  	  check1=0;
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <StartTask02+0x14c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
			  	  //buffer0[0] = '0';
			  	  //HAL_UART_Transmit(&huart2, &buffer, strlen(buffer), 100);
		  }
		  HAL_Delay(50);
 8000cb8:	2032      	movs	r0, #50	; 0x32
 8000cba:	f000 facd 	bl	8001258 <HAL_Delay>
	 for(;;){
 8000cbe:	e76d      	b.n	8000b9c <StartTask02+0x10>
 8000cc0:	2000405c 	.word	0x2000405c
 8000cc4:	200002e4 	.word	0x200002e4
 8000cc8:	080069a0 	.word	0x080069a0
 8000ccc:	20004138 	.word	0x20004138
 8000cd0:	200040a4 	.word	0x200040a4
 8000cd4:	200002f0 	.word	0x200002f0
 8000cd8:	200002e8 	.word	0x200002e8
 8000cdc:	40020000 	.word	0x40020000
 8000ce0:	200040f4 	.word	0x200040f4

08000ce4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  int tog = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
  char buffer5[20]={-1};
 8000cf0:	23ff      	movs	r3, #255	; 0xff
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
  for(;;)
  {
	  if(Rx_data[0]=='t' || tog==1){
 8000d02:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <StartTask03+0xa4>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b74      	cmp	r3, #116	; 0x74
 8000d08:	d002      	beq.n	8000d10 <StartTask03+0x2c>
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d108      	bne.n	8000d22 <StartTask03+0x3e>
		  HAL_Delay(200);
 8000d10:	20c8      	movs	r0, #200	; 0xc8
 8000d12:	f000 faa1 	bl	8001258 <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000d16:	2120      	movs	r1, #32
 8000d18:	481c      	ldr	r0, [pc, #112]	; (8000d8c <StartTask03+0xa8>)
 8000d1a:	f001 f940 	bl	8001f9e <HAL_GPIO_TogglePin>
		  tog = 1;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	61fb      	str	r3, [r7, #28]
	  }
	  if(Rx_data[0]=='l'){
 8000d22:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <StartTask03+0xa4>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b6c      	cmp	r3, #108	; 0x6c
 8000d28:	d1eb      	bne.n	8000d02 <StartTask03+0x1e>
		  tog = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2120      	movs	r1, #32
 8000d32:	4816      	ldr	r0, [pc, #88]	; (8000d8c <StartTask03+0xa8>)
 8000d34:	f001 f91a 	bl	8001f6c <HAL_GPIO_WritePin>
		  Rx_data[0]='x';
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <StartTask03+0xa4>)
 8000d3a:	2278      	movs	r2, #120	; 0x78
 8000d3c:	701a      	strb	r2, [r3, #0]
		  sprintf(buffer5, "%dl", 0);
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	2200      	movs	r2, #0
 8000d44:	4912      	ldr	r1, [pc, #72]	; (8000d90 <StartTask03+0xac>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f005 f998 	bl	800607c <siprintf>
		  osMutexWait(myMutex01Handle, osWaitForever);
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <StartTask03+0xb0>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	4618      	mov	r0, r3
 8000d56:	f002 fe35 	bl	80039c4 <osMutexWait>
		  HAL_UART_Transmit(&huart1, buffer5, strlen(buffer5), 1000);
 8000d5a:	f107 0308 	add.w	r3, r7, #8
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fa3e 	bl	80001e0 <strlen>
 8000d64:	4603      	mov	r3, r0
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	f107 0108 	add.w	r1, r7, #8
 8000d6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <StartTask03+0xb4>)
 8000d72:	f001 fdf0 	bl	8002956 <HAL_UART_Transmit>
		  osMutexRelease(myMutex01Handle);
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <StartTask03+0xb0>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f002 fe70 	bl	8003a60 <osMutexRelease>
		  osThreadYield();
 8000d80:	f002 fde2 	bl	8003948 <osThreadYield>
	  if(Rx_data[0]=='t' || tog==1){
 8000d84:	e7bd      	b.n	8000d02 <StartTask03+0x1e>
 8000d86:	bf00      	nop
 8000d88:	200002e4 	.word	0x200002e4
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	080069a4 	.word	0x080069a4
 8000d94:	20004138 	.word	0x20004138
 8000d98:	200040a4 	.word	0x200040a4

08000d9c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  char buffer4[20]={-1};
 8000da4:	23ff      	movs	r3, #255	; 0xff
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]

  for(;;)
  {

	  if(Rx_data[0]=='s' && c1==1 && c2==1){
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <StartTask04+0x8c>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b73      	cmp	r3, #115	; 0x73
 8000dbc:	d1fb      	bne.n	8000db6 <StartTask04+0x1a>
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <StartTask04+0x90>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d1f7      	bne.n	8000db6 <StartTask04+0x1a>
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <StartTask04+0x94>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d1f3      	bne.n	8000db6 <StartTask04+0x1a>
		  //HAL_UART_Transmit(&huart2, "xxxx", 4, 1000);
		  c1=0;
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <StartTask04+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
		  c2=0;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <StartTask04+0x94>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
	  	  Rx_data[0]='x';
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <StartTask04+0x8c>)
 8000ddc:	2278      	movs	r2, #120	; 0x78
 8000dde:	701a      	strb	r2, [r3, #0]
		  sprintf(buffer4, "%ds", 0);
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	2200      	movs	r2, #0
 8000de6:	4913      	ldr	r1, [pc, #76]	; (8000e34 <StartTask04+0x98>)
 8000de8:	4618      	mov	r0, r3
 8000dea:	f005 f947 	bl	800607c <siprintf>
		  osMutexWait(myMutex01Handle, osWaitForever);
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <StartTask04+0x9c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f04f 31ff 	mov.w	r1, #4294967295
 8000df6:	4618      	mov	r0, r3
 8000df8:	f002 fde4 	bl	80039c4 <osMutexWait>
		  HAL_UART_Transmit(&huart1, buffer4, strlen(buffer4), 1000);
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff f9ed 	bl	80001e0 <strlen>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	f107 010c 	add.w	r1, r7, #12
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	480a      	ldr	r0, [pc, #40]	; (8000e3c <StartTask04+0xa0>)
 8000e14:	f001 fd9f 	bl	8002956 <HAL_UART_Transmit>
		  osMutexRelease(myMutex01Handle);
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <StartTask04+0x9c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f002 fe1f 	bl	8003a60 <osMutexRelease>
		  osThreadYield();
 8000e22:	f002 fd91 	bl	8003948 <osThreadYield>
	  if(Rx_data[0]=='s' && c1==1 && c2==1){
 8000e26:	e7c6      	b.n	8000db6 <StartTask04+0x1a>
 8000e28:	200002e4 	.word	0x200002e4
 8000e2c:	200002ec 	.word	0x200002ec
 8000e30:	200002f0 	.word	0x200002f0
 8000e34:	080069a8 	.word	0x080069a8
 8000e38:	20004138 	.word	0x20004138
 8000e3c:	200040a4 	.word	0x200040a4

08000e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e44:	b672      	cpsid	i
}
 8000e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <Error_Handler+0x8>
	...

08000e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_MspInit+0x54>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <HAL_MspInit+0x54>)
 8000e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e60:	6453      	str	r3, [r2, #68]	; 0x44
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HAL_MspInit+0x54>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <HAL_MspInit+0x54>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <HAL_MspInit+0x54>)
 8000e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <HAL_MspInit+0x54>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	210f      	movs	r1, #15
 8000e8e:	f06f 0001 	mvn.w	r0, #1
 8000e92:	f000 fe06 	bl	8001aa2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800

08000ea4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a17      	ldr	r2, [pc, #92]	; (8000f20 <HAL_ADC_MspInit+0x7c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d127      	bne.n	8000f16 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <HAL_ADC_MspInit+0x80>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	4a15      	ldr	r2, [pc, #84]	; (8000f24 <HAL_ADC_MspInit+0x80>)
 8000ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <HAL_ADC_MspInit+0x80>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_ADC_MspInit+0x80>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <HAL_ADC_MspInit+0x80>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_ADC_MspInit+0x80>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000efe:	2310      	movs	r3, #16
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f02:	2303      	movs	r3, #3
 8000f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <HAL_ADC_MspInit+0x84>)
 8000f12:	f000 fe8f 	bl	8001c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f16:	bf00      	nop
 8000f18:	3728      	adds	r7, #40	; 0x28
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40012000 	.word	0x40012000
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020000 	.word	0x40020000

08000f2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08c      	sub	sp, #48	; 0x30
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a36      	ldr	r2, [pc, #216]	; (8001024 <HAL_UART_MspInit+0xf8>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d135      	bne.n	8000fba <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
 8000f52:	4b35      	ldr	r3, [pc, #212]	; (8001028 <HAL_UART_MspInit+0xfc>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	4a34      	ldr	r2, [pc, #208]	; (8001028 <HAL_UART_MspInit+0xfc>)
 8000f58:	f043 0310 	orr.w	r3, r3, #16
 8000f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5e:	4b32      	ldr	r3, [pc, #200]	; (8001028 <HAL_UART_MspInit+0xfc>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	f003 0310 	and.w	r3, r3, #16
 8000f66:	61bb      	str	r3, [r7, #24]
 8000f68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	4b2e      	ldr	r3, [pc, #184]	; (8001028 <HAL_UART_MspInit+0xfc>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a2d      	ldr	r2, [pc, #180]	; (8001028 <HAL_UART_MspInit+0xfc>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b2b      	ldr	r3, [pc, #172]	; (8001028 <HAL_UART_MspInit+0xfc>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f98:	2307      	movs	r3, #7
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4822      	ldr	r0, [pc, #136]	; (800102c <HAL_UART_MspInit+0x100>)
 8000fa4:	f000 fe46 	bl	8001c34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2105      	movs	r1, #5
 8000fac:	2025      	movs	r0, #37	; 0x25
 8000fae:	f000 fd78 	bl	8001aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fb2:	2025      	movs	r0, #37	; 0x25
 8000fb4:	f000 fd91 	bl	8001ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fb8:	e030      	b.n	800101c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a1c      	ldr	r2, [pc, #112]	; (8001030 <HAL_UART_MspInit+0x104>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d12b      	bne.n	800101c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <HAL_UART_MspInit+0xfc>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	4a16      	ldr	r2, [pc, #88]	; (8001028 <HAL_UART_MspInit+0xfc>)
 8000fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <HAL_UART_MspInit+0xfc>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <HAL_UART_MspInit+0xfc>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <HAL_UART_MspInit+0xfc>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HAL_UART_MspInit+0xfc>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ffc:	230c      	movs	r3, #12
 8000ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800100c:	2307      	movs	r3, #7
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <HAL_UART_MspInit+0x100>)
 8001018:	f000 fe0c 	bl	8001c34 <HAL_GPIO_Init>
}
 800101c:	bf00      	nop
 800101e:	3730      	adds	r7, #48	; 0x30
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40011000 	.word	0x40011000
 8001028:	40023800 	.word	0x40023800
 800102c:	40020000 	.word	0x40020000
 8001030:	40004400 	.word	0x40004400

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <NMI_Handler+0x4>

0800103a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <HardFault_Handler+0x4>

08001040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <MemManage_Handler+0x4>

08001046 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <BusFault_Handler+0x4>

0800104c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <UsageFault_Handler+0x4>

08001052 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001064:	f000 f8d8 	bl	8001218 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001068:	f004 f970 	bl	800534c <xTaskGetSchedulerState>
 800106c:	4603      	mov	r3, r0
 800106e:	2b01      	cmp	r3, #1
 8001070:	d001      	beq.n	8001076 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001072:	f004 fd49 	bl	8005b08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <USART1_IRQHandler+0x10>)
 8001082:	f001 fd2b 	bl	8002adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200040a4 	.word	0x200040a4

08001090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001098:	4a14      	ldr	r2, [pc, #80]	; (80010ec <_sbrk+0x5c>)
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <_sbrk+0x60>)
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <_sbrk+0x64>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <_sbrk+0x68>)
 80010b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d207      	bcs.n	80010d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c0:	f004 ff9c 	bl	8005ffc <__errno>
 80010c4:	4603      	mov	r3, r0
 80010c6:	220c      	movs	r2, #12
 80010c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	e009      	b.n	80010e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d6:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <_sbrk+0x64>)
 80010e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20020000 	.word	0x20020000
 80010f0:	00000400 	.word	0x00000400
 80010f4:	200002f4 	.word	0x200002f4
 80010f8:	20004150 	.word	0x20004150

080010fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <SystemInit+0x20>)
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001106:	4a05      	ldr	r2, [pc, #20]	; (800111c <SystemInit+0x20>)
 8001108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800110c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001158 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001126:	490e      	ldr	r1, [pc, #56]	; (8001160 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001128:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800113c:	4c0b      	ldr	r4, [pc, #44]	; (800116c <LoopFillZerobss+0x26>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800114a:	f7ff ffd7 	bl	80010fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114e:	f004 ff5b 	bl	8006008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001152:	f7ff fa4d 	bl	80005f0 <main>
  bx  lr    
 8001156:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001158:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001160:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001164:	08006a10 	.word	0x08006a10
  ldr r2, =_sbss
 8001168:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800116c:	20004150 	.word	0x20004150

08001170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC_IRQHandler>
	...

08001174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <HAL_Init+0x40>)
 800117e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <HAL_Init+0x40>)
 800118a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800118e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_Init+0x40>)
 8001196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119c:	2003      	movs	r0, #3
 800119e:	f000 fc75 	bl	8001a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a2:	200f      	movs	r0, #15
 80011a4:	f000 f808 	bl	80011b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a8:	f7ff fe50 	bl	8000e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023c00 	.word	0x40023c00

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x54>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0x58>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 fc8d 	bl	8001af6 <HAL_SYSTICK_Config>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00e      	b.n	8001204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d80a      	bhi.n	8001202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f000 fc55 	bl	8001aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <HAL_InitTick+0x5c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	e000      	b.n	8001204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000000 	.word	0x20000000
 8001210:	20000008 	.word	0x20000008
 8001214:	20000004 	.word	0x20000004

08001218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x20>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_IncTick+0x24>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <HAL_IncTick+0x24>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000008 	.word	0x20000008
 800123c:	2000413c 	.word	0x2000413c

08001240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <HAL_GetTick+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	2000413c 	.word	0x2000413c

08001258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff ffee 	bl	8001240 <HAL_GetTick>
 8001264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001270:	d005      	beq.n	800127e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_Delay+0x44>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800127e:	bf00      	nop
 8001280:	f7ff ffde 	bl	8001240 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	429a      	cmp	r2, r3
 800128e:	d8f7      	bhi.n	8001280 <HAL_Delay+0x28>
  {
  }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000008 	.word	0x20000008

080012a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e033      	b.n	800131e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d109      	bne.n	80012d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff fdf0 	bl	8000ea4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d118      	bne.n	8001310 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012e6:	f023 0302 	bic.w	r3, r3, #2
 80012ea:	f043 0202 	orr.w	r2, r3, #2
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 f9fe 	bl	80016f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f023 0303 	bic.w	r3, r3, #3
 8001306:	f043 0201 	orr.w	r2, r3, #1
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	641a      	str	r2, [r3, #64]	; 0x40
 800130e:	e001      	b.n	8001314 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800131c:	7bfb      	ldrb	r3, [r7, #15]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800133a:	2b01      	cmp	r3, #1
 800133c:	d101      	bne.n	8001342 <HAL_ADC_Start+0x1a>
 800133e:	2302      	movs	r3, #2
 8001340:	e097      	b.n	8001472 <HAL_ADC_Start+0x14a>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b01      	cmp	r3, #1
 8001356:	d018      	beq.n	800138a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 0201 	orr.w	r2, r2, #1
 8001366:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001368:	4b45      	ldr	r3, [pc, #276]	; (8001480 <HAL_ADC_Start+0x158>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a45      	ldr	r2, [pc, #276]	; (8001484 <HAL_ADC_Start+0x15c>)
 800136e:	fba2 2303 	umull	r2, r3, r2, r3
 8001372:	0c9a      	lsrs	r2, r3, #18
 8001374:	4613      	mov	r3, r2
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4413      	add	r3, r2
 800137a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800137c:	e002      	b.n	8001384 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	3b01      	subs	r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f9      	bne.n	800137e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b01      	cmp	r3, #1
 8001396:	d15f      	bne.n	8001458 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013a0:	f023 0301 	bic.w	r3, r3, #1
 80013a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d007      	beq.n	80013ca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013d6:	d106      	bne.n	80013e6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013dc:	f023 0206 	bic.w	r2, r3, #6
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	645a      	str	r2, [r3, #68]	; 0x44
 80013e4:	e002      	b.n	80013ec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013f4:	4b24      	ldr	r3, [pc, #144]	; (8001488 <HAL_ADC_Start+0x160>)
 80013f6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001400:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 031f 	and.w	r3, r3, #31
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10f      	bne.n	800142e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d129      	bne.n	8001470 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	e020      	b.n	8001470 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a16      	ldr	r2, [pc, #88]	; (800148c <HAL_ADC_Start+0x164>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d11b      	bne.n	8001470 <HAL_ADC_Start+0x148>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d114      	bne.n	8001470 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	e00b      	b.n	8001470 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	f043 0210 	orr.w	r2, r3, #16
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001468:	f043 0201 	orr.w	r2, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000000 	.word	0x20000000
 8001484:	431bde83 	.word	0x431bde83
 8001488:	40012300 	.word	0x40012300
 800148c:	40012000 	.word	0x40012000

08001490 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d101      	bne.n	80014ac <HAL_ADC_ConfigChannel+0x1c>
 80014a8:	2302      	movs	r3, #2
 80014aa:	e113      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x244>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b09      	cmp	r3, #9
 80014ba:	d925      	bls.n	8001508 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68d9      	ldr	r1, [r3, #12]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	4613      	mov	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	3b1e      	subs	r3, #30
 80014d2:	2207      	movs	r2, #7
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43da      	mvns	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	400a      	ands	r2, r1
 80014e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68d9      	ldr	r1, [r3, #12]
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	4603      	mov	r3, r0
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	4403      	add	r3, r0
 80014fa:	3b1e      	subs	r3, #30
 80014fc:	409a      	lsls	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	e022      	b.n	800154e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6919      	ldr	r1, [r3, #16]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	b29b      	uxth	r3, r3
 8001514:	461a      	mov	r2, r3
 8001516:	4613      	mov	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4413      	add	r3, r2
 800151c:	2207      	movs	r2, #7
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	400a      	ands	r2, r1
 800152a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6919      	ldr	r1, [r3, #16]
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	b29b      	uxth	r3, r3
 800153c:	4618      	mov	r0, r3
 800153e:	4603      	mov	r3, r0
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4403      	add	r3, r0
 8001544:	409a      	lsls	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b06      	cmp	r3, #6
 8001554:	d824      	bhi.n	80015a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	3b05      	subs	r3, #5
 8001568:	221f      	movs	r2, #31
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	400a      	ands	r2, r1
 8001576:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	b29b      	uxth	r3, r3
 8001584:	4618      	mov	r0, r3
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	3b05      	subs	r3, #5
 8001592:	fa00 f203 	lsl.w	r2, r0, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	635a      	str	r2, [r3, #52]	; 0x34
 800159e:	e04c      	b.n	800163a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b0c      	cmp	r3, #12
 80015a6:	d824      	bhi.n	80015f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	3b23      	subs	r3, #35	; 0x23
 80015ba:	221f      	movs	r2, #31
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43da      	mvns	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	400a      	ands	r2, r1
 80015c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	3b23      	subs	r3, #35	; 0x23
 80015e4:	fa00 f203 	lsl.w	r2, r0, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	631a      	str	r2, [r3, #48]	; 0x30
 80015f0:	e023      	b.n	800163a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	3b41      	subs	r3, #65	; 0x41
 8001604:	221f      	movs	r2, #31
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	400a      	ands	r2, r1
 8001612:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	b29b      	uxth	r3, r3
 8001620:	4618      	mov	r0, r3
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	3b41      	subs	r3, #65	; 0x41
 800162e:	fa00 f203 	lsl.w	r2, r0, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800163a:	4b29      	ldr	r3, [pc, #164]	; (80016e0 <HAL_ADC_ConfigChannel+0x250>)
 800163c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a28      	ldr	r2, [pc, #160]	; (80016e4 <HAL_ADC_ConfigChannel+0x254>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d10f      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x1d8>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b12      	cmp	r3, #18
 800164e:	d10b      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a1d      	ldr	r2, [pc, #116]	; (80016e4 <HAL_ADC_ConfigChannel+0x254>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d12b      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x23a>
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a1c      	ldr	r2, [pc, #112]	; (80016e8 <HAL_ADC_ConfigChannel+0x258>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d003      	beq.n	8001684 <HAL_ADC_ConfigChannel+0x1f4>
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b11      	cmp	r3, #17
 8001682:	d122      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a11      	ldr	r2, [pc, #68]	; (80016e8 <HAL_ADC_ConfigChannel+0x258>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d111      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <HAL_ADC_ConfigChannel+0x25c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a11      	ldr	r2, [pc, #68]	; (80016f0 <HAL_ADC_ConfigChannel+0x260>)
 80016ac:	fba2 2303 	umull	r2, r3, r2, r3
 80016b0:	0c9a      	lsrs	r2, r3, #18
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016bc:	e002      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f9      	bne.n	80016be <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	40012300 	.word	0x40012300
 80016e4:	40012000 	.word	0x40012000
 80016e8:	10000012 	.word	0x10000012
 80016ec:	20000000 	.word	0x20000000
 80016f0:	431bde83 	.word	0x431bde83

080016f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016fc:	4b79      	ldr	r3, [pc, #484]	; (80018e4 <ADC_Init+0x1f0>)
 80016fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	431a      	orrs	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001728:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6859      	ldr	r1, [r3, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	021a      	lsls	r2, r3, #8
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800174c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6859      	ldr	r1, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800176e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6899      	ldr	r1, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001786:	4a58      	ldr	r2, [pc, #352]	; (80018e8 <ADC_Init+0x1f4>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d022      	beq.n	80017d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800179a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6899      	ldr	r1, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6899      	ldr	r1, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	e00f      	b.n	80017f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0202 	bic.w	r2, r2, #2
 8001800:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6899      	ldr	r1, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7e1b      	ldrb	r3, [r3, #24]
 800180c:	005a      	lsls	r2, r3, #1
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d01b      	beq.n	8001858 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800182e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800183e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6859      	ldr	r1, [r3, #4]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	3b01      	subs	r3, #1
 800184c:	035a      	lsls	r2, r3, #13
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	e007      	b.n	8001868 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001866:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001876:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	3b01      	subs	r3, #1
 8001884:	051a      	lsls	r2, r3, #20
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800189c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6899      	ldr	r1, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018aa:	025a      	lsls	r2, r3, #9
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6899      	ldr	r1, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	029a      	lsls	r2, r3, #10
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	609a      	str	r2, [r3, #8]
}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	40012300 	.word	0x40012300
 80018e8:	0f000001 	.word	0x0f000001

080018ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001908:	4013      	ands	r3, r2
 800190a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800191c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191e:	4a04      	ldr	r2, [pc, #16]	; (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	60d3      	str	r3, [r2, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <__NVIC_GetPriorityGrouping+0x18>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	0a1b      	lsrs	r3, r3, #8
 800193e:	f003 0307 	and.w	r3, r3, #7
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	db0b      	blt.n	800197a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	f003 021f 	and.w	r2, r3, #31
 8001968:	4907      	ldr	r1, [pc, #28]	; (8001988 <__NVIC_EnableIRQ+0x38>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	2001      	movs	r0, #1
 8001972:	fa00 f202 	lsl.w	r2, r0, r2
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000e100 	.word	0xe000e100

0800198c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	2b00      	cmp	r3, #0
 800199e:	db0a      	blt.n	80019b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	490c      	ldr	r1, [pc, #48]	; (80019d8 <__NVIC_SetPriority+0x4c>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	0112      	lsls	r2, r2, #4
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	440b      	add	r3, r1
 80019b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b4:	e00a      	b.n	80019cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4908      	ldr	r1, [pc, #32]	; (80019dc <__NVIC_SetPriority+0x50>)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	3b04      	subs	r3, #4
 80019c4:	0112      	lsls	r2, r2, #4
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	440b      	add	r3, r1
 80019ca:	761a      	strb	r2, [r3, #24]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000e100 	.word	0xe000e100
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f1c3 0307 	rsb	r3, r3, #7
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	bf28      	it	cs
 80019fe:	2304      	movcs	r3, #4
 8001a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3304      	adds	r3, #4
 8001a06:	2b06      	cmp	r3, #6
 8001a08:	d902      	bls.n	8001a10 <NVIC_EncodePriority+0x30>
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3b03      	subs	r3, #3
 8001a0e:	e000      	b.n	8001a12 <NVIC_EncodePriority+0x32>
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	401a      	ands	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a32:	43d9      	mvns	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	4313      	orrs	r3, r2
         );
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3724      	adds	r7, #36	; 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a58:	d301      	bcc.n	8001a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00f      	b.n	8001a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <SysTick_Config+0x40>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a66:	210f      	movs	r1, #15
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	f7ff ff8e 	bl	800198c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <SysTick_Config+0x40>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a76:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <SysTick_Config+0x40>)
 8001a78:	2207      	movs	r2, #7
 8001a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	e000e010 	.word	0xe000e010

08001a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ff29 	bl	80018ec <__NVIC_SetPriorityGrouping>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab4:	f7ff ff3e 	bl	8001934 <__NVIC_GetPriorityGrouping>
 8001ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	6978      	ldr	r0, [r7, #20]
 8001ac0:	f7ff ff8e 	bl	80019e0 <NVIC_EncodePriority>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff5d 	bl	800198c <__NVIC_SetPriority>
}
 8001ad2:	bf00      	nop
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff31 	bl	8001950 <__NVIC_EnableIRQ>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ffa2 	bl	8001a48 <SysTick_Config>
 8001b04:	4603      	mov	r3, r0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b1c:	f7ff fb90 	bl	8001240 <HAL_GetTick>
 8001b20:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d008      	beq.n	8001b40 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2280      	movs	r2, #128	; 0x80
 8001b32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e052      	b.n	8001be6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0216 	bic.w	r2, r2, #22
 8001b4e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695a      	ldr	r2, [r3, #20]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b5e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d103      	bne.n	8001b70 <HAL_DMA_Abort+0x62>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d007      	beq.n	8001b80 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0208 	bic.w	r2, r2, #8
 8001b7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0201 	bic.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b90:	e013      	b.n	8001bba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b92:	f7ff fb55 	bl	8001240 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b05      	cmp	r3, #5
 8001b9e:	d90c      	bls.n	8001bba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2203      	movs	r2, #3
 8001baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e015      	b.n	8001be6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1e4      	bne.n	8001b92 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bcc:	223f      	movs	r2, #63	; 0x3f
 8001bce:	409a      	lsls	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d004      	beq.n	8001c0c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2280      	movs	r2, #128	; 0x80
 8001c06:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e00c      	b.n	8001c26 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2205      	movs	r2, #5
 8001c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0201 	bic.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	e159      	b.n	8001f04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c50:	2201      	movs	r2, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	f040 8148 	bne.w	8001efe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d005      	beq.n	8001c86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d130      	bne.n	8001ce8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	2203      	movs	r2, #3
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 0201 	and.w	r2, r3, #1
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d017      	beq.n	8001d24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	2203      	movs	r2, #3
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d123      	bne.n	8001d78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	08da      	lsrs	r2, r3, #3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3208      	adds	r2, #8
 8001d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	220f      	movs	r2, #15
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	08da      	lsrs	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3208      	adds	r2, #8
 8001d72:	69b9      	ldr	r1, [r7, #24]
 8001d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0203 	and.w	r2, r3, #3
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 80a2 	beq.w	8001efe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b57      	ldr	r3, [pc, #348]	; (8001f1c <HAL_GPIO_Init+0x2e8>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	4a56      	ldr	r2, [pc, #344]	; (8001f1c <HAL_GPIO_Init+0x2e8>)
 8001dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dca:	4b54      	ldr	r3, [pc, #336]	; (8001f1c <HAL_GPIO_Init+0x2e8>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dd6:	4a52      	ldr	r2, [pc, #328]	; (8001f20 <HAL_GPIO_Init+0x2ec>)
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	089b      	lsrs	r3, r3, #2
 8001ddc:	3302      	adds	r3, #2
 8001dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	220f      	movs	r2, #15
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a49      	ldr	r2, [pc, #292]	; (8001f24 <HAL_GPIO_Init+0x2f0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d019      	beq.n	8001e36 <HAL_GPIO_Init+0x202>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a48      	ldr	r2, [pc, #288]	; (8001f28 <HAL_GPIO_Init+0x2f4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <HAL_GPIO_Init+0x1fe>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a47      	ldr	r2, [pc, #284]	; (8001f2c <HAL_GPIO_Init+0x2f8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00d      	beq.n	8001e2e <HAL_GPIO_Init+0x1fa>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a46      	ldr	r2, [pc, #280]	; (8001f30 <HAL_GPIO_Init+0x2fc>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d007      	beq.n	8001e2a <HAL_GPIO_Init+0x1f6>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a45      	ldr	r2, [pc, #276]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d101      	bne.n	8001e26 <HAL_GPIO_Init+0x1f2>
 8001e22:	2304      	movs	r3, #4
 8001e24:	e008      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e26:	2307      	movs	r3, #7
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e004      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e002      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e36:	2300      	movs	r3, #0
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	f002 0203 	and.w	r2, r2, #3
 8001e3e:	0092      	lsls	r2, r2, #2
 8001e40:	4093      	lsls	r3, r2
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e48:	4935      	ldr	r1, [pc, #212]	; (8001f20 <HAL_GPIO_Init+0x2ec>)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e56:	4b38      	ldr	r3, [pc, #224]	; (8001f38 <HAL_GPIO_Init+0x304>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e7a:	4a2f      	ldr	r2, [pc, #188]	; (8001f38 <HAL_GPIO_Init+0x304>)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e80:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <HAL_GPIO_Init+0x304>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ea4:	4a24      	ldr	r2, [pc, #144]	; (8001f38 <HAL_GPIO_Init+0x304>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eaa:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <HAL_GPIO_Init+0x304>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ece:	4a1a      	ldr	r2, [pc, #104]	; (8001f38 <HAL_GPIO_Init+0x304>)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed4:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <HAL_GPIO_Init+0x304>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ef8:	4a0f      	ldr	r2, [pc, #60]	; (8001f38 <HAL_GPIO_Init+0x304>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3301      	adds	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	2b0f      	cmp	r3, #15
 8001f08:	f67f aea2 	bls.w	8001c50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3724      	adds	r7, #36	; 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40013800 	.word	0x40013800
 8001f24:	40020000 	.word	0x40020000
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020c00 	.word	0x40020c00
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40013c00 	.word	0x40013c00

08001f3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	887b      	ldrh	r3, [r7, #2]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f54:	2301      	movs	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]
 8001f58:	e001      	b.n	8001f5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f7c:	787b      	ldrb	r3, [r7, #1]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f82:	887a      	ldrh	r2, [r7, #2]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f88:	e003      	b.n	8001f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f8a:	887b      	ldrh	r3, [r7, #2]
 8001f8c:	041a      	lsls	r2, r3, #16
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	619a      	str	r2, [r3, #24]
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b085      	sub	sp, #20
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fb0:	887a      	ldrh	r2, [r7, #2]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	041a      	lsls	r2, r3, #16
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	43d9      	mvns	r1, r3
 8001fbc:	887b      	ldrh	r3, [r7, #2]
 8001fbe:	400b      	ands	r3, r1
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	619a      	str	r2, [r3, #24]
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e264      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d075      	beq.n	80020de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ff2:	4ba3      	ldr	r3, [pc, #652]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d00c      	beq.n	8002018 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ffe:	4ba0      	ldr	r3, [pc, #640]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002006:	2b08      	cmp	r3, #8
 8002008:	d112      	bne.n	8002030 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800200a:	4b9d      	ldr	r3, [pc, #628]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002016:	d10b      	bne.n	8002030 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002018:	4b99      	ldr	r3, [pc, #612]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d05b      	beq.n	80020dc <HAL_RCC_OscConfig+0x108>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d157      	bne.n	80020dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e23f      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002038:	d106      	bne.n	8002048 <HAL_RCC_OscConfig+0x74>
 800203a:	4b91      	ldr	r3, [pc, #580]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a90      	ldr	r2, [pc, #576]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	e01d      	b.n	8002084 <HAL_RCC_OscConfig+0xb0>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002050:	d10c      	bne.n	800206c <HAL_RCC_OscConfig+0x98>
 8002052:	4b8b      	ldr	r3, [pc, #556]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a8a      	ldr	r2, [pc, #552]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4b88      	ldr	r3, [pc, #544]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a87      	ldr	r2, [pc, #540]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e00b      	b.n	8002084 <HAL_RCC_OscConfig+0xb0>
 800206c:	4b84      	ldr	r3, [pc, #528]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a83      	ldr	r2, [pc, #524]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b81      	ldr	r3, [pc, #516]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a80      	ldr	r2, [pc, #512]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 800207e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d013      	beq.n	80020b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7ff f8d8 	bl	8001240 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002094:	f7ff f8d4 	bl	8001240 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e204      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	4b76      	ldr	r3, [pc, #472]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0xc0>
 80020b2:	e014      	b.n	80020de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7ff f8c4 	bl	8001240 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020bc:	f7ff f8c0 	bl	8001240 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	; 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e1f0      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	4b6c      	ldr	r3, [pc, #432]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0xe8>
 80020da:	e000      	b.n	80020de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d063      	beq.n	80021b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ea:	4b65      	ldr	r3, [pc, #404]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00b      	beq.n	800210e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020f6:	4b62      	ldr	r3, [pc, #392]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d11c      	bne.n	800213c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002102:	4b5f      	ldr	r3, [pc, #380]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d116      	bne.n	800213c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210e:	4b5c      	ldr	r3, [pc, #368]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_RCC_OscConfig+0x152>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d001      	beq.n	8002126 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e1c4      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002126:	4b56      	ldr	r3, [pc, #344]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4952      	ldr	r1, [pc, #328]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213a:	e03a      	b.n	80021b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d020      	beq.n	8002186 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002144:	4b4f      	ldr	r3, [pc, #316]	; (8002284 <HAL_RCC_OscConfig+0x2b0>)
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214a:	f7ff f879 	bl	8001240 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002152:	f7ff f875 	bl	8001240 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e1a5      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002164:	4b46      	ldr	r3, [pc, #280]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002170:	4b43      	ldr	r3, [pc, #268]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4940      	ldr	r1, [pc, #256]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002180:	4313      	orrs	r3, r2
 8002182:	600b      	str	r3, [r1, #0]
 8002184:	e015      	b.n	80021b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002186:	4b3f      	ldr	r3, [pc, #252]	; (8002284 <HAL_RCC_OscConfig+0x2b0>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff f858 	bl	8001240 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002194:	f7ff f854 	bl	8001240 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e184      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a6:	4b36      	ldr	r3, [pc, #216]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d030      	beq.n	8002220 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d016      	beq.n	80021f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c6:	4b30      	ldr	r3, [pc, #192]	; (8002288 <HAL_RCC_OscConfig+0x2b4>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021cc:	f7ff f838 	bl	8001240 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d4:	f7ff f834 	bl	8001240 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e164      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e6:	4b26      	ldr	r3, [pc, #152]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0x200>
 80021f2:	e015      	b.n	8002220 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f4:	4b24      	ldr	r3, [pc, #144]	; (8002288 <HAL_RCC_OscConfig+0x2b4>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fa:	f7ff f821 	bl	8001240 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002202:	f7ff f81d 	bl	8001240 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e14d      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002214:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f0      	bne.n	8002202 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80a0 	beq.w	800236e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10f      	bne.n	800225e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	4a0e      	ldr	r2, [pc, #56]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224c:	6413      	str	r3, [r2, #64]	; 0x40
 800224e:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800225a:	2301      	movs	r3, #1
 800225c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_RCC_OscConfig+0x2b8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002266:	2b00      	cmp	r3, #0
 8002268:	d121      	bne.n	80022ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800226a:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_RCC_OscConfig+0x2b8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a07      	ldr	r2, [pc, #28]	; (800228c <HAL_RCC_OscConfig+0x2b8>)
 8002270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002276:	f7fe ffe3 	bl	8001240 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227c:	e011      	b.n	80022a2 <HAL_RCC_OscConfig+0x2ce>
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800
 8002284:	42470000 	.word	0x42470000
 8002288:	42470e80 	.word	0x42470e80
 800228c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002290:	f7fe ffd6 	bl	8001240 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e106      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a2:	4b85      	ldr	r3, [pc, #532]	; (80024b8 <HAL_RCC_OscConfig+0x4e4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d106      	bne.n	80022c4 <HAL_RCC_OscConfig+0x2f0>
 80022b6:	4b81      	ldr	r3, [pc, #516]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ba:	4a80      	ldr	r2, [pc, #512]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6713      	str	r3, [r2, #112]	; 0x70
 80022c2:	e01c      	b.n	80022fe <HAL_RCC_OscConfig+0x32a>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b05      	cmp	r3, #5
 80022ca:	d10c      	bne.n	80022e6 <HAL_RCC_OscConfig+0x312>
 80022cc:	4b7b      	ldr	r3, [pc, #492]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d0:	4a7a      	ldr	r2, [pc, #488]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022d2:	f043 0304 	orr.w	r3, r3, #4
 80022d6:	6713      	str	r3, [r2, #112]	; 0x70
 80022d8:	4b78      	ldr	r3, [pc, #480]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022dc:	4a77      	ldr	r2, [pc, #476]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6713      	str	r3, [r2, #112]	; 0x70
 80022e4:	e00b      	b.n	80022fe <HAL_RCC_OscConfig+0x32a>
 80022e6:	4b75      	ldr	r3, [pc, #468]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ea:	4a74      	ldr	r2, [pc, #464]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022ec:	f023 0301 	bic.w	r3, r3, #1
 80022f0:	6713      	str	r3, [r2, #112]	; 0x70
 80022f2:	4b72      	ldr	r3, [pc, #456]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	4a71      	ldr	r2, [pc, #452]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022f8:	f023 0304 	bic.w	r3, r3, #4
 80022fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d015      	beq.n	8002332 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002306:	f7fe ff9b 	bl	8001240 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230c:	e00a      	b.n	8002324 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800230e:	f7fe ff97 	bl	8001240 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f241 3288 	movw	r2, #5000	; 0x1388
 800231c:	4293      	cmp	r3, r2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e0c5      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002324:	4b65      	ldr	r3, [pc, #404]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 8002326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0ee      	beq.n	800230e <HAL_RCC_OscConfig+0x33a>
 8002330:	e014      	b.n	800235c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002332:	f7fe ff85 	bl	8001240 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002338:	e00a      	b.n	8002350 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233a:	f7fe ff81 	bl	8001240 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	f241 3288 	movw	r2, #5000	; 0x1388
 8002348:	4293      	cmp	r3, r2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e0af      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002350:	4b5a      	ldr	r3, [pc, #360]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 8002352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1ee      	bne.n	800233a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800235c:	7dfb      	ldrb	r3, [r7, #23]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d105      	bne.n	800236e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002362:	4b56      	ldr	r3, [pc, #344]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	4a55      	ldr	r2, [pc, #340]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 8002368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 809b 	beq.w	80024ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002378:	4b50      	ldr	r3, [pc, #320]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 030c 	and.w	r3, r3, #12
 8002380:	2b08      	cmp	r3, #8
 8002382:	d05c      	beq.n	800243e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d141      	bne.n	8002410 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238c:	4b4c      	ldr	r3, [pc, #304]	; (80024c0 <HAL_RCC_OscConfig+0x4ec>)
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7fe ff55 	bl	8001240 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239a:	f7fe ff51 	bl	8001240 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e081      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ac:	4b43      	ldr	r3, [pc, #268]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f0      	bne.n	800239a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69da      	ldr	r2, [r3, #28]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	019b      	lsls	r3, r3, #6
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ce:	085b      	lsrs	r3, r3, #1
 80023d0:	3b01      	subs	r3, #1
 80023d2:	041b      	lsls	r3, r3, #16
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023da:	061b      	lsls	r3, r3, #24
 80023dc:	4937      	ldr	r1, [pc, #220]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e2:	4b37      	ldr	r3, [pc, #220]	; (80024c0 <HAL_RCC_OscConfig+0x4ec>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7fe ff2a 	bl	8001240 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f0:	f7fe ff26 	bl	8001240 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e056      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002402:	4b2e      	ldr	r3, [pc, #184]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0x41c>
 800240e:	e04e      	b.n	80024ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002410:	4b2b      	ldr	r3, [pc, #172]	; (80024c0 <HAL_RCC_OscConfig+0x4ec>)
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7fe ff13 	bl	8001240 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241e:	f7fe ff0f 	bl	8001240 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e03f      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002430:	4b22      	ldr	r3, [pc, #136]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f0      	bne.n	800241e <HAL_RCC_OscConfig+0x44a>
 800243c:	e037      	b.n	80024ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e032      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800244a:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d028      	beq.n	80024aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d121      	bne.n	80024aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002470:	429a      	cmp	r2, r3
 8002472:	d11a      	bne.n	80024aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800247a:	4013      	ands	r3, r2
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002480:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002482:	4293      	cmp	r3, r2
 8002484:	d111      	bne.n	80024aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	085b      	lsrs	r3, r3, #1
 8002492:	3b01      	subs	r3, #1
 8002494:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002496:	429a      	cmp	r2, r3
 8002498:	d107      	bne.n	80024aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d001      	beq.n	80024ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40007000 	.word	0x40007000
 80024bc:	40023800 	.word	0x40023800
 80024c0:	42470060 	.word	0x42470060

080024c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0cc      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d8:	4b68      	ldr	r3, [pc, #416]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d90c      	bls.n	8002500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b65      	ldr	r3, [pc, #404]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ee:	4b63      	ldr	r3, [pc, #396]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0b8      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d020      	beq.n	800254e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002518:	4b59      	ldr	r3, [pc, #356]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a58      	ldr	r2, [pc, #352]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002522:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002530:	4b53      	ldr	r3, [pc, #332]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a52      	ldr	r2, [pc, #328]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800253a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800253c:	4b50      	ldr	r3, [pc, #320]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	494d      	ldr	r1, [pc, #308]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d044      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d107      	bne.n	8002572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	4b47      	ldr	r3, [pc, #284]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d119      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e07f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d003      	beq.n	8002582 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800257e:	2b03      	cmp	r3, #3
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002582:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e06f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002592:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e067      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a2:	4b37      	ldr	r3, [pc, #220]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f023 0203 	bic.w	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4934      	ldr	r1, [pc, #208]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b4:	f7fe fe44 	bl	8001240 <HAL_GetTick>
 80025b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025bc:	f7fe fe40 	bl	8001240 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e04f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 020c 	and.w	r2, r3, #12
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d1eb      	bne.n	80025bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e4:	4b25      	ldr	r3, [pc, #148]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d20c      	bcs.n	800260c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b22      	ldr	r3, [pc, #136]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fa:	4b20      	ldr	r3, [pc, #128]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d001      	beq.n	800260c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e032      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4916      	ldr	r1, [pc, #88]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	4313      	orrs	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d009      	beq.n	800264a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	490e      	ldr	r1, [pc, #56]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800264a:	f000 f821 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 800264e:	4602      	mov	r2, r0
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	490a      	ldr	r1, [pc, #40]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	5ccb      	ldrb	r3, [r1, r3]
 800265e:	fa22 f303 	lsr.w	r3, r2, r3
 8002662:	4a09      	ldr	r2, [pc, #36]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_RCC_ClockConfig+0x1c8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fda4 	bl	80011b8 <HAL_InitTick>

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40023c00 	.word	0x40023c00
 8002680:	40023800 	.word	0x40023800
 8002684:	080069b4 	.word	0x080069b4
 8002688:	20000000 	.word	0x20000000
 800268c:	20000004 	.word	0x20000004

08002690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002690:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	2300      	movs	r3, #0
 80026a2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026a8:	4b67      	ldr	r3, [pc, #412]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d00d      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0x40>
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	f200 80bd 	bhi.w	8002834 <HAL_RCC_GetSysClockFreq+0x1a4>
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_RCC_GetSysClockFreq+0x34>
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d003      	beq.n	80026ca <HAL_RCC_GetSysClockFreq+0x3a>
 80026c2:	e0b7      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026c4:	4b61      	ldr	r3, [pc, #388]	; (800284c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80026c6:	60bb      	str	r3, [r7, #8]
       break;
 80026c8:	e0b7      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ca:	4b61      	ldr	r3, [pc, #388]	; (8002850 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80026cc:	60bb      	str	r3, [r7, #8]
      break;
 80026ce:	e0b4      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026d0:	4b5d      	ldr	r3, [pc, #372]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026da:	4b5b      	ldr	r3, [pc, #364]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d04d      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e6:	4b58      	ldr	r3, [pc, #352]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	099b      	lsrs	r3, r3, #6
 80026ec:	461a      	mov	r2, r3
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026f6:	f04f 0100 	mov.w	r1, #0
 80026fa:	ea02 0800 	and.w	r8, r2, r0
 80026fe:	ea03 0901 	and.w	r9, r3, r1
 8002702:	4640      	mov	r0, r8
 8002704:	4649      	mov	r1, r9
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	014b      	lsls	r3, r1, #5
 8002710:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002714:	0142      	lsls	r2, r0, #5
 8002716:	4610      	mov	r0, r2
 8002718:	4619      	mov	r1, r3
 800271a:	ebb0 0008 	subs.w	r0, r0, r8
 800271e:	eb61 0109 	sbc.w	r1, r1, r9
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	018b      	lsls	r3, r1, #6
 800272c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002730:	0182      	lsls	r2, r0, #6
 8002732:	1a12      	subs	r2, r2, r0
 8002734:	eb63 0301 	sbc.w	r3, r3, r1
 8002738:	f04f 0000 	mov.w	r0, #0
 800273c:	f04f 0100 	mov.w	r1, #0
 8002740:	00d9      	lsls	r1, r3, #3
 8002742:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002746:	00d0      	lsls	r0, r2, #3
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	eb12 0208 	adds.w	r2, r2, r8
 8002750:	eb43 0309 	adc.w	r3, r3, r9
 8002754:	f04f 0000 	mov.w	r0, #0
 8002758:	f04f 0100 	mov.w	r1, #0
 800275c:	0259      	lsls	r1, r3, #9
 800275e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002762:	0250      	lsls	r0, r2, #9
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	461a      	mov	r2, r3
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	f7fd fd8c 	bl	8000290 <__aeabi_uldivmod>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4613      	mov	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e04a      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002782:	4b31      	ldr	r3, [pc, #196]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	099b      	lsrs	r3, r3, #6
 8002788:	461a      	mov	r2, r3
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002792:	f04f 0100 	mov.w	r1, #0
 8002796:	ea02 0400 	and.w	r4, r2, r0
 800279a:	ea03 0501 	and.w	r5, r3, r1
 800279e:	4620      	mov	r0, r4
 80027a0:	4629      	mov	r1, r5
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	014b      	lsls	r3, r1, #5
 80027ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027b0:	0142      	lsls	r2, r0, #5
 80027b2:	4610      	mov	r0, r2
 80027b4:	4619      	mov	r1, r3
 80027b6:	1b00      	subs	r0, r0, r4
 80027b8:	eb61 0105 	sbc.w	r1, r1, r5
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	018b      	lsls	r3, r1, #6
 80027c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027ca:	0182      	lsls	r2, r0, #6
 80027cc:	1a12      	subs	r2, r2, r0
 80027ce:	eb63 0301 	sbc.w	r3, r3, r1
 80027d2:	f04f 0000 	mov.w	r0, #0
 80027d6:	f04f 0100 	mov.w	r1, #0
 80027da:	00d9      	lsls	r1, r3, #3
 80027dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027e0:	00d0      	lsls	r0, r2, #3
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	1912      	adds	r2, r2, r4
 80027e8:	eb45 0303 	adc.w	r3, r5, r3
 80027ec:	f04f 0000 	mov.w	r0, #0
 80027f0:	f04f 0100 	mov.w	r1, #0
 80027f4:	0299      	lsls	r1, r3, #10
 80027f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80027fa:	0290      	lsls	r0, r2, #10
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	461a      	mov	r2, r3
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	f7fd fd40 	bl	8000290 <__aeabi_uldivmod>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4613      	mov	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	0c1b      	lsrs	r3, r3, #16
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	3301      	adds	r3, #1
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002830:	60bb      	str	r3, [r7, #8]
      break;
 8002832:	e002      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002836:	60bb      	str	r3, [r7, #8]
      break;
 8002838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800283a:	68bb      	ldr	r3, [r7, #8]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800
 800284c:	00f42400 	.word	0x00f42400
 8002850:	007a1200 	.word	0x007a1200

08002854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <HAL_RCC_GetHCLKFreq+0x14>)
 800285a:	681b      	ldr	r3, [r3, #0]
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	20000000 	.word	0x20000000

0800286c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002870:	f7ff fff0 	bl	8002854 <HAL_RCC_GetHCLKFreq>
 8002874:	4602      	mov	r2, r0
 8002876:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	0a9b      	lsrs	r3, r3, #10
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	4903      	ldr	r1, [pc, #12]	; (8002890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002882:	5ccb      	ldrb	r3, [r1, r3]
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002888:	4618      	mov	r0, r3
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40023800 	.word	0x40023800
 8002890:	080069c4 	.word	0x080069c4

08002894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002898:	f7ff ffdc 	bl	8002854 <HAL_RCC_GetHCLKFreq>
 800289c:	4602      	mov	r2, r0
 800289e:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	0b5b      	lsrs	r3, r3, #13
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	4903      	ldr	r1, [pc, #12]	; (80028b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028aa:	5ccb      	ldrb	r3, [r1, r3]
 80028ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40023800 	.word	0x40023800
 80028b8:	080069c4 	.word	0x080069c4

080028bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e03f      	b.n	800294e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe fb22 	bl	8000f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2224      	movs	r2, #36	; 0x24
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fddb 	bl	80034bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002914:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695a      	ldr	r2, [r3, #20]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002924:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002934:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2220      	movs	r2, #32
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b08a      	sub	sp, #40	; 0x28
 800295a:	af02      	add	r7, sp, #8
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	603b      	str	r3, [r7, #0]
 8002962:	4613      	mov	r3, r2
 8002964:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b20      	cmp	r3, #32
 8002974:	d17c      	bne.n	8002a70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <HAL_UART_Transmit+0x2c>
 800297c:	88fb      	ldrh	r3, [r7, #6]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e075      	b.n	8002a72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_UART_Transmit+0x3e>
 8002990:	2302      	movs	r3, #2
 8002992:	e06e      	b.n	8002a72 <HAL_UART_Transmit+0x11c>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2221      	movs	r2, #33	; 0x21
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029aa:	f7fe fc49 	bl	8001240 <HAL_GetTick>
 80029ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	88fa      	ldrh	r2, [r7, #6]
 80029b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	88fa      	ldrh	r2, [r7, #6]
 80029ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c4:	d108      	bne.n	80029d8 <HAL_UART_Transmit+0x82>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d104      	bne.n	80029d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	61bb      	str	r3, [r7, #24]
 80029d6:	e003      	b.n	80029e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029e8:	e02a      	b.n	8002a40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2200      	movs	r2, #0
 80029f2:	2180      	movs	r1, #128	; 0x80
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fb1f 	bl	8003038 <UART_WaitOnFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e036      	b.n	8002a72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10b      	bne.n	8002a22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	61bb      	str	r3, [r7, #24]
 8002a20:	e007      	b.n	8002a32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	781a      	ldrb	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1cf      	bne.n	80029ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2200      	movs	r2, #0
 8002a52:	2140      	movs	r1, #64	; 0x40
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 faef 	bl	8003038 <UART_WaitOnFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e006      	b.n	8002a72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e000      	b.n	8002a72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a70:	2302      	movs	r3, #2
  }
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3720      	adds	r7, #32
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	4613      	mov	r3, r2
 8002a86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	d11d      	bne.n	8002ad0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <HAL_UART_Receive_IT+0x26>
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e016      	b.n	8002ad2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_UART_Receive_IT+0x38>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e00f      	b.n	8002ad2 <HAL_UART_Receive_IT+0x58>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 fb24 	bl	8003114 <UART_Start_Receive_IT>
 8002acc:	4603      	mov	r3, r0
 8002ace:	e000      	b.n	8002ad2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002ad0:	2302      	movs	r3, #2
  }
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b0ba      	sub	sp, #232	; 0xe8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002b1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10f      	bne.n	8002b42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <HAL_UART_IRQHandler+0x66>
 8002b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fc03 	bl	8003346 <UART_Receive_IT>
      return;
 8002b40:	e256      	b.n	8002ff0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 80de 	beq.w	8002d08 <HAL_UART_IRQHandler+0x22c>
 8002b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d106      	bne.n	8002b66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 80d1 	beq.w	8002d08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_UART_IRQHandler+0xae>
 8002b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f043 0201 	orr.w	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00b      	beq.n	8002bae <HAL_UART_IRQHandler+0xd2>
 8002b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f043 0202 	orr.w	r2, r3, #2
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00b      	beq.n	8002bd2 <HAL_UART_IRQHandler+0xf6>
 8002bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f043 0204 	orr.w	r2, r3, #4
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d011      	beq.n	8002c02 <HAL_UART_IRQHandler+0x126>
 8002bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d105      	bne.n	8002bf6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f043 0208 	orr.w	r2, r3, #8
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 81ed 	beq.w	8002fe6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_UART_IRQHandler+0x14e>
 8002c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 fb8e 	bl	8003346 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c34:	2b40      	cmp	r3, #64	; 0x40
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d103      	bne.n	8002c56 <HAL_UART_IRQHandler+0x17a>
 8002c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d04f      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fa96 	bl	8003188 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c66:	2b40      	cmp	r3, #64	; 0x40
 8002c68:	d141      	bne.n	8002cee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3314      	adds	r3, #20
 8002c70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c78:	e853 3f00 	ldrex	r3, [r3]
 8002c7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3314      	adds	r3, #20
 8002c92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ca2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ca6:	e841 2300 	strex	r3, r2, [r1]
 8002caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002cae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1d9      	bne.n	8002c6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d013      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc2:	4a7d      	ldr	r2, [pc, #500]	; (8002eb8 <HAL_UART_IRQHandler+0x3dc>)
 8002cc4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe ff8f 	bl	8001bee <HAL_DMA_Abort_IT>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d016      	beq.n	8002d04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce4:	e00e      	b.n	8002d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f990 	bl	800300c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cec:	e00a      	b.n	8002d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f98c 	bl	800300c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf4:	e006      	b.n	8002d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f988 	bl	800300c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d02:	e170      	b.n	8002fe6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d04:	bf00      	nop
    return;
 8002d06:	e16e      	b.n	8002fe6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	f040 814a 	bne.w	8002fa6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 8143 	beq.w	8002fa6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 813c 	beq.w	8002fa6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4e:	2b40      	cmp	r3, #64	; 0x40
 8002d50:	f040 80b4 	bne.w	8002ebc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 8140 	beq.w	8002fea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d72:	429a      	cmp	r2, r3
 8002d74:	f080 8139 	bcs.w	8002fea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d8a:	f000 8088 	beq.w	8002e9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	330c      	adds	r3, #12
 8002d94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d9c:	e853 3f00 	ldrex	r3, [r3]
 8002da0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002da4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	330c      	adds	r3, #12
 8002db6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002dba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002dc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002dca:	e841 2300 	strex	r3, r2, [r1]
 8002dce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1d9      	bne.n	8002d8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3314      	adds	r3, #20
 8002de0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002de4:	e853 3f00 	ldrex	r3, [r3]
 8002de8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dec:	f023 0301 	bic.w	r3, r3, #1
 8002df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	3314      	adds	r3, #20
 8002dfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002dfe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e0a:	e841 2300 	strex	r3, r2, [r1]
 8002e0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1e1      	bne.n	8002dda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3314      	adds	r3, #20
 8002e1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e20:	e853 3f00 	ldrex	r3, [r3]
 8002e24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3314      	adds	r3, #20
 8002e36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e42:	e841 2300 	strex	r3, r2, [r1]
 8002e46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1e3      	bne.n	8002e16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	330c      	adds	r3, #12
 8002e62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e66:	e853 3f00 	ldrex	r3, [r3]
 8002e6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e6e:	f023 0310 	bic.w	r3, r3, #16
 8002e72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	330c      	adds	r3, #12
 8002e7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e80:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e88:	e841 2300 	strex	r3, r2, [r1]
 8002e8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1e3      	bne.n	8002e5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe fe38 	bl	8001b0e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	4619      	mov	r1, r3
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f8b6 	bl	8003020 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002eb4:	e099      	b.n	8002fea <HAL_UART_IRQHandler+0x50e>
 8002eb6:	bf00      	nop
 8002eb8:	0800324f 	.word	0x0800324f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 808b 	beq.w	8002fee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002ed8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 8086 	beq.w	8002fee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	330c      	adds	r3, #12
 8002ee8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eec:	e853 3f00 	ldrex	r3, [r3]
 8002ef0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ef8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	330c      	adds	r3, #12
 8002f02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002f06:	647a      	str	r2, [r7, #68]	; 0x44
 8002f08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f0e:	e841 2300 	strex	r3, r2, [r1]
 8002f12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1e3      	bne.n	8002ee2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	3314      	adds	r3, #20
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	e853 3f00 	ldrex	r3, [r3]
 8002f28:	623b      	str	r3, [r7, #32]
   return(result);
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3314      	adds	r3, #20
 8002f3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f3e:	633a      	str	r2, [r7, #48]	; 0x30
 8002f40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f46:	e841 2300 	strex	r3, r2, [r1]
 8002f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1e3      	bne.n	8002f1a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	330c      	adds	r3, #12
 8002f66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	e853 3f00 	ldrex	r3, [r3]
 8002f6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0310 	bic.w	r3, r3, #16
 8002f76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	330c      	adds	r3, #12
 8002f80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f84:	61fa      	str	r2, [r7, #28]
 8002f86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f88:	69b9      	ldr	r1, [r7, #24]
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	e841 2300 	strex	r3, r2, [r1]
 8002f90:	617b      	str	r3, [r7, #20]
   return(result);
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1e3      	bne.n	8002f60 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f83e 	bl	8003020 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fa4:	e023      	b.n	8002fee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d009      	beq.n	8002fc6 <HAL_UART_IRQHandler+0x4ea>
 8002fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f959 	bl	8003276 <UART_Transmit_IT>
    return;
 8002fc4:	e014      	b.n	8002ff0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00e      	beq.n	8002ff0 <HAL_UART_IRQHandler+0x514>
 8002fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f999 	bl	8003316 <UART_EndTransmit_IT>
    return;
 8002fe4:	e004      	b.n	8002ff0 <HAL_UART_IRQHandler+0x514>
    return;
 8002fe6:	bf00      	nop
 8002fe8:	e002      	b.n	8002ff0 <HAL_UART_IRQHandler+0x514>
      return;
 8002fea:	bf00      	nop
 8002fec:	e000      	b.n	8002ff0 <HAL_UART_IRQHandler+0x514>
      return;
 8002fee:	bf00      	nop
  }
}
 8002ff0:	37e8      	adds	r7, #232	; 0xe8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop

08002ff8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b090      	sub	sp, #64	; 0x40
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	4613      	mov	r3, r2
 8003046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003048:	e050      	b.n	80030ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d04c      	beq.n	80030ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <UART_WaitOnFlagUntilTimeout+0x30>
 8003058:	f7fe f8f2 	bl	8001240 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003064:	429a      	cmp	r2, r3
 8003066:	d241      	bcs.n	80030ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	330c      	adds	r3, #12
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003072:	e853 3f00 	ldrex	r3, [r3]
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800307e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	330c      	adds	r3, #12
 8003086:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003088:	637a      	str	r2, [r7, #52]	; 0x34
 800308a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800308e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003090:	e841 2300 	strex	r3, r2, [r1]
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1e5      	bne.n	8003068 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3314      	adds	r3, #20
 80030a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	e853 3f00 	ldrex	r3, [r3]
 80030aa:	613b      	str	r3, [r7, #16]
   return(result);
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3314      	adds	r3, #20
 80030ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030bc:	623a      	str	r2, [r7, #32]
 80030be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c0:	69f9      	ldr	r1, [r7, #28]
 80030c2:	6a3a      	ldr	r2, [r7, #32]
 80030c4:	e841 2300 	strex	r3, r2, [r1]
 80030c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e5      	bne.n	800309c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e00f      	b.n	800310c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	4013      	ands	r3, r2
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	bf0c      	ite	eq
 80030fc:	2301      	moveq	r3, #1
 80030fe:	2300      	movne	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	461a      	mov	r2, r3
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	429a      	cmp	r2, r3
 8003108:	d09f      	beq.n	800304a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3740      	adds	r7, #64	; 0x40
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	4613      	mov	r3, r2
 8003120:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	88fa      	ldrh	r2, [r7, #6]
 800312c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	88fa      	ldrh	r2, [r7, #6]
 8003132:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2222      	movs	r2, #34	; 0x22
 800313e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003158:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695a      	ldr	r2, [r3, #20]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 0201 	orr.w	r2, r2, #1
 8003168:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0220 	orr.w	r2, r2, #32
 8003178:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003188:	b480      	push	{r7}
 800318a:	b095      	sub	sp, #84	; 0x54
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	330c      	adds	r3, #12
 8003196:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800319a:	e853 3f00 	ldrex	r3, [r3]
 800319e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80031a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	330c      	adds	r3, #12
 80031ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031b0:	643a      	str	r2, [r7, #64]	; 0x40
 80031b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80031b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031b8:	e841 2300 	strex	r3, r2, [r1]
 80031bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1e5      	bne.n	8003190 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3314      	adds	r3, #20
 80031ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	e853 3f00 	ldrex	r3, [r3]
 80031d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f023 0301 	bic.w	r3, r3, #1
 80031da:	64bb      	str	r3, [r7, #72]	; 0x48
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3314      	adds	r3, #20
 80031e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031ec:	e841 2300 	strex	r3, r2, [r1]
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1e5      	bne.n	80031c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d119      	bne.n	8003234 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	330c      	adds	r3, #12
 8003206:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	e853 3f00 	ldrex	r3, [r3]
 800320e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f023 0310 	bic.w	r3, r3, #16
 8003216:	647b      	str	r3, [r7, #68]	; 0x44
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	330c      	adds	r3, #12
 800321e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003220:	61ba      	str	r2, [r7, #24]
 8003222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003224:	6979      	ldr	r1, [r7, #20]
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	e841 2300 	strex	r3, r2, [r1]
 800322c:	613b      	str	r3, [r7, #16]
   return(result);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1e5      	bne.n	8003200 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003242:	bf00      	nop
 8003244:	3754      	adds	r7, #84	; 0x54
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f7ff fecf 	bl	800300c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800326e:	bf00      	nop
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003276:	b480      	push	{r7}
 8003278:	b085      	sub	sp, #20
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b21      	cmp	r3, #33	; 0x21
 8003288:	d13e      	bne.n	8003308 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003292:	d114      	bne.n	80032be <UART_Transmit_IT+0x48>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d110      	bne.n	80032be <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	1c9a      	adds	r2, r3, #2
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	621a      	str	r2, [r3, #32]
 80032bc:	e008      	b.n	80032d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	1c59      	adds	r1, r3, #1
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6211      	str	r1, [r2, #32]
 80032c8:	781a      	ldrb	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29b      	uxth	r3, r3
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	4619      	mov	r1, r3
 80032de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10f      	bne.n	8003304 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003302:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	e000      	b.n	800330a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003308:	2302      	movs	r3, #2
  }
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b082      	sub	sp, #8
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800332c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff fe5e 	bl	8002ff8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b08c      	sub	sp, #48	; 0x30
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b22      	cmp	r3, #34	; 0x22
 8003358:	f040 80ab 	bne.w	80034b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003364:	d117      	bne.n	8003396 <UART_Receive_IT+0x50>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d113      	bne.n	8003396 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800336e:	2300      	movs	r3, #0
 8003370:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	b29b      	uxth	r3, r3
 8003380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003384:	b29a      	uxth	r2, r3
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338e:	1c9a      	adds	r2, r3, #2
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	629a      	str	r2, [r3, #40]	; 0x28
 8003394:	e026      	b.n	80033e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800339c:	2300      	movs	r3, #0
 800339e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a8:	d007      	beq.n	80033ba <UART_Receive_IT+0x74>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10a      	bne.n	80033c8 <UART_Receive_IT+0x82>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d106      	bne.n	80033c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c4:	701a      	strb	r2, [r3, #0]
 80033c6:	e008      	b.n	80033da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	4619      	mov	r1, r3
 80033f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d15a      	bne.n	80034ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0220 	bic.w	r2, r2, #32
 8003406:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003416:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0201 	bic.w	r2, r2, #1
 8003426:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	2b01      	cmp	r3, #1
 8003436:	d135      	bne.n	80034a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	330c      	adds	r3, #12
 8003444:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	e853 3f00 	ldrex	r3, [r3]
 800344c:	613b      	str	r3, [r7, #16]
   return(result);
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f023 0310 	bic.w	r3, r3, #16
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	330c      	adds	r3, #12
 800345c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345e:	623a      	str	r2, [r7, #32]
 8003460:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003462:	69f9      	ldr	r1, [r7, #28]
 8003464:	6a3a      	ldr	r2, [r7, #32]
 8003466:	e841 2300 	strex	r3, r2, [r1]
 800346a:	61bb      	str	r3, [r7, #24]
   return(result);
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1e5      	bne.n	800343e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b10      	cmp	r3, #16
 800347e:	d10a      	bne.n	8003496 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800349a:	4619      	mov	r1, r3
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff fdbf 	bl	8003020 <HAL_UARTEx_RxEventCallback>
 80034a2:	e002      	b.n	80034aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7fd f889 	bl	80005bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	e002      	b.n	80034b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	e000      	b.n	80034b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80034b2:	2302      	movs	r3, #2
  }
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3730      	adds	r7, #48	; 0x30
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c0:	b09f      	sub	sp, #124	; 0x7c
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d2:	68d9      	ldr	r1, [r3, #12]
 80034d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	ea40 0301 	orr.w	r3, r0, r1
 80034dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80034f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003500:	f021 010c 	bic.w	r1, r1, #12
 8003504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800350a:	430b      	orrs	r3, r1
 800350c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800350e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351a:	6999      	ldr	r1, [r3, #24]
 800351c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	ea40 0301 	orr.w	r3, r0, r1
 8003524:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	4bc5      	ldr	r3, [pc, #788]	; (8003840 <UART_SetConfig+0x384>)
 800352c:	429a      	cmp	r2, r3
 800352e:	d004      	beq.n	800353a <UART_SetConfig+0x7e>
 8003530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4bc3      	ldr	r3, [pc, #780]	; (8003844 <UART_SetConfig+0x388>)
 8003536:	429a      	cmp	r2, r3
 8003538:	d103      	bne.n	8003542 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800353a:	f7ff f9ab 	bl	8002894 <HAL_RCC_GetPCLK2Freq>
 800353e:	6778      	str	r0, [r7, #116]	; 0x74
 8003540:	e002      	b.n	8003548 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003542:	f7ff f993 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 8003546:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003550:	f040 80b6 	bne.w	80036c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003554:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003556:	461c      	mov	r4, r3
 8003558:	f04f 0500 	mov.w	r5, #0
 800355c:	4622      	mov	r2, r4
 800355e:	462b      	mov	r3, r5
 8003560:	1891      	adds	r1, r2, r2
 8003562:	6439      	str	r1, [r7, #64]	; 0x40
 8003564:	415b      	adcs	r3, r3
 8003566:	647b      	str	r3, [r7, #68]	; 0x44
 8003568:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800356c:	1912      	adds	r2, r2, r4
 800356e:	eb45 0303 	adc.w	r3, r5, r3
 8003572:	f04f 0000 	mov.w	r0, #0
 8003576:	f04f 0100 	mov.w	r1, #0
 800357a:	00d9      	lsls	r1, r3, #3
 800357c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003580:	00d0      	lsls	r0, r2, #3
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	1911      	adds	r1, r2, r4
 8003588:	6639      	str	r1, [r7, #96]	; 0x60
 800358a:	416b      	adcs	r3, r5
 800358c:	667b      	str	r3, [r7, #100]	; 0x64
 800358e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	461a      	mov	r2, r3
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	1891      	adds	r1, r2, r2
 800359a:	63b9      	str	r1, [r7, #56]	; 0x38
 800359c:	415b      	adcs	r3, r3
 800359e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80035a8:	f7fc fe72 	bl	8000290 <__aeabi_uldivmod>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4ba5      	ldr	r3, [pc, #660]	; (8003848 <UART_SetConfig+0x38c>)
 80035b2:	fba3 2302 	umull	r2, r3, r3, r2
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	011e      	lsls	r6, r3, #4
 80035ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035bc:	461c      	mov	r4, r3
 80035be:	f04f 0500 	mov.w	r5, #0
 80035c2:	4622      	mov	r2, r4
 80035c4:	462b      	mov	r3, r5
 80035c6:	1891      	adds	r1, r2, r2
 80035c8:	6339      	str	r1, [r7, #48]	; 0x30
 80035ca:	415b      	adcs	r3, r3
 80035cc:	637b      	str	r3, [r7, #52]	; 0x34
 80035ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035d2:	1912      	adds	r2, r2, r4
 80035d4:	eb45 0303 	adc.w	r3, r5, r3
 80035d8:	f04f 0000 	mov.w	r0, #0
 80035dc:	f04f 0100 	mov.w	r1, #0
 80035e0:	00d9      	lsls	r1, r3, #3
 80035e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035e6:	00d0      	lsls	r0, r2, #3
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	1911      	adds	r1, r2, r4
 80035ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80035f0:	416b      	adcs	r3, r5
 80035f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	461a      	mov	r2, r3
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	1891      	adds	r1, r2, r2
 8003600:	62b9      	str	r1, [r7, #40]	; 0x28
 8003602:	415b      	adcs	r3, r3
 8003604:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003606:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800360a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800360e:	f7fc fe3f 	bl	8000290 <__aeabi_uldivmod>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4b8c      	ldr	r3, [pc, #560]	; (8003848 <UART_SetConfig+0x38c>)
 8003618:	fba3 1302 	umull	r1, r3, r3, r2
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	2164      	movs	r1, #100	; 0x64
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	3332      	adds	r3, #50	; 0x32
 800362a:	4a87      	ldr	r2, [pc, #540]	; (8003848 <UART_SetConfig+0x38c>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	095b      	lsrs	r3, r3, #5
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003638:	441e      	add	r6, r3
 800363a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800363c:	4618      	mov	r0, r3
 800363e:	f04f 0100 	mov.w	r1, #0
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	1894      	adds	r4, r2, r2
 8003648:	623c      	str	r4, [r7, #32]
 800364a:	415b      	adcs	r3, r3
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
 800364e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003652:	1812      	adds	r2, r2, r0
 8003654:	eb41 0303 	adc.w	r3, r1, r3
 8003658:	f04f 0400 	mov.w	r4, #0
 800365c:	f04f 0500 	mov.w	r5, #0
 8003660:	00dd      	lsls	r5, r3, #3
 8003662:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003666:	00d4      	lsls	r4, r2, #3
 8003668:	4622      	mov	r2, r4
 800366a:	462b      	mov	r3, r5
 800366c:	1814      	adds	r4, r2, r0
 800366e:	653c      	str	r4, [r7, #80]	; 0x50
 8003670:	414b      	adcs	r3, r1
 8003672:	657b      	str	r3, [r7, #84]	; 0x54
 8003674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	461a      	mov	r2, r3
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	1891      	adds	r1, r2, r2
 8003680:	61b9      	str	r1, [r7, #24]
 8003682:	415b      	adcs	r3, r3
 8003684:	61fb      	str	r3, [r7, #28]
 8003686:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800368a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800368e:	f7fc fdff 	bl	8000290 <__aeabi_uldivmod>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4b6c      	ldr	r3, [pc, #432]	; (8003848 <UART_SetConfig+0x38c>)
 8003698:	fba3 1302 	umull	r1, r3, r3, r2
 800369c:	095b      	lsrs	r3, r3, #5
 800369e:	2164      	movs	r1, #100	; 0x64
 80036a0:	fb01 f303 	mul.w	r3, r1, r3
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	3332      	adds	r3, #50	; 0x32
 80036aa:	4a67      	ldr	r2, [pc, #412]	; (8003848 <UART_SetConfig+0x38c>)
 80036ac:	fba2 2303 	umull	r2, r3, r2, r3
 80036b0:	095b      	lsrs	r3, r3, #5
 80036b2:	f003 0207 	and.w	r2, r3, #7
 80036b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4432      	add	r2, r6
 80036bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036be:	e0b9      	b.n	8003834 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036c2:	461c      	mov	r4, r3
 80036c4:	f04f 0500 	mov.w	r5, #0
 80036c8:	4622      	mov	r2, r4
 80036ca:	462b      	mov	r3, r5
 80036cc:	1891      	adds	r1, r2, r2
 80036ce:	6139      	str	r1, [r7, #16]
 80036d0:	415b      	adcs	r3, r3
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80036d8:	1912      	adds	r2, r2, r4
 80036da:	eb45 0303 	adc.w	r3, r5, r3
 80036de:	f04f 0000 	mov.w	r0, #0
 80036e2:	f04f 0100 	mov.w	r1, #0
 80036e6:	00d9      	lsls	r1, r3, #3
 80036e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036ec:	00d0      	lsls	r0, r2, #3
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	eb12 0804 	adds.w	r8, r2, r4
 80036f6:	eb43 0905 	adc.w	r9, r3, r5
 80036fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	4618      	mov	r0, r3
 8003700:	f04f 0100 	mov.w	r1, #0
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	008b      	lsls	r3, r1, #2
 800370e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003712:	0082      	lsls	r2, r0, #2
 8003714:	4640      	mov	r0, r8
 8003716:	4649      	mov	r1, r9
 8003718:	f7fc fdba 	bl	8000290 <__aeabi_uldivmod>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4b49      	ldr	r3, [pc, #292]	; (8003848 <UART_SetConfig+0x38c>)
 8003722:	fba3 2302 	umull	r2, r3, r3, r2
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	011e      	lsls	r6, r3, #4
 800372a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800372c:	4618      	mov	r0, r3
 800372e:	f04f 0100 	mov.w	r1, #0
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	1894      	adds	r4, r2, r2
 8003738:	60bc      	str	r4, [r7, #8]
 800373a:	415b      	adcs	r3, r3
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003742:	1812      	adds	r2, r2, r0
 8003744:	eb41 0303 	adc.w	r3, r1, r3
 8003748:	f04f 0400 	mov.w	r4, #0
 800374c:	f04f 0500 	mov.w	r5, #0
 8003750:	00dd      	lsls	r5, r3, #3
 8003752:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003756:	00d4      	lsls	r4, r2, #3
 8003758:	4622      	mov	r2, r4
 800375a:	462b      	mov	r3, r5
 800375c:	1814      	adds	r4, r2, r0
 800375e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003760:	414b      	adcs	r3, r1
 8003762:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	4618      	mov	r0, r3
 800376a:	f04f 0100 	mov.w	r1, #0
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	008b      	lsls	r3, r1, #2
 8003778:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800377c:	0082      	lsls	r2, r0, #2
 800377e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003782:	f7fc fd85 	bl	8000290 <__aeabi_uldivmod>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	4b2f      	ldr	r3, [pc, #188]	; (8003848 <UART_SetConfig+0x38c>)
 800378c:	fba3 1302 	umull	r1, r3, r3, r2
 8003790:	095b      	lsrs	r3, r3, #5
 8003792:	2164      	movs	r1, #100	; 0x64
 8003794:	fb01 f303 	mul.w	r3, r1, r3
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	3332      	adds	r3, #50	; 0x32
 800379e:	4a2a      	ldr	r2, [pc, #168]	; (8003848 <UART_SetConfig+0x38c>)
 80037a0:	fba2 2303 	umull	r2, r3, r2, r3
 80037a4:	095b      	lsrs	r3, r3, #5
 80037a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037aa:	441e      	add	r6, r3
 80037ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ae:	4618      	mov	r0, r3
 80037b0:	f04f 0100 	mov.w	r1, #0
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	1894      	adds	r4, r2, r2
 80037ba:	603c      	str	r4, [r7, #0]
 80037bc:	415b      	adcs	r3, r3
 80037be:	607b      	str	r3, [r7, #4]
 80037c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037c4:	1812      	adds	r2, r2, r0
 80037c6:	eb41 0303 	adc.w	r3, r1, r3
 80037ca:	f04f 0400 	mov.w	r4, #0
 80037ce:	f04f 0500 	mov.w	r5, #0
 80037d2:	00dd      	lsls	r5, r3, #3
 80037d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037d8:	00d4      	lsls	r4, r2, #3
 80037da:	4622      	mov	r2, r4
 80037dc:	462b      	mov	r3, r5
 80037de:	eb12 0a00 	adds.w	sl, r2, r0
 80037e2:	eb43 0b01 	adc.w	fp, r3, r1
 80037e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f04f 0100 	mov.w	r1, #0
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	008b      	lsls	r3, r1, #2
 80037fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80037fe:	0082      	lsls	r2, r0, #2
 8003800:	4650      	mov	r0, sl
 8003802:	4659      	mov	r1, fp
 8003804:	f7fc fd44 	bl	8000290 <__aeabi_uldivmod>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4b0e      	ldr	r3, [pc, #56]	; (8003848 <UART_SetConfig+0x38c>)
 800380e:	fba3 1302 	umull	r1, r3, r3, r2
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	2164      	movs	r1, #100	; 0x64
 8003816:	fb01 f303 	mul.w	r3, r1, r3
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	3332      	adds	r3, #50	; 0x32
 8003820:	4a09      	ldr	r2, [pc, #36]	; (8003848 <UART_SetConfig+0x38c>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	f003 020f 	and.w	r2, r3, #15
 800382c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4432      	add	r2, r6
 8003832:	609a      	str	r2, [r3, #8]
}
 8003834:	bf00      	nop
 8003836:	377c      	adds	r7, #124	; 0x7c
 8003838:	46bd      	mov	sp, r7
 800383a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800383e:	bf00      	nop
 8003840:	40011000 	.word	0x40011000
 8003844:	40011400 	.word	0x40011400
 8003848:	51eb851f 	.word	0x51eb851f

0800384c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800385a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800385e:	2b84      	cmp	r3, #132	; 0x84
 8003860:	d005      	beq.n	800386e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003862:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4413      	add	r3, r2
 800386a:	3303      	adds	r3, #3
 800386c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800386e:	68fb      	ldr	r3, [r7, #12]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003882:	f3ef 8305 	mrs	r3, IPSR
 8003886:	607b      	str	r3, [r7, #4]
  return(result);
 8003888:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800388a:	2b00      	cmp	r3, #0
 800388c:	bf14      	ite	ne
 800388e:	2301      	movne	r3, #1
 8003890:	2300      	moveq	r3, #0
 8003892:	b2db      	uxtb	r3, r3
}
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80038a4:	f001 f954 	bl	8004b50 <vTaskStartScheduler>
  
  return osOK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	bd80      	pop	{r7, pc}

080038ae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80038ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038b0:	b089      	sub	sp, #36	; 0x24
 80038b2:	af04      	add	r7, sp, #16
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d020      	beq.n	8003902 <osThreadCreate+0x54>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d01c      	beq.n	8003902 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685c      	ldr	r4, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681d      	ldr	r5, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691e      	ldr	r6, [r3, #16]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff ffb6 	bl	800384c <makeFreeRtosPriority>
 80038e0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038ea:	9202      	str	r2, [sp, #8]
 80038ec:	9301      	str	r3, [sp, #4]
 80038ee:	9100      	str	r1, [sp, #0]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	4632      	mov	r2, r6
 80038f4:	4629      	mov	r1, r5
 80038f6:	4620      	mov	r0, r4
 80038f8:	f000 ff62 	bl	80047c0 <xTaskCreateStatic>
 80038fc:	4603      	mov	r3, r0
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	e01c      	b.n	800393c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685c      	ldr	r4, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800390e:	b29e      	uxth	r6, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff ff98 	bl	800384c <makeFreeRtosPriority>
 800391c:	4602      	mov	r2, r0
 800391e:	f107 030c 	add.w	r3, r7, #12
 8003922:	9301      	str	r3, [sp, #4]
 8003924:	9200      	str	r2, [sp, #0]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	4632      	mov	r2, r6
 800392a:	4629      	mov	r1, r5
 800392c:	4620      	mov	r0, r4
 800392e:	f000 ffa4 	bl	800487a <xTaskCreate>
 8003932:	4603      	mov	r3, r0
 8003934:	2b01      	cmp	r3, #1
 8003936:	d001      	beq.n	800393c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003938:	2300      	movs	r3, #0
 800393a:	e000      	b.n	800393e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800393c:	68fb      	ldr	r3, [r7, #12]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003948 <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  taskYIELD();
 800394c:	4b06      	ldr	r3, [pc, #24]	; (8003968 <osThreadYield+0x20>)
 800394e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	f3bf 8f6f 	isb	sy
  
  return osOK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000ed04 	.word	0xe000ed04

0800396c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <osDelay+0x16>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	e000      	b.n	8003984 <osDelay+0x18>
 8003982:	2301      	movs	r3, #1
 8003984:	4618      	mov	r0, r3
 8003986:	f001 f8af 	bl	8004ae8 <vTaskDelay>
  
  return osOK;
 800398a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d007      	beq.n	80039b4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	4619      	mov	r1, r3
 80039aa:	2001      	movs	r0, #1
 80039ac:	f000 faad 	bl	8003f0a <xQueueCreateMutexStatic>
 80039b0:	4603      	mov	r3, r0
 80039b2:	e003      	b.n	80039bc <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80039b4:	2001      	movs	r0, #1
 80039b6:	f000 fa90 	bl	8003eda <xQueueCreateMutex>
 80039ba:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <osMutexWait+0x18>
    return osErrorParameter;
 80039d8:	2380      	movs	r3, #128	; 0x80
 80039da:	e03a      	b.n	8003a52 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e6:	d103      	bne.n	80039f0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80039e8:	f04f 33ff 	mov.w	r3, #4294967295
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	e009      	b.n	8003a04 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d006      	beq.n	8003a04 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <osMutexWait+0x40>
      ticks = 1;
 8003a00:	2301      	movs	r3, #1
 8003a02:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003a04:	f7ff ff3a 	bl	800387c <inHandlerMode>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d017      	beq.n	8003a3e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003a0e:	f107 0308 	add.w	r3, r7, #8
 8003a12:	461a      	mov	r2, r3
 8003a14:	2100      	movs	r1, #0
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fd2a 	bl	8004470 <xQueueReceiveFromISR>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d001      	beq.n	8003a26 <osMutexWait+0x62>
      return osErrorOS;
 8003a22:	23ff      	movs	r3, #255	; 0xff
 8003a24:	e015      	b.n	8003a52 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d011      	beq.n	8003a50 <osMutexWait+0x8c>
 8003a2c:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <osMutexWait+0x98>)
 8003a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	e008      	b.n	8003a50 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8003a3e:	68f9      	ldr	r1, [r7, #12]
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 fc09 	bl	8004258 <xQueueSemaphoreTake>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d001      	beq.n	8003a50 <osMutexWait+0x8c>
    return osErrorOS;
 8003a4c:	23ff      	movs	r3, #255	; 0xff
 8003a4e:	e000      	b.n	8003a52 <osMutexWait+0x8e>
  }
  
  return osOK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	e000ed04 	.word	0xe000ed04

08003a60 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003a70:	f7ff ff04 	bl	800387c <inHandlerMode>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d016      	beq.n	8003aa8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003a7a:	f107 0308 	add.w	r3, r7, #8
 8003a7e:	4619      	mov	r1, r3
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 fb5b 	bl	800413c <xQueueGiveFromISR>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d001      	beq.n	8003a90 <osMutexRelease+0x30>
      return osErrorOS;
 8003a8c:	23ff      	movs	r3, #255	; 0xff
 8003a8e:	e017      	b.n	8003ac0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d013      	beq.n	8003abe <osMutexRelease+0x5e>
 8003a96:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <osMutexRelease+0x68>)
 8003a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	e00a      	b.n	8003abe <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2100      	movs	r1, #0
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fa46 	bl	8003f40 <xQueueGenericSend>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d001      	beq.n	8003abe <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8003aba:	23ff      	movs	r3, #255	; 0xff
 8003abc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003abe:	68fb      	ldr	r3, [r7, #12]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	e000ed04 	.word	0xe000ed04

08003acc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f103 0208 	add.w	r2, r3, #8
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f103 0208 	add.w	r2, r3, #8
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f103 0208 	add.w	r2, r3, #8
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b26:	b480      	push	{r7}
 8003b28:	b085      	sub	sp, #20
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	601a      	str	r2, [r3, #0]
}
 8003b62:	bf00      	nop
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b085      	sub	sp, #20
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
 8003b76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b84:	d103      	bne.n	8003b8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	e00c      	b.n	8003ba8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3308      	adds	r3, #8
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	e002      	b.n	8003b9c <vListInsert+0x2e>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d2f6      	bcs.n	8003b96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	601a      	str	r2, [r3, #0]
}
 8003bd4:	bf00      	nop
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6892      	ldr	r2, [r2, #8]
 8003bf6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6852      	ldr	r2, [r2, #4]
 8003c00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d103      	bne.n	8003c14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	1e5a      	subs	r2, r3, #1
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10a      	bne.n	8003c5e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4c:	f383 8811 	msr	BASEPRI, r3
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c5a:	bf00      	nop
 8003c5c:	e7fe      	b.n	8003c5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c5e:	f001 fec1 	bl	80059e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6a:	68f9      	ldr	r1, [r7, #12]
 8003c6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c6e:	fb01 f303 	mul.w	r3, r1, r3
 8003c72:	441a      	add	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	68f9      	ldr	r1, [r7, #12]
 8003c92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c94:	fb01 f303 	mul.w	r3, r1, r3
 8003c98:	441a      	add	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	22ff      	movs	r2, #255	; 0xff
 8003ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	22ff      	movs	r2, #255	; 0xff
 8003caa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d114      	bne.n	8003cde <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d01a      	beq.n	8003cf2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3310      	adds	r3, #16
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f001 f987 	bl	8004fd4 <xTaskRemoveFromEventList>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d012      	beq.n	8003cf2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ccc:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <xQueueGenericReset+0xcc>)
 8003cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	e009      	b.n	8003cf2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	3310      	adds	r3, #16
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff fef2 	bl	8003acc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3324      	adds	r3, #36	; 0x24
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff feed 	bl	8003acc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003cf2:	f001 fea7 	bl	8005a44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003cf6:	2301      	movs	r3, #1
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	e000ed04 	.word	0xe000ed04

08003d04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08e      	sub	sp, #56	; 0x38
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
 8003d10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10a      	bne.n	8003d2e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d2a:	bf00      	nop
 8003d2c:	e7fe      	b.n	8003d2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10a      	bne.n	8003d4a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d46:	bf00      	nop
 8003d48:	e7fe      	b.n	8003d48 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <xQueueGenericCreateStatic+0x52>
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <xQueueGenericCreateStatic+0x56>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e000      	b.n	8003d5c <xQueueGenericCreateStatic+0x58>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10a      	bne.n	8003d76 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	623b      	str	r3, [r7, #32]
}
 8003d72:	bf00      	nop
 8003d74:	e7fe      	b.n	8003d74 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d102      	bne.n	8003d82 <xQueueGenericCreateStatic+0x7e>
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <xQueueGenericCreateStatic+0x82>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <xQueueGenericCreateStatic+0x84>
 8003d86:	2300      	movs	r3, #0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10a      	bne.n	8003da2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d90:	f383 8811 	msr	BASEPRI, r3
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	61fb      	str	r3, [r7, #28]
}
 8003d9e:	bf00      	nop
 8003da0:	e7fe      	b.n	8003da0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003da2:	2348      	movs	r3, #72	; 0x48
 8003da4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b48      	cmp	r3, #72	; 0x48
 8003daa:	d00a      	beq.n	8003dc2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	61bb      	str	r3, [r7, #24]
}
 8003dbe:	bf00      	nop
 8003dc0:	e7fe      	b.n	8003dc0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003dc2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00d      	beq.n	8003dea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003dd6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	4613      	mov	r3, r2
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	68b9      	ldr	r1, [r7, #8]
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f83f 	bl	8003e68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3730      	adds	r7, #48	; 0x30
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08a      	sub	sp, #40	; 0x28
 8003df8:	af02      	add	r7, sp, #8
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10a      	bne.n	8003e1e <xQueueGenericCreate+0x2a>
	__asm volatile
 8003e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	613b      	str	r3, [r7, #16]
}
 8003e1a:	bf00      	nop
 8003e1c:	e7fe      	b.n	8003e1c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	fb02 f303 	mul.w	r3, r2, r3
 8003e26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	3348      	adds	r3, #72	; 0x48
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f001 fefb 	bl	8005c28 <pvPortMalloc>
 8003e32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d011      	beq.n	8003e5e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	3348      	adds	r3, #72	; 0x48
 8003e42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e4c:	79fa      	ldrb	r2, [r7, #7]
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	4613      	mov	r3, r2
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	68b9      	ldr	r1, [r7, #8]
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 f805 	bl	8003e68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e5e:	69bb      	ldr	r3, [r7, #24]
	}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3720      	adds	r7, #32
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d103      	bne.n	8003e84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	e002      	b.n	8003e8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e96:	2101      	movs	r1, #1
 8003e98:	69b8      	ldr	r0, [r7, #24]
 8003e9a:	f7ff fecb 	bl	8003c34 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e9e:	bf00      	nop
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00e      	beq.n	8003ed2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2100      	movs	r1, #0
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f837 	bl	8003f40 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003ed2:	bf00      	nop
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b086      	sub	sp, #24
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	6939      	ldr	r1, [r7, #16]
 8003ef2:	6978      	ldr	r0, [r7, #20]
 8003ef4:	f7ff ff7e 	bl	8003df4 <xQueueGenericCreate>
 8003ef8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f7ff ffd3 	bl	8003ea6 <prvInitialiseMutex>

		return xNewQueue;
 8003f00:	68fb      	ldr	r3, [r7, #12]
	}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b088      	sub	sp, #32
 8003f0e:	af02      	add	r7, sp, #8
 8003f10:	4603      	mov	r3, r0
 8003f12:	6039      	str	r1, [r7, #0]
 8003f14:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003f16:	2301      	movs	r3, #1
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2200      	movs	r2, #0
 8003f26:	6939      	ldr	r1, [r7, #16]
 8003f28:	6978      	ldr	r0, [r7, #20]
 8003f2a:	f7ff feeb 	bl	8003d04 <xQueueGenericCreateStatic>
 8003f2e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f7ff ffb8 	bl	8003ea6 <prvInitialiseMutex>

		return xNewQueue;
 8003f36:	68fb      	ldr	r3, [r7, #12]
	}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08e      	sub	sp, #56	; 0x38
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10a      	bne.n	8003f72 <xQueueGenericSend+0x32>
	__asm volatile
 8003f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f6e:	bf00      	nop
 8003f70:	e7fe      	b.n	8003f70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d103      	bne.n	8003f80 <xQueueGenericSend+0x40>
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <xQueueGenericSend+0x44>
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <xQueueGenericSend+0x46>
 8003f84:	2300      	movs	r3, #0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <xQueueGenericSend+0x60>
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f9c:	bf00      	nop
 8003f9e:	e7fe      	b.n	8003f9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d103      	bne.n	8003fae <xQueueGenericSend+0x6e>
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <xQueueGenericSend+0x72>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <xQueueGenericSend+0x74>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10a      	bne.n	8003fce <xQueueGenericSend+0x8e>
	__asm volatile
 8003fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbc:	f383 8811 	msr	BASEPRI, r3
 8003fc0:	f3bf 8f6f 	isb	sy
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	623b      	str	r3, [r7, #32]
}
 8003fca:	bf00      	nop
 8003fcc:	e7fe      	b.n	8003fcc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fce:	f001 f9bd 	bl	800534c <xTaskGetSchedulerState>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <xQueueGenericSend+0x9e>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <xQueueGenericSend+0xa2>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <xQueueGenericSend+0xa4>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10a      	bne.n	8003ffe <xQueueGenericSend+0xbe>
	__asm volatile
 8003fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fec:	f383 8811 	msr	BASEPRI, r3
 8003ff0:	f3bf 8f6f 	isb	sy
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	61fb      	str	r3, [r7, #28]
}
 8003ffa:	bf00      	nop
 8003ffc:	e7fe      	b.n	8003ffc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ffe:	f001 fcf1 	bl	80059e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400a:	429a      	cmp	r2, r3
 800400c:	d302      	bcc.n	8004014 <xQueueGenericSend+0xd4>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d129      	bne.n	8004068 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	68b9      	ldr	r1, [r7, #8]
 8004018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800401a:	f000 fac1 	bl	80045a0 <prvCopyDataToQueue>
 800401e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	2b00      	cmp	r3, #0
 8004026:	d010      	beq.n	800404a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402a:	3324      	adds	r3, #36	; 0x24
 800402c:	4618      	mov	r0, r3
 800402e:	f000 ffd1 	bl	8004fd4 <xTaskRemoveFromEventList>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d013      	beq.n	8004060 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004038:	4b3f      	ldr	r3, [pc, #252]	; (8004138 <xQueueGenericSend+0x1f8>)
 800403a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	e00a      	b.n	8004060 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800404a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404c:	2b00      	cmp	r3, #0
 800404e:	d007      	beq.n	8004060 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004050:	4b39      	ldr	r3, [pc, #228]	; (8004138 <xQueueGenericSend+0x1f8>)
 8004052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004060:	f001 fcf0 	bl	8005a44 <vPortExitCritical>
				return pdPASS;
 8004064:	2301      	movs	r3, #1
 8004066:	e063      	b.n	8004130 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d103      	bne.n	8004076 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800406e:	f001 fce9 	bl	8005a44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004072:	2300      	movs	r3, #0
 8004074:	e05c      	b.n	8004130 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004078:	2b00      	cmp	r3, #0
 800407a:	d106      	bne.n	800408a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800407c:	f107 0314 	add.w	r3, r7, #20
 8004080:	4618      	mov	r0, r3
 8004082:	f001 f809 	bl	8005098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004086:	2301      	movs	r3, #1
 8004088:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800408a:	f001 fcdb 	bl	8005a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800408e:	f000 fdbf 	bl	8004c10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004092:	f001 fca7 	bl	80059e4 <vPortEnterCritical>
 8004096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800409c:	b25b      	sxtb	r3, r3
 800409e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a2:	d103      	bne.n	80040ac <xQueueGenericSend+0x16c>
 80040a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040b2:	b25b      	sxtb	r3, r3
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d103      	bne.n	80040c2 <xQueueGenericSend+0x182>
 80040ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040c2:	f001 fcbf 	bl	8005a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040c6:	1d3a      	adds	r2, r7, #4
 80040c8:	f107 0314 	add.w	r3, r7, #20
 80040cc:	4611      	mov	r1, r2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fff8 	bl	80050c4 <xTaskCheckForTimeOut>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d124      	bne.n	8004124 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80040da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040dc:	f000 fb58 	bl	8004790 <prvIsQueueFull>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d018      	beq.n	8004118 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	3310      	adds	r3, #16
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	4611      	mov	r1, r2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 ff4c 	bl	8004f8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80040f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040f6:	f000 fae3 	bl	80046c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80040fa:	f000 fd97 	bl	8004c2c <xTaskResumeAll>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	f47f af7c 	bne.w	8003ffe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004106:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <xQueueGenericSend+0x1f8>)
 8004108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	e772      	b.n	8003ffe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800411a:	f000 fad1 	bl	80046c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800411e:	f000 fd85 	bl	8004c2c <xTaskResumeAll>
 8004122:	e76c      	b.n	8003ffe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004126:	f000 facb 	bl	80046c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800412a:	f000 fd7f 	bl	8004c2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800412e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004130:	4618      	mov	r0, r3
 8004132:	3738      	adds	r7, #56	; 0x38
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	e000ed04 	.word	0xe000ed04

0800413c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08e      	sub	sp, #56	; 0x38
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800414a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10a      	bne.n	8004166 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	623b      	str	r3, [r7, #32]
}
 8004162:	bf00      	nop
 8004164:	e7fe      	b.n	8004164 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <xQueueGiveFromISR+0x48>
	__asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	61fb      	str	r3, [r7, #28]
}
 8004180:	bf00      	nop
 8004182:	e7fe      	b.n	8004182 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d103      	bne.n	8004194 <xQueueGiveFromISR+0x58>
 800418c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <xQueueGiveFromISR+0x5c>
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <xQueueGiveFromISR+0x5e>
 8004198:	2300      	movs	r3, #0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10a      	bne.n	80041b4 <xQueueGiveFromISR+0x78>
	__asm volatile
 800419e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	61bb      	str	r3, [r7, #24]
}
 80041b0:	bf00      	nop
 80041b2:	e7fe      	b.n	80041b2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041b4:	f001 fcf8 	bl	8005ba8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80041b8:	f3ef 8211 	mrs	r2, BASEPRI
 80041bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	617a      	str	r2, [r7, #20]
 80041ce:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80041d0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d22b      	bcs.n	800423c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80041fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fe:	d112      	bne.n	8004226 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	2b00      	cmp	r3, #0
 8004206:	d016      	beq.n	8004236 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420a:	3324      	adds	r3, #36	; 0x24
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fee1 	bl	8004fd4 <xTaskRemoveFromEventList>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00e      	beq.n	8004236 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00b      	beq.n	8004236 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2201      	movs	r2, #1
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	e007      	b.n	8004236 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800422a:	3301      	adds	r3, #1
 800422c:	b2db      	uxtb	r3, r3
 800422e:	b25a      	sxtb	r2, r3
 8004230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004236:	2301      	movs	r3, #1
 8004238:	637b      	str	r3, [r7, #52]	; 0x34
 800423a:	e001      	b.n	8004240 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800423c:	2300      	movs	r3, #0
 800423e:	637b      	str	r3, [r7, #52]	; 0x34
 8004240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004242:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800424a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800424c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800424e:	4618      	mov	r0, r3
 8004250:	3738      	adds	r7, #56	; 0x38
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08e      	sub	sp, #56	; 0x38
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004262:	2300      	movs	r3, #0
 8004264:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800426a:	2300      	movs	r3, #0
 800426c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800426e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10a      	bne.n	800428a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	623b      	str	r3, [r7, #32]
}
 8004286:	bf00      	nop
 8004288:	e7fe      	b.n	8004288 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800428a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	61fb      	str	r3, [r7, #28]
}
 80042a4:	bf00      	nop
 80042a6:	e7fe      	b.n	80042a6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042a8:	f001 f850 	bl	800534c <xTaskGetSchedulerState>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d102      	bne.n	80042b8 <xQueueSemaphoreTake+0x60>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <xQueueSemaphoreTake+0x64>
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <xQueueSemaphoreTake+0x66>
 80042bc:	2300      	movs	r3, #0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	61bb      	str	r3, [r7, #24]
}
 80042d4:	bf00      	nop
 80042d6:	e7fe      	b.n	80042d6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042d8:	f001 fb84 	bl	80059e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80042dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d024      	beq.n	8004332 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80042e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ea:	1e5a      	subs	r2, r3, #1
 80042ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d104      	bne.n	8004302 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80042f8:	f001 f9d0 	bl	800569c <pvTaskIncrementMutexHeldCount>
 80042fc:	4602      	mov	r2, r0
 80042fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004300:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00f      	beq.n	800432a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800430a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430c:	3310      	adds	r3, #16
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fe60 	bl	8004fd4 <xTaskRemoveFromEventList>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d007      	beq.n	800432a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800431a:	4b54      	ldr	r3, [pc, #336]	; (800446c <xQueueSemaphoreTake+0x214>)
 800431c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800432a:	f001 fb8b 	bl	8005a44 <vPortExitCritical>
				return pdPASS;
 800432e:	2301      	movs	r3, #1
 8004330:	e097      	b.n	8004462 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d111      	bne.n	800435c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	617b      	str	r3, [r7, #20]
}
 8004350:	bf00      	nop
 8004352:	e7fe      	b.n	8004352 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004354:	f001 fb76 	bl	8005a44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004358:	2300      	movs	r3, #0
 800435a:	e082      	b.n	8004462 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800435c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004362:	f107 030c 	add.w	r3, r7, #12
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fe96 	bl	8005098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800436c:	2301      	movs	r3, #1
 800436e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004370:	f001 fb68 	bl	8005a44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004374:	f000 fc4c 	bl	8004c10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004378:	f001 fb34 	bl	80059e4 <vPortEnterCritical>
 800437c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004382:	b25b      	sxtb	r3, r3
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004388:	d103      	bne.n	8004392 <xQueueSemaphoreTake+0x13a>
 800438a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004398:	b25b      	sxtb	r3, r3
 800439a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439e:	d103      	bne.n	80043a8 <xQueueSemaphoreTake+0x150>
 80043a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043a8:	f001 fb4c 	bl	8005a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043ac:	463a      	mov	r2, r7
 80043ae:	f107 030c 	add.w	r3, r7, #12
 80043b2:	4611      	mov	r1, r2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fe85 	bl	80050c4 <xTaskCheckForTimeOut>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d132      	bne.n	8004426 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043c2:	f000 f9cf 	bl	8004764 <prvIsQueueEmpty>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d026      	beq.n	800441a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d109      	bne.n	80043e8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80043d4:	f001 fb06 	bl	80059e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80043d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 ffd3 	bl	8005388 <xTaskPriorityInherit>
 80043e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80043e4:	f001 fb2e 	bl	8005a44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ea:	3324      	adds	r3, #36	; 0x24
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	4611      	mov	r1, r2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fdcb 	bl	8004f8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043f8:	f000 f962 	bl	80046c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043fc:	f000 fc16 	bl	8004c2c <xTaskResumeAll>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	f47f af68 	bne.w	80042d8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004408:	4b18      	ldr	r3, [pc, #96]	; (800446c <xQueueSemaphoreTake+0x214>)
 800440a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	e75e      	b.n	80042d8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800441a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800441c:	f000 f950 	bl	80046c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004420:	f000 fc04 	bl	8004c2c <xTaskResumeAll>
 8004424:	e758      	b.n	80042d8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004426:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004428:	f000 f94a 	bl	80046c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800442c:	f000 fbfe 	bl	8004c2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004430:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004432:	f000 f997 	bl	8004764 <prvIsQueueEmpty>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	f43f af4d 	beq.w	80042d8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00d      	beq.n	8004460 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004444:	f001 face 	bl	80059e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004448:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800444a:	f000 f891 	bl	8004570 <prvGetDisinheritPriorityAfterTimeout>
 800444e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004456:	4618      	mov	r0, r3
 8004458:	f001 f892 	bl	8005580 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800445c:	f001 faf2 	bl	8005a44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004460:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004462:	4618      	mov	r0, r3
 8004464:	3738      	adds	r7, #56	; 0x38
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	e000ed04 	.word	0xe000ed04

08004470 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b08e      	sub	sp, #56	; 0x38
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10a      	bne.n	800449c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	623b      	str	r3, [r7, #32]
}
 8004498:	bf00      	nop
 800449a:	e7fe      	b.n	800449a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d103      	bne.n	80044aa <xQueueReceiveFromISR+0x3a>
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <xQueueReceiveFromISR+0x3e>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <xQueueReceiveFromISR+0x40>
 80044ae:	2300      	movs	r3, #0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	61fb      	str	r3, [r7, #28]
}
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044ca:	f001 fb6d 	bl	8005ba8 <vPortValidateInterruptPriority>
	__asm volatile
 80044ce:	f3ef 8211 	mrs	r2, BASEPRI
 80044d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	61ba      	str	r2, [r7, #24]
 80044e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80044e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d02f      	beq.n	8004556 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80044f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004500:	68b9      	ldr	r1, [r7, #8]
 8004502:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004504:	f000 f8b6 	bl	8004674 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	1e5a      	subs	r2, r3, #1
 800450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004510:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004518:	d112      	bne.n	8004540 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800451a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d016      	beq.n	8004550 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	3310      	adds	r3, #16
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fd54 	bl	8004fd4 <xTaskRemoveFromEventList>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00e      	beq.n	8004550 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00b      	beq.n	8004550 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	e007      	b.n	8004550 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004544:	3301      	adds	r3, #1
 8004546:	b2db      	uxtb	r3, r3
 8004548:	b25a      	sxtb	r2, r3
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004550:	2301      	movs	r3, #1
 8004552:	637b      	str	r3, [r7, #52]	; 0x34
 8004554:	e001      	b.n	800455a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004556:	2300      	movs	r3, #0
 8004558:	637b      	str	r3, [r7, #52]	; 0x34
 800455a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f383 8811 	msr	BASEPRI, r3
}
 8004564:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004568:	4618      	mov	r0, r3
 800456a:	3738      	adds	r7, #56	; 0x38
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	2b00      	cmp	r3, #0
 800457e:	d006      	beq.n	800458e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f1c3 0307 	rsb	r3, r3, #7
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	e001      	b.n	8004592 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004592:	68fb      	ldr	r3, [r7, #12]
	}
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80045ac:	2300      	movs	r3, #0
 80045ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10d      	bne.n	80045da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d14d      	bne.n	8004662 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 ff52 	bl	8005474 <xTaskPriorityDisinherit>
 80045d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	609a      	str	r2, [r3, #8]
 80045d8:	e043      	b.n	8004662 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d119      	bne.n	8004614 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6858      	ldr	r0, [r3, #4]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	461a      	mov	r2, r3
 80045ea:	68b9      	ldr	r1, [r7, #8]
 80045ec:	f001 fd30 	bl	8006050 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	441a      	add	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	429a      	cmp	r2, r3
 8004608:	d32b      	bcc.n	8004662 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	605a      	str	r2, [r3, #4]
 8004612:	e026      	b.n	8004662 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	68d8      	ldr	r0, [r3, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	461a      	mov	r2, r3
 800461e:	68b9      	ldr	r1, [r7, #8]
 8004620:	f001 fd16 	bl	8006050 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	425b      	negs	r3, r3
 800462e:	441a      	add	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d207      	bcs.n	8004650 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	425b      	negs	r3, r3
 800464a:	441a      	add	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d105      	bne.n	8004662 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	3b01      	subs	r3, #1
 8004660:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800466a:	697b      	ldr	r3, [r7, #20]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3718      	adds	r7, #24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	2b00      	cmp	r3, #0
 8004684:	d018      	beq.n	80046b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	441a      	add	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	429a      	cmp	r2, r3
 800469e:	d303      	bcc.n	80046a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68d9      	ldr	r1, [r3, #12]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	461a      	mov	r2, r3
 80046b2:	6838      	ldr	r0, [r7, #0]
 80046b4:	f001 fccc 	bl	8006050 <memcpy>
	}
}
 80046b8:	bf00      	nop
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80046c8:	f001 f98c 	bl	80059e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046d4:	e011      	b.n	80046fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d012      	beq.n	8004704 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3324      	adds	r3, #36	; 0x24
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fc76 	bl	8004fd4 <xTaskRemoveFromEventList>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80046ee:	f000 fd4b 	bl	8005188 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	dce9      	bgt.n	80046d6 <prvUnlockQueue+0x16>
 8004702:	e000      	b.n	8004706 <prvUnlockQueue+0x46>
					break;
 8004704:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	22ff      	movs	r2, #255	; 0xff
 800470a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800470e:	f001 f999 	bl	8005a44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004712:	f001 f967 	bl	80059e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800471c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800471e:	e011      	b.n	8004744 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d012      	beq.n	800474e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3310      	adds	r3, #16
 800472c:	4618      	mov	r0, r3
 800472e:	f000 fc51 	bl	8004fd4 <xTaskRemoveFromEventList>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004738:	f000 fd26 	bl	8005188 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800473c:	7bbb      	ldrb	r3, [r7, #14]
 800473e:	3b01      	subs	r3, #1
 8004740:	b2db      	uxtb	r3, r3
 8004742:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004744:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004748:	2b00      	cmp	r3, #0
 800474a:	dce9      	bgt.n	8004720 <prvUnlockQueue+0x60>
 800474c:	e000      	b.n	8004750 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800474e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	22ff      	movs	r2, #255	; 0xff
 8004754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004758:	f001 f974 	bl	8005a44 <vPortExitCritical>
}
 800475c:	bf00      	nop
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800476c:	f001 f93a 	bl	80059e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004774:	2b00      	cmp	r3, #0
 8004776:	d102      	bne.n	800477e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004778:	2301      	movs	r3, #1
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	e001      	b.n	8004782 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004782:	f001 f95f 	bl	8005a44 <vPortExitCritical>

	return xReturn;
 8004786:	68fb      	ldr	r3, [r7, #12]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004798:	f001 f924 	bl	80059e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d102      	bne.n	80047ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80047a8:	2301      	movs	r3, #1
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	e001      	b.n	80047b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047b2:	f001 f947 	bl	8005a44 <vPortExitCritical>

	return xReturn;
 80047b6:	68fb      	ldr	r3, [r7, #12]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08e      	sub	sp, #56	; 0x38
 80047c4:	af04      	add	r7, sp, #16
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80047ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10a      	bne.n	80047ea <xTaskCreateStatic+0x2a>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	623b      	str	r3, [r7, #32]
}
 80047e6:	bf00      	nop
 80047e8:	e7fe      	b.n	80047e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80047ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <xTaskCreateStatic+0x46>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	61fb      	str	r3, [r7, #28]
}
 8004802:	bf00      	nop
 8004804:	e7fe      	b.n	8004804 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004806:	2354      	movs	r3, #84	; 0x54
 8004808:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b54      	cmp	r3, #84	; 0x54
 800480e:	d00a      	beq.n	8004826 <xTaskCreateStatic+0x66>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	61bb      	str	r3, [r7, #24]
}
 8004822:	bf00      	nop
 8004824:	e7fe      	b.n	8004824 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004826:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482a:	2b00      	cmp	r3, #0
 800482c:	d01e      	beq.n	800486c <xTaskCreateStatic+0xac>
 800482e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01b      	beq.n	800486c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800483c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	2202      	movs	r2, #2
 8004842:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004846:	2300      	movs	r3, #0
 8004848:	9303      	str	r3, [sp, #12]
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	9302      	str	r3, [sp, #8]
 800484e:	f107 0314 	add.w	r3, r7, #20
 8004852:	9301      	str	r3, [sp, #4]
 8004854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	68b9      	ldr	r1, [r7, #8]
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 f850 	bl	8004904 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004864:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004866:	f000 f8d5 	bl	8004a14 <prvAddNewTaskToReadyList>
 800486a:	e001      	b.n	8004870 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004870:	697b      	ldr	r3, [r7, #20]
	}
 8004872:	4618      	mov	r0, r3
 8004874:	3728      	adds	r7, #40	; 0x28
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800487a:	b580      	push	{r7, lr}
 800487c:	b08c      	sub	sp, #48	; 0x30
 800487e:	af04      	add	r7, sp, #16
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	603b      	str	r3, [r7, #0]
 8004886:	4613      	mov	r3, r2
 8004888:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800488a:	88fb      	ldrh	r3, [r7, #6]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4618      	mov	r0, r3
 8004890:	f001 f9ca 	bl	8005c28 <pvPortMalloc>
 8004894:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00e      	beq.n	80048ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800489c:	2054      	movs	r0, #84	; 0x54
 800489e:	f001 f9c3 	bl	8005c28 <pvPortMalloc>
 80048a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	631a      	str	r2, [r3, #48]	; 0x30
 80048b0:	e005      	b.n	80048be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80048b2:	6978      	ldr	r0, [r7, #20]
 80048b4:	f001 fa84 	bl	8005dc0 <vPortFree>
 80048b8:	e001      	b.n	80048be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048ba:	2300      	movs	r3, #0
 80048bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d017      	beq.n	80048f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048cc:	88fa      	ldrh	r2, [r7, #6]
 80048ce:	2300      	movs	r3, #0
 80048d0:	9303      	str	r3, [sp, #12]
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	9302      	str	r3, [sp, #8]
 80048d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d8:	9301      	str	r3, [sp, #4]
 80048da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68b9      	ldr	r1, [r7, #8]
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f80e 	bl	8004904 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048e8:	69f8      	ldr	r0, [r7, #28]
 80048ea:	f000 f893 	bl	8004a14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048ee:	2301      	movs	r3, #1
 80048f0:	61bb      	str	r3, [r7, #24]
 80048f2:	e002      	b.n	80048fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048f4:	f04f 33ff 	mov.w	r3, #4294967295
 80048f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048fa:	69bb      	ldr	r3, [r7, #24]
	}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3720      	adds	r7, #32
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800491c:	3b01      	subs	r3, #1
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	f023 0307 	bic.w	r3, r3, #7
 800492a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <prvInitialiseNewTask+0x48>
	__asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	617b      	str	r3, [r7, #20]
}
 8004948:	bf00      	nop
 800494a:	e7fe      	b.n	800494a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d01f      	beq.n	8004992 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004952:	2300      	movs	r3, #0
 8004954:	61fb      	str	r3, [r7, #28]
 8004956:	e012      	b.n	800497e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	4413      	add	r3, r2
 800495e:	7819      	ldrb	r1, [r3, #0]
 8004960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	4413      	add	r3, r2
 8004966:	3334      	adds	r3, #52	; 0x34
 8004968:	460a      	mov	r2, r1
 800496a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	4413      	add	r3, r2
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d006      	beq.n	8004986 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	3301      	adds	r3, #1
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	2b0f      	cmp	r3, #15
 8004982:	d9e9      	bls.n	8004958 <prvInitialiseNewTask+0x54>
 8004984:	e000      	b.n	8004988 <prvInitialiseNewTask+0x84>
			{
				break;
 8004986:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004990:	e003      	b.n	800499a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	2b06      	cmp	r3, #6
 800499e:	d901      	bls.n	80049a4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049a0:	2306      	movs	r3, #6
 80049a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80049b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b2:	2200      	movs	r2, #0
 80049b4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b8:	3304      	adds	r3, #4
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff f8a6 	bl	8003b0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c2:	3318      	adds	r3, #24
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff f8a1 	bl	8003b0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	f1c3 0207 	rsb	r2, r3, #7
 80049d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e2:	2200      	movs	r2, #0
 80049e4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	68f9      	ldr	r1, [r7, #12]
 80049f2:	69b8      	ldr	r0, [r7, #24]
 80049f4:	f000 fecc 	bl	8005790 <pxPortInitialiseStack>
 80049f8:	4602      	mov	r2, r0
 80049fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80049fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a0a:	bf00      	nop
 8004a0c:	3720      	adds	r7, #32
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a1c:	f000 ffe2 	bl	80059e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a20:	4b2a      	ldr	r3, [pc, #168]	; (8004acc <prvAddNewTaskToReadyList+0xb8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3301      	adds	r3, #1
 8004a26:	4a29      	ldr	r2, [pc, #164]	; (8004acc <prvAddNewTaskToReadyList+0xb8>)
 8004a28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a2a:	4b29      	ldr	r3, [pc, #164]	; (8004ad0 <prvAddNewTaskToReadyList+0xbc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d109      	bne.n	8004a46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a32:	4a27      	ldr	r2, [pc, #156]	; (8004ad0 <prvAddNewTaskToReadyList+0xbc>)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a38:	4b24      	ldr	r3, [pc, #144]	; (8004acc <prvAddNewTaskToReadyList+0xb8>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d110      	bne.n	8004a62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a40:	f000 fbc6 	bl	80051d0 <prvInitialiseTaskLists>
 8004a44:	e00d      	b.n	8004a62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a46:	4b23      	ldr	r3, [pc, #140]	; (8004ad4 <prvAddNewTaskToReadyList+0xc0>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d109      	bne.n	8004a62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a4e:	4b20      	ldr	r3, [pc, #128]	; (8004ad0 <prvAddNewTaskToReadyList+0xbc>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d802      	bhi.n	8004a62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a5c:	4a1c      	ldr	r2, [pc, #112]	; (8004ad0 <prvAddNewTaskToReadyList+0xbc>)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a62:	4b1d      	ldr	r3, [pc, #116]	; (8004ad8 <prvAddNewTaskToReadyList+0xc4>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3301      	adds	r3, #1
 8004a68:	4a1b      	ldr	r2, [pc, #108]	; (8004ad8 <prvAddNewTaskToReadyList+0xc4>)
 8004a6a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	2201      	movs	r2, #1
 8004a72:	409a      	lsls	r2, r3
 8004a74:	4b19      	ldr	r3, [pc, #100]	; (8004adc <prvAddNewTaskToReadyList+0xc8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	4a18      	ldr	r2, [pc, #96]	; (8004adc <prvAddNewTaskToReadyList+0xc8>)
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a82:	4613      	mov	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4a15      	ldr	r2, [pc, #84]	; (8004ae0 <prvAddNewTaskToReadyList+0xcc>)
 8004a8c:	441a      	add	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3304      	adds	r3, #4
 8004a92:	4619      	mov	r1, r3
 8004a94:	4610      	mov	r0, r2
 8004a96:	f7ff f846 	bl	8003b26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a9a:	f000 ffd3 	bl	8005a44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ad4 <prvAddNewTaskToReadyList+0xc0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00e      	beq.n	8004ac4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004aa6:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <prvAddNewTaskToReadyList+0xbc>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d207      	bcs.n	8004ac4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <prvAddNewTaskToReadyList+0xd0>)
 8004ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ac4:	bf00      	nop
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	200003f8 	.word	0x200003f8
 8004ad0:	200002f8 	.word	0x200002f8
 8004ad4:	20000404 	.word	0x20000404
 8004ad8:	20000414 	.word	0x20000414
 8004adc:	20000400 	.word	0x20000400
 8004ae0:	200002fc 	.word	0x200002fc
 8004ae4:	e000ed04 	.word	0xe000ed04

08004ae8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d017      	beq.n	8004b2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004afa:	4b13      	ldr	r3, [pc, #76]	; (8004b48 <vTaskDelay+0x60>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00a      	beq.n	8004b18 <vTaskDelay+0x30>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	60bb      	str	r3, [r7, #8]
}
 8004b14:	bf00      	nop
 8004b16:	e7fe      	b.n	8004b16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b18:	f000 f87a 	bl	8004c10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fdd0 	bl	80056c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b24:	f000 f882 	bl	8004c2c <xTaskResumeAll>
 8004b28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d107      	bne.n	8004b40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004b30:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <vTaskDelay+0x64>)
 8004b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b40:	bf00      	nop
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	20000420 	.word	0x20000420
 8004b4c:	e000ed04 	.word	0xe000ed04

08004b50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08a      	sub	sp, #40	; 0x28
 8004b54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b5e:	463a      	mov	r2, r7
 8004b60:	1d39      	adds	r1, r7, #4
 8004b62:	f107 0308 	add.w	r3, r7, #8
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fb fd0e 	bl	8000588 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b6c:	6839      	ldr	r1, [r7, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	9202      	str	r2, [sp, #8]
 8004b74:	9301      	str	r3, [sp, #4]
 8004b76:	2300      	movs	r3, #0
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	460a      	mov	r2, r1
 8004b7e:	491e      	ldr	r1, [pc, #120]	; (8004bf8 <vTaskStartScheduler+0xa8>)
 8004b80:	481e      	ldr	r0, [pc, #120]	; (8004bfc <vTaskStartScheduler+0xac>)
 8004b82:	f7ff fe1d 	bl	80047c0 <xTaskCreateStatic>
 8004b86:	4603      	mov	r3, r0
 8004b88:	4a1d      	ldr	r2, [pc, #116]	; (8004c00 <vTaskStartScheduler+0xb0>)
 8004b8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b8c:	4b1c      	ldr	r3, [pc, #112]	; (8004c00 <vTaskStartScheduler+0xb0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b94:	2301      	movs	r3, #1
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	e001      	b.n	8004b9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d116      	bne.n	8004bd2 <vTaskStartScheduler+0x82>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	613b      	str	r3, [r7, #16]
}
 8004bb6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004bb8:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <vTaskStartScheduler+0xb4>)
 8004bba:	f04f 32ff 	mov.w	r2, #4294967295
 8004bbe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004bc0:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <vTaskStartScheduler+0xb8>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004bc6:	4b11      	ldr	r3, [pc, #68]	; (8004c0c <vTaskStartScheduler+0xbc>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004bcc:	f000 fe68 	bl	80058a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004bd0:	e00e      	b.n	8004bf0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd8:	d10a      	bne.n	8004bf0 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	60fb      	str	r3, [r7, #12]
}
 8004bec:	bf00      	nop
 8004bee:	e7fe      	b.n	8004bee <vTaskStartScheduler+0x9e>
}
 8004bf0:	bf00      	nop
 8004bf2:	3718      	adds	r7, #24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	080069ac 	.word	0x080069ac
 8004bfc:	080051a1 	.word	0x080051a1
 8004c00:	2000041c 	.word	0x2000041c
 8004c04:	20000418 	.word	0x20000418
 8004c08:	20000404 	.word	0x20000404
 8004c0c:	200003fc 	.word	0x200003fc

08004c10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c14:	4b04      	ldr	r3, [pc, #16]	; (8004c28 <vTaskSuspendAll+0x18>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	4a03      	ldr	r2, [pc, #12]	; (8004c28 <vTaskSuspendAll+0x18>)
 8004c1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c1e:	bf00      	nop
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	20000420 	.word	0x20000420

08004c2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c3a:	4b41      	ldr	r3, [pc, #260]	; (8004d40 <xTaskResumeAll+0x114>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10a      	bne.n	8004c58 <xTaskResumeAll+0x2c>
	__asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	603b      	str	r3, [r7, #0]
}
 8004c54:	bf00      	nop
 8004c56:	e7fe      	b.n	8004c56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c58:	f000 fec4 	bl	80059e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c5c:	4b38      	ldr	r3, [pc, #224]	; (8004d40 <xTaskResumeAll+0x114>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	4a37      	ldr	r2, [pc, #220]	; (8004d40 <xTaskResumeAll+0x114>)
 8004c64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c66:	4b36      	ldr	r3, [pc, #216]	; (8004d40 <xTaskResumeAll+0x114>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d161      	bne.n	8004d32 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c6e:	4b35      	ldr	r3, [pc, #212]	; (8004d44 <xTaskResumeAll+0x118>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d05d      	beq.n	8004d32 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c76:	e02e      	b.n	8004cd6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c78:	4b33      	ldr	r3, [pc, #204]	; (8004d48 <xTaskResumeAll+0x11c>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	3318      	adds	r3, #24
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fe ffab 	bl	8003be0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fe ffa6 	bl	8003be0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c98:	2201      	movs	r2, #1
 8004c9a:	409a      	lsls	r2, r3
 8004c9c:	4b2b      	ldr	r3, [pc, #172]	; (8004d4c <xTaskResumeAll+0x120>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	4a2a      	ldr	r2, [pc, #168]	; (8004d4c <xTaskResumeAll+0x120>)
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004caa:	4613      	mov	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4a27      	ldr	r2, [pc, #156]	; (8004d50 <xTaskResumeAll+0x124>)
 8004cb4:	441a      	add	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	f7fe ff32 	bl	8003b26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc6:	4b23      	ldr	r3, [pc, #140]	; (8004d54 <xTaskResumeAll+0x128>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d302      	bcc.n	8004cd6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004cd0:	4b21      	ldr	r3, [pc, #132]	; (8004d58 <xTaskResumeAll+0x12c>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cd6:	4b1c      	ldr	r3, [pc, #112]	; (8004d48 <xTaskResumeAll+0x11c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1cc      	bne.n	8004c78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ce4:	f000 fb12 	bl	800530c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ce8:	4b1c      	ldr	r3, [pc, #112]	; (8004d5c <xTaskResumeAll+0x130>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d010      	beq.n	8004d16 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004cf4:	f000 f836 	bl	8004d64 <xTaskIncrementTick>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004cfe:	4b16      	ldr	r3, [pc, #88]	; (8004d58 <xTaskResumeAll+0x12c>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1f1      	bne.n	8004cf4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004d10:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <xTaskResumeAll+0x130>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d16:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <xTaskResumeAll+0x12c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d009      	beq.n	8004d32 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d22:	4b0f      	ldr	r3, [pc, #60]	; (8004d60 <xTaskResumeAll+0x134>)
 8004d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d32:	f000 fe87 	bl	8005a44 <vPortExitCritical>

	return xAlreadyYielded;
 8004d36:	68bb      	ldr	r3, [r7, #8]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	20000420 	.word	0x20000420
 8004d44:	200003f8 	.word	0x200003f8
 8004d48:	200003b8 	.word	0x200003b8
 8004d4c:	20000400 	.word	0x20000400
 8004d50:	200002fc 	.word	0x200002fc
 8004d54:	200002f8 	.word	0x200002f8
 8004d58:	2000040c 	.word	0x2000040c
 8004d5c:	20000408 	.word	0x20000408
 8004d60:	e000ed04 	.word	0xe000ed04

08004d64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d6e:	4b4e      	ldr	r3, [pc, #312]	; (8004ea8 <xTaskIncrementTick+0x144>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f040 808e 	bne.w	8004e94 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d78:	4b4c      	ldr	r3, [pc, #304]	; (8004eac <xTaskIncrementTick+0x148>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d80:	4a4a      	ldr	r2, [pc, #296]	; (8004eac <xTaskIncrementTick+0x148>)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d120      	bne.n	8004dce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d8c:	4b48      	ldr	r3, [pc, #288]	; (8004eb0 <xTaskIncrementTick+0x14c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <xTaskIncrementTick+0x48>
	__asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	603b      	str	r3, [r7, #0]
}
 8004da8:	bf00      	nop
 8004daa:	e7fe      	b.n	8004daa <xTaskIncrementTick+0x46>
 8004dac:	4b40      	ldr	r3, [pc, #256]	; (8004eb0 <xTaskIncrementTick+0x14c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	4b40      	ldr	r3, [pc, #256]	; (8004eb4 <xTaskIncrementTick+0x150>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a3e      	ldr	r2, [pc, #248]	; (8004eb0 <xTaskIncrementTick+0x14c>)
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	4a3e      	ldr	r2, [pc, #248]	; (8004eb4 <xTaskIncrementTick+0x150>)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6013      	str	r3, [r2, #0]
 8004dc0:	4b3d      	ldr	r3, [pc, #244]	; (8004eb8 <xTaskIncrementTick+0x154>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	4a3c      	ldr	r2, [pc, #240]	; (8004eb8 <xTaskIncrementTick+0x154>)
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	f000 fa9f 	bl	800530c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004dce:	4b3b      	ldr	r3, [pc, #236]	; (8004ebc <xTaskIncrementTick+0x158>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d348      	bcc.n	8004e6a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dd8:	4b35      	ldr	r3, [pc, #212]	; (8004eb0 <xTaskIncrementTick+0x14c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d104      	bne.n	8004dec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004de2:	4b36      	ldr	r3, [pc, #216]	; (8004ebc <xTaskIncrementTick+0x158>)
 8004de4:	f04f 32ff 	mov.w	r2, #4294967295
 8004de8:	601a      	str	r2, [r3, #0]
					break;
 8004dea:	e03e      	b.n	8004e6a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dec:	4b30      	ldr	r3, [pc, #192]	; (8004eb0 <xTaskIncrementTick+0x14c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d203      	bcs.n	8004e0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e04:	4a2d      	ldr	r2, [pc, #180]	; (8004ebc <xTaskIncrementTick+0x158>)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e0a:	e02e      	b.n	8004e6a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fe fee5 	bl	8003be0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d004      	beq.n	8004e28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	3318      	adds	r3, #24
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fe fedc 	bl	8003be0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	409a      	lsls	r2, r3
 8004e30:	4b23      	ldr	r3, [pc, #140]	; (8004ec0 <xTaskIncrementTick+0x15c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	4a22      	ldr	r2, [pc, #136]	; (8004ec0 <xTaskIncrementTick+0x15c>)
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4a1f      	ldr	r2, [pc, #124]	; (8004ec4 <xTaskIncrementTick+0x160>)
 8004e48:	441a      	add	r2, r3
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4610      	mov	r0, r2
 8004e52:	f7fe fe68 	bl	8003b26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5a:	4b1b      	ldr	r3, [pc, #108]	; (8004ec8 <xTaskIncrementTick+0x164>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d3b9      	bcc.n	8004dd8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004e64:	2301      	movs	r3, #1
 8004e66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e68:	e7b6      	b.n	8004dd8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e6a:	4b17      	ldr	r3, [pc, #92]	; (8004ec8 <xTaskIncrementTick+0x164>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e70:	4914      	ldr	r1, [pc, #80]	; (8004ec4 <xTaskIncrementTick+0x160>)
 8004e72:	4613      	mov	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	440b      	add	r3, r1
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d901      	bls.n	8004e86 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004e82:	2301      	movs	r3, #1
 8004e84:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e86:	4b11      	ldr	r3, [pc, #68]	; (8004ecc <xTaskIncrementTick+0x168>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	e004      	b.n	8004e9e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e94:	4b0e      	ldr	r3, [pc, #56]	; (8004ed0 <xTaskIncrementTick+0x16c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	4a0d      	ldr	r2, [pc, #52]	; (8004ed0 <xTaskIncrementTick+0x16c>)
 8004e9c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e9e:	697b      	ldr	r3, [r7, #20]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	20000420 	.word	0x20000420
 8004eac:	200003fc 	.word	0x200003fc
 8004eb0:	200003b0 	.word	0x200003b0
 8004eb4:	200003b4 	.word	0x200003b4
 8004eb8:	20000410 	.word	0x20000410
 8004ebc:	20000418 	.word	0x20000418
 8004ec0:	20000400 	.word	0x20000400
 8004ec4:	200002fc 	.word	0x200002fc
 8004ec8:	200002f8 	.word	0x200002f8
 8004ecc:	2000040c 	.word	0x2000040c
 8004ed0:	20000408 	.word	0x20000408

08004ed4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004eda:	4b27      	ldr	r3, [pc, #156]	; (8004f78 <vTaskSwitchContext+0xa4>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ee2:	4b26      	ldr	r3, [pc, #152]	; (8004f7c <vTaskSwitchContext+0xa8>)
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ee8:	e03f      	b.n	8004f6a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004eea:	4b24      	ldr	r3, [pc, #144]	; (8004f7c <vTaskSwitchContext+0xa8>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ef0:	4b23      	ldr	r3, [pc, #140]	; (8004f80 <vTaskSwitchContext+0xac>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	fab3 f383 	clz	r3, r3
 8004efc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004efe:	7afb      	ldrb	r3, [r7, #11]
 8004f00:	f1c3 031f 	rsb	r3, r3, #31
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	491f      	ldr	r1, [pc, #124]	; (8004f84 <vTaskSwitchContext+0xb0>)
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10a      	bne.n	8004f30 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	607b      	str	r3, [r7, #4]
}
 8004f2c:	bf00      	nop
 8004f2e:	e7fe      	b.n	8004f2e <vTaskSwitchContext+0x5a>
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	4613      	mov	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4a12      	ldr	r2, [pc, #72]	; (8004f84 <vTaskSwitchContext+0xb0>)
 8004f3c:	4413      	add	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	605a      	str	r2, [r3, #4]
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	3308      	adds	r3, #8
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d104      	bne.n	8004f60 <vTaskSwitchContext+0x8c>
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	605a      	str	r2, [r3, #4]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	4a08      	ldr	r2, [pc, #32]	; (8004f88 <vTaskSwitchContext+0xb4>)
 8004f68:	6013      	str	r3, [r2, #0]
}
 8004f6a:	bf00      	nop
 8004f6c:	371c      	adds	r7, #28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	20000420 	.word	0x20000420
 8004f7c:	2000040c 	.word	0x2000040c
 8004f80:	20000400 	.word	0x20000400
 8004f84:	200002fc 	.word	0x200002fc
 8004f88:	200002f8 	.word	0x200002f8

08004f8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	60fb      	str	r3, [r7, #12]
}
 8004fae:	bf00      	nop
 8004fb0:	e7fe      	b.n	8004fb0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fb2:	4b07      	ldr	r3, [pc, #28]	; (8004fd0 <vTaskPlaceOnEventList+0x44>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3318      	adds	r3, #24
 8004fb8:	4619      	mov	r1, r3
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7fe fdd7 	bl	8003b6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	6838      	ldr	r0, [r7, #0]
 8004fc4:	f000 fb7e 	bl	80056c4 <prvAddCurrentTaskToDelayedList>
}
 8004fc8:	bf00      	nop
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	200002f8 	.word	0x200002f8

08004fd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10a      	bne.n	8005000 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	60fb      	str	r3, [r7, #12]
}
 8004ffc:	bf00      	nop
 8004ffe:	e7fe      	b.n	8004ffe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	3318      	adds	r3, #24
 8005004:	4618      	mov	r0, r3
 8005006:	f7fe fdeb 	bl	8003be0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800500a:	4b1d      	ldr	r3, [pc, #116]	; (8005080 <xTaskRemoveFromEventList+0xac>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d11c      	bne.n	800504c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	3304      	adds	r3, #4
 8005016:	4618      	mov	r0, r3
 8005018:	f7fe fde2 	bl	8003be0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	2201      	movs	r2, #1
 8005022:	409a      	lsls	r2, r3
 8005024:	4b17      	ldr	r3, [pc, #92]	; (8005084 <xTaskRemoveFromEventList+0xb0>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4313      	orrs	r3, r2
 800502a:	4a16      	ldr	r2, [pc, #88]	; (8005084 <xTaskRemoveFromEventList+0xb0>)
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005032:	4613      	mov	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4a13      	ldr	r2, [pc, #76]	; (8005088 <xTaskRemoveFromEventList+0xb4>)
 800503c:	441a      	add	r2, r3
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	3304      	adds	r3, #4
 8005042:	4619      	mov	r1, r3
 8005044:	4610      	mov	r0, r2
 8005046:	f7fe fd6e 	bl	8003b26 <vListInsertEnd>
 800504a:	e005      	b.n	8005058 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	3318      	adds	r3, #24
 8005050:	4619      	mov	r1, r3
 8005052:	480e      	ldr	r0, [pc, #56]	; (800508c <xTaskRemoveFromEventList+0xb8>)
 8005054:	f7fe fd67 	bl	8003b26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505c:	4b0c      	ldr	r3, [pc, #48]	; (8005090 <xTaskRemoveFromEventList+0xbc>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	429a      	cmp	r2, r3
 8005064:	d905      	bls.n	8005072 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005066:	2301      	movs	r3, #1
 8005068:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800506a:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <xTaskRemoveFromEventList+0xc0>)
 800506c:	2201      	movs	r2, #1
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	e001      	b.n	8005076 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005072:	2300      	movs	r3, #0
 8005074:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005076:	697b      	ldr	r3, [r7, #20]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	20000420 	.word	0x20000420
 8005084:	20000400 	.word	0x20000400
 8005088:	200002fc 	.word	0x200002fc
 800508c:	200003b8 	.word	0x200003b8
 8005090:	200002f8 	.word	0x200002f8
 8005094:	2000040c 	.word	0x2000040c

08005098 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050a0:	4b06      	ldr	r3, [pc, #24]	; (80050bc <vTaskInternalSetTimeOutState+0x24>)
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050a8:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <vTaskInternalSetTimeOutState+0x28>)
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	605a      	str	r2, [r3, #4]
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	20000410 	.word	0x20000410
 80050c0:	200003fc 	.word	0x200003fc

080050c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10a      	bne.n	80050ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	613b      	str	r3, [r7, #16]
}
 80050e6:	bf00      	nop
 80050e8:	e7fe      	b.n	80050e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10a      	bne.n	8005106 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	60fb      	str	r3, [r7, #12]
}
 8005102:	bf00      	nop
 8005104:	e7fe      	b.n	8005104 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005106:	f000 fc6d 	bl	80059e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800510a:	4b1d      	ldr	r3, [pc, #116]	; (8005180 <xTaskCheckForTimeOut+0xbc>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005122:	d102      	bne.n	800512a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005124:	2300      	movs	r3, #0
 8005126:	61fb      	str	r3, [r7, #28]
 8005128:	e023      	b.n	8005172 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	4b15      	ldr	r3, [pc, #84]	; (8005184 <xTaskCheckForTimeOut+0xc0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d007      	beq.n	8005146 <xTaskCheckForTimeOut+0x82>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	429a      	cmp	r2, r3
 800513e:	d302      	bcc.n	8005146 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005140:	2301      	movs	r3, #1
 8005142:	61fb      	str	r3, [r7, #28]
 8005144:	e015      	b.n	8005172 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	429a      	cmp	r2, r3
 800514e:	d20b      	bcs.n	8005168 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	1ad2      	subs	r2, r2, r3
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff ff9b 	bl	8005098 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005162:	2300      	movs	r3, #0
 8005164:	61fb      	str	r3, [r7, #28]
 8005166:	e004      	b.n	8005172 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800516e:	2301      	movs	r3, #1
 8005170:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005172:	f000 fc67 	bl	8005a44 <vPortExitCritical>

	return xReturn;
 8005176:	69fb      	ldr	r3, [r7, #28]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3720      	adds	r7, #32
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	200003fc 	.word	0x200003fc
 8005184:	20000410 	.word	0x20000410

08005188 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800518c:	4b03      	ldr	r3, [pc, #12]	; (800519c <vTaskMissedYield+0x14>)
 800518e:	2201      	movs	r2, #1
 8005190:	601a      	str	r2, [r3, #0]
}
 8005192:	bf00      	nop
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	2000040c 	.word	0x2000040c

080051a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051a8:	f000 f852 	bl	8005250 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051ac:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <prvIdleTask+0x28>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d9f9      	bls.n	80051a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80051b4:	4b05      	ldr	r3, [pc, #20]	; (80051cc <prvIdleTask+0x2c>)
 80051b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051c4:	e7f0      	b.n	80051a8 <prvIdleTask+0x8>
 80051c6:	bf00      	nop
 80051c8:	200002fc 	.word	0x200002fc
 80051cc:	e000ed04 	.word	0xe000ed04

080051d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051d6:	2300      	movs	r3, #0
 80051d8:	607b      	str	r3, [r7, #4]
 80051da:	e00c      	b.n	80051f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	4613      	mov	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4a12      	ldr	r2, [pc, #72]	; (8005230 <prvInitialiseTaskLists+0x60>)
 80051e8:	4413      	add	r3, r2
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fe fc6e 	bl	8003acc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3301      	adds	r3, #1
 80051f4:	607b      	str	r3, [r7, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b06      	cmp	r3, #6
 80051fa:	d9ef      	bls.n	80051dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80051fc:	480d      	ldr	r0, [pc, #52]	; (8005234 <prvInitialiseTaskLists+0x64>)
 80051fe:	f7fe fc65 	bl	8003acc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005202:	480d      	ldr	r0, [pc, #52]	; (8005238 <prvInitialiseTaskLists+0x68>)
 8005204:	f7fe fc62 	bl	8003acc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005208:	480c      	ldr	r0, [pc, #48]	; (800523c <prvInitialiseTaskLists+0x6c>)
 800520a:	f7fe fc5f 	bl	8003acc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800520e:	480c      	ldr	r0, [pc, #48]	; (8005240 <prvInitialiseTaskLists+0x70>)
 8005210:	f7fe fc5c 	bl	8003acc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005214:	480b      	ldr	r0, [pc, #44]	; (8005244 <prvInitialiseTaskLists+0x74>)
 8005216:	f7fe fc59 	bl	8003acc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800521a:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <prvInitialiseTaskLists+0x78>)
 800521c:	4a05      	ldr	r2, [pc, #20]	; (8005234 <prvInitialiseTaskLists+0x64>)
 800521e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005220:	4b0a      	ldr	r3, [pc, #40]	; (800524c <prvInitialiseTaskLists+0x7c>)
 8005222:	4a05      	ldr	r2, [pc, #20]	; (8005238 <prvInitialiseTaskLists+0x68>)
 8005224:	601a      	str	r2, [r3, #0]
}
 8005226:	bf00      	nop
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	200002fc 	.word	0x200002fc
 8005234:	20000388 	.word	0x20000388
 8005238:	2000039c 	.word	0x2000039c
 800523c:	200003b8 	.word	0x200003b8
 8005240:	200003cc 	.word	0x200003cc
 8005244:	200003e4 	.word	0x200003e4
 8005248:	200003b0 	.word	0x200003b0
 800524c:	200003b4 	.word	0x200003b4

08005250 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005256:	e019      	b.n	800528c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005258:	f000 fbc4 	bl	80059e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800525c:	4b10      	ldr	r3, [pc, #64]	; (80052a0 <prvCheckTasksWaitingTermination+0x50>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3304      	adds	r3, #4
 8005268:	4618      	mov	r0, r3
 800526a:	f7fe fcb9 	bl	8003be0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800526e:	4b0d      	ldr	r3, [pc, #52]	; (80052a4 <prvCheckTasksWaitingTermination+0x54>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3b01      	subs	r3, #1
 8005274:	4a0b      	ldr	r2, [pc, #44]	; (80052a4 <prvCheckTasksWaitingTermination+0x54>)
 8005276:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005278:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <prvCheckTasksWaitingTermination+0x58>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3b01      	subs	r3, #1
 800527e:	4a0a      	ldr	r2, [pc, #40]	; (80052a8 <prvCheckTasksWaitingTermination+0x58>)
 8005280:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005282:	f000 fbdf 	bl	8005a44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f810 	bl	80052ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800528c:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <prvCheckTasksWaitingTermination+0x58>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e1      	bne.n	8005258 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005294:	bf00      	nop
 8005296:	bf00      	nop
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	200003cc 	.word	0x200003cc
 80052a4:	200003f8 	.word	0x200003f8
 80052a8:	200003e0 	.word	0x200003e0

080052ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d108      	bne.n	80052d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 fd7c 	bl	8005dc0 <vPortFree>
				vPortFree( pxTCB );
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fd79 	bl	8005dc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052ce:	e018      	b.n	8005302 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d103      	bne.n	80052e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fd70 	bl	8005dc0 <vPortFree>
	}
 80052e0:	e00f      	b.n	8005302 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d00a      	beq.n	8005302 <prvDeleteTCB+0x56>
	__asm volatile
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	60fb      	str	r3, [r7, #12]
}
 80052fe:	bf00      	nop
 8005300:	e7fe      	b.n	8005300 <prvDeleteTCB+0x54>
	}
 8005302:	bf00      	nop
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005312:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <prvResetNextTaskUnblockTime+0x38>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d104      	bne.n	8005326 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800531c:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <prvResetNextTaskUnblockTime+0x3c>)
 800531e:	f04f 32ff 	mov.w	r2, #4294967295
 8005322:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005324:	e008      	b.n	8005338 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005326:	4b07      	ldr	r3, [pc, #28]	; (8005344 <prvResetNextTaskUnblockTime+0x38>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	4a04      	ldr	r2, [pc, #16]	; (8005348 <prvResetNextTaskUnblockTime+0x3c>)
 8005336:	6013      	str	r3, [r2, #0]
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	200003b0 	.word	0x200003b0
 8005348:	20000418 	.word	0x20000418

0800534c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005352:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <xTaskGetSchedulerState+0x34>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d102      	bne.n	8005360 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800535a:	2301      	movs	r3, #1
 800535c:	607b      	str	r3, [r7, #4]
 800535e:	e008      	b.n	8005372 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005360:	4b08      	ldr	r3, [pc, #32]	; (8005384 <xTaskGetSchedulerState+0x38>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d102      	bne.n	800536e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005368:	2302      	movs	r3, #2
 800536a:	607b      	str	r3, [r7, #4]
 800536c:	e001      	b.n	8005372 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800536e:	2300      	movs	r3, #0
 8005370:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005372:	687b      	ldr	r3, [r7, #4]
	}
 8005374:	4618      	mov	r0, r3
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	20000404 	.word	0x20000404
 8005384:	20000420 	.word	0x20000420

08005388 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005394:	2300      	movs	r3, #0
 8005396:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d05e      	beq.n	800545c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a2:	4b31      	ldr	r3, [pc, #196]	; (8005468 <xTaskPriorityInherit+0xe0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d24e      	bcs.n	800544a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	db06      	blt.n	80053c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053b4:	4b2c      	ldr	r3, [pc, #176]	; (8005468 <xTaskPriorityInherit+0xe0>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	f1c3 0207 	rsb	r2, r3, #7
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	6959      	ldr	r1, [r3, #20]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ca:	4613      	mov	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4a26      	ldr	r2, [pc, #152]	; (800546c <xTaskPriorityInherit+0xe4>)
 80053d4:	4413      	add	r3, r2
 80053d6:	4299      	cmp	r1, r3
 80053d8:	d12f      	bne.n	800543a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	3304      	adds	r3, #4
 80053de:	4618      	mov	r0, r3
 80053e0:	f7fe fbfe 	bl	8003be0 <uxListRemove>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10a      	bne.n	8005400 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ee:	2201      	movs	r2, #1
 80053f0:	fa02 f303 	lsl.w	r3, r2, r3
 80053f4:	43da      	mvns	r2, r3
 80053f6:	4b1e      	ldr	r3, [pc, #120]	; (8005470 <xTaskPriorityInherit+0xe8>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4013      	ands	r3, r2
 80053fc:	4a1c      	ldr	r2, [pc, #112]	; (8005470 <xTaskPriorityInherit+0xe8>)
 80053fe:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005400:	4b19      	ldr	r3, [pc, #100]	; (8005468 <xTaskPriorityInherit+0xe0>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540e:	2201      	movs	r2, #1
 8005410:	409a      	lsls	r2, r3
 8005412:	4b17      	ldr	r3, [pc, #92]	; (8005470 <xTaskPriorityInherit+0xe8>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4313      	orrs	r3, r2
 8005418:	4a15      	ldr	r2, [pc, #84]	; (8005470 <xTaskPriorityInherit+0xe8>)
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005420:	4613      	mov	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4a10      	ldr	r2, [pc, #64]	; (800546c <xTaskPriorityInherit+0xe4>)
 800542a:	441a      	add	r2, r3
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	3304      	adds	r3, #4
 8005430:	4619      	mov	r1, r3
 8005432:	4610      	mov	r0, r2
 8005434:	f7fe fb77 	bl	8003b26 <vListInsertEnd>
 8005438:	e004      	b.n	8005444 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800543a:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <xTaskPriorityInherit+0xe0>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005444:	2301      	movs	r3, #1
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	e008      	b.n	800545c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800544e:	4b06      	ldr	r3, [pc, #24]	; (8005468 <xTaskPriorityInherit+0xe0>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	429a      	cmp	r2, r3
 8005456:	d201      	bcs.n	800545c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005458:	2301      	movs	r3, #1
 800545a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800545c:	68fb      	ldr	r3, [r7, #12]
	}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	200002f8 	.word	0x200002f8
 800546c:	200002fc 	.word	0x200002fc
 8005470:	20000400 	.word	0x20000400

08005474 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d06e      	beq.n	8005568 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800548a:	4b3a      	ldr	r3, [pc, #232]	; (8005574 <xTaskPriorityDisinherit+0x100>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	429a      	cmp	r2, r3
 8005492:	d00a      	beq.n	80054aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	60fb      	str	r3, [r7, #12]
}
 80054a6:	bf00      	nop
 80054a8:	e7fe      	b.n	80054a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10a      	bne.n	80054c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	60bb      	str	r3, [r7, #8]
}
 80054c4:	bf00      	nop
 80054c6:	e7fe      	b.n	80054c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054cc:	1e5a      	subs	r2, r3, #1
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054da:	429a      	cmp	r2, r3
 80054dc:	d044      	beq.n	8005568 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d140      	bne.n	8005568 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	3304      	adds	r3, #4
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fe fb78 	bl	8003be0 <uxListRemove>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d115      	bne.n	8005522 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fa:	491f      	ldr	r1, [pc, #124]	; (8005578 <xTaskPriorityDisinherit+0x104>)
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	440b      	add	r3, r1
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10a      	bne.n	8005522 <xTaskPriorityDisinherit+0xae>
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	2201      	movs	r2, #1
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	43da      	mvns	r2, r3
 8005518:	4b18      	ldr	r3, [pc, #96]	; (800557c <xTaskPriorityDisinherit+0x108>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4013      	ands	r3, r2
 800551e:	4a17      	ldr	r2, [pc, #92]	; (800557c <xTaskPriorityDisinherit+0x108>)
 8005520:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552e:	f1c3 0207 	rsb	r2, r3, #7
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553a:	2201      	movs	r2, #1
 800553c:	409a      	lsls	r2, r3
 800553e:	4b0f      	ldr	r3, [pc, #60]	; (800557c <xTaskPriorityDisinherit+0x108>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4313      	orrs	r3, r2
 8005544:	4a0d      	ldr	r2, [pc, #52]	; (800557c <xTaskPriorityDisinherit+0x108>)
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4a08      	ldr	r2, [pc, #32]	; (8005578 <xTaskPriorityDisinherit+0x104>)
 8005556:	441a      	add	r2, r3
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	3304      	adds	r3, #4
 800555c:	4619      	mov	r1, r3
 800555e:	4610      	mov	r0, r2
 8005560:	f7fe fae1 	bl	8003b26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005564:	2301      	movs	r3, #1
 8005566:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005568:	697b      	ldr	r3, [r7, #20]
	}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	200002f8 	.word	0x200002f8
 8005578:	200002fc 	.word	0x200002fc
 800557c:	20000400 	.word	0x20000400

08005580 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800558e:	2301      	movs	r3, #1
 8005590:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d077      	beq.n	8005688 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10a      	bne.n	80055b6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80055a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	60fb      	str	r3, [r7, #12]
}
 80055b2:	bf00      	nop
 80055b4:	e7fe      	b.n	80055b4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d902      	bls.n	80055c6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	61fb      	str	r3, [r7, #28]
 80055c4:	e002      	b.n	80055cc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	69fa      	ldr	r2, [r7, #28]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d058      	beq.n	8005688 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d153      	bne.n	8005688 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80055e0:	4b2b      	ldr	r3, [pc, #172]	; (8005690 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d10a      	bne.n	8005600 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	60bb      	str	r3, [r7, #8]
}
 80055fc:	bf00      	nop
 80055fe:	e7fe      	b.n	80055fe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	69fa      	ldr	r2, [r7, #28]
 800560a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	2b00      	cmp	r3, #0
 8005612:	db04      	blt.n	800561e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	f1c3 0207 	rsb	r2, r3, #7
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	6959      	ldr	r1, [r3, #20]
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4a19      	ldr	r2, [pc, #100]	; (8005694 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800562e:	4413      	add	r3, r2
 8005630:	4299      	cmp	r1, r3
 8005632:	d129      	bne.n	8005688 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	3304      	adds	r3, #4
 8005638:	4618      	mov	r0, r3
 800563a:	f7fe fad1 	bl	8003be0 <uxListRemove>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10a      	bne.n	800565a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	2201      	movs	r2, #1
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	43da      	mvns	r2, r3
 8005650:	4b11      	ldr	r3, [pc, #68]	; (8005698 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4013      	ands	r3, r2
 8005656:	4a10      	ldr	r2, [pc, #64]	; (8005698 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005658:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565e:	2201      	movs	r2, #1
 8005660:	409a      	lsls	r2, r3
 8005662:	4b0d      	ldr	r3, [pc, #52]	; (8005698 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4313      	orrs	r3, r2
 8005668:	4a0b      	ldr	r2, [pc, #44]	; (8005698 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4a06      	ldr	r2, [pc, #24]	; (8005694 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800567a:	441a      	add	r2, r3
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	3304      	adds	r3, #4
 8005680:	4619      	mov	r1, r3
 8005682:	4610      	mov	r0, r2
 8005684:	f7fe fa4f 	bl	8003b26 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005688:	bf00      	nop
 800568a:	3720      	adds	r7, #32
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	200002f8 	.word	0x200002f8
 8005694:	200002fc 	.word	0x200002fc
 8005698:	20000400 	.word	0x20000400

0800569c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80056a0:	4b07      	ldr	r3, [pc, #28]	; (80056c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d004      	beq.n	80056b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056ae:	3201      	adds	r2, #1
 80056b0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80056b2:	4b03      	ldr	r3, [pc, #12]	; (80056c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80056b4:	681b      	ldr	r3, [r3, #0]
	}
 80056b6:	4618      	mov	r0, r3
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	200002f8 	.word	0x200002f8

080056c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80056ce:	4b29      	ldr	r3, [pc, #164]	; (8005774 <prvAddCurrentTaskToDelayedList+0xb0>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056d4:	4b28      	ldr	r3, [pc, #160]	; (8005778 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3304      	adds	r3, #4
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fe fa80 	bl	8003be0 <uxListRemove>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10b      	bne.n	80056fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80056e6:	4b24      	ldr	r3, [pc, #144]	; (8005778 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ec:	2201      	movs	r2, #1
 80056ee:	fa02 f303 	lsl.w	r3, r2, r3
 80056f2:	43da      	mvns	r2, r3
 80056f4:	4b21      	ldr	r3, [pc, #132]	; (800577c <prvAddCurrentTaskToDelayedList+0xb8>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4013      	ands	r3, r2
 80056fa:	4a20      	ldr	r2, [pc, #128]	; (800577c <prvAddCurrentTaskToDelayedList+0xb8>)
 80056fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005704:	d10a      	bne.n	800571c <prvAddCurrentTaskToDelayedList+0x58>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800570c:	4b1a      	ldr	r3, [pc, #104]	; (8005778 <prvAddCurrentTaskToDelayedList+0xb4>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3304      	adds	r3, #4
 8005712:	4619      	mov	r1, r3
 8005714:	481a      	ldr	r0, [pc, #104]	; (8005780 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005716:	f7fe fa06 	bl	8003b26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800571a:	e026      	b.n	800576a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4413      	add	r3, r2
 8005722:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005724:	4b14      	ldr	r3, [pc, #80]	; (8005778 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	429a      	cmp	r2, r3
 8005732:	d209      	bcs.n	8005748 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005734:	4b13      	ldr	r3, [pc, #76]	; (8005784 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	4b0f      	ldr	r3, [pc, #60]	; (8005778 <prvAddCurrentTaskToDelayedList+0xb4>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3304      	adds	r3, #4
 800573e:	4619      	mov	r1, r3
 8005740:	4610      	mov	r0, r2
 8005742:	f7fe fa14 	bl	8003b6e <vListInsert>
}
 8005746:	e010      	b.n	800576a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005748:	4b0f      	ldr	r3, [pc, #60]	; (8005788 <prvAddCurrentTaskToDelayedList+0xc4>)
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	4b0a      	ldr	r3, [pc, #40]	; (8005778 <prvAddCurrentTaskToDelayedList+0xb4>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3304      	adds	r3, #4
 8005752:	4619      	mov	r1, r3
 8005754:	4610      	mov	r0, r2
 8005756:	f7fe fa0a 	bl	8003b6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800575a:	4b0c      	ldr	r3, [pc, #48]	; (800578c <prvAddCurrentTaskToDelayedList+0xc8>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	429a      	cmp	r2, r3
 8005762:	d202      	bcs.n	800576a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005764:	4a09      	ldr	r2, [pc, #36]	; (800578c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	6013      	str	r3, [r2, #0]
}
 800576a:	bf00      	nop
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	200003fc 	.word	0x200003fc
 8005778:	200002f8 	.word	0x200002f8
 800577c:	20000400 	.word	0x20000400
 8005780:	200003e4 	.word	0x200003e4
 8005784:	200003b4 	.word	0x200003b4
 8005788:	200003b0 	.word	0x200003b0
 800578c:	20000418 	.word	0x20000418

08005790 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	3b04      	subs	r3, #4
 80057a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	3b04      	subs	r3, #4
 80057ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f023 0201 	bic.w	r2, r3, #1
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3b04      	subs	r3, #4
 80057be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057c0:	4a0c      	ldr	r2, [pc, #48]	; (80057f4 <pxPortInitialiseStack+0x64>)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3b14      	subs	r3, #20
 80057ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3b04      	subs	r3, #4
 80057d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f06f 0202 	mvn.w	r2, #2
 80057de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	3b20      	subs	r3, #32
 80057e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057e6:	68fb      	ldr	r3, [r7, #12]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	080057f9 	.word	0x080057f9

080057f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80057fe:	2300      	movs	r3, #0
 8005800:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005802:	4b12      	ldr	r3, [pc, #72]	; (800584c <prvTaskExitError+0x54>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580a:	d00a      	beq.n	8005822 <prvTaskExitError+0x2a>
	__asm volatile
 800580c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	60fb      	str	r3, [r7, #12]
}
 800581e:	bf00      	nop
 8005820:	e7fe      	b.n	8005820 <prvTaskExitError+0x28>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	60bb      	str	r3, [r7, #8]
}
 8005834:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005836:	bf00      	nop
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0fc      	beq.n	8005838 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800583e:	bf00      	nop
 8005840:	bf00      	nop
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	2000000c 	.word	0x2000000c

08005850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005850:	4b07      	ldr	r3, [pc, #28]	; (8005870 <pxCurrentTCBConst2>)
 8005852:	6819      	ldr	r1, [r3, #0]
 8005854:	6808      	ldr	r0, [r1, #0]
 8005856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800585a:	f380 8809 	msr	PSP, r0
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f04f 0000 	mov.w	r0, #0
 8005866:	f380 8811 	msr	BASEPRI, r0
 800586a:	4770      	bx	lr
 800586c:	f3af 8000 	nop.w

08005870 <pxCurrentTCBConst2>:
 8005870:	200002f8 	.word	0x200002f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop

08005878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005878:	4808      	ldr	r0, [pc, #32]	; (800589c <prvPortStartFirstTask+0x24>)
 800587a:	6800      	ldr	r0, [r0, #0]
 800587c:	6800      	ldr	r0, [r0, #0]
 800587e:	f380 8808 	msr	MSP, r0
 8005882:	f04f 0000 	mov.w	r0, #0
 8005886:	f380 8814 	msr	CONTROL, r0
 800588a:	b662      	cpsie	i
 800588c:	b661      	cpsie	f
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	df00      	svc	0
 8005898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800589a:	bf00      	nop
 800589c:	e000ed08 	.word	0xe000ed08

080058a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058a6:	4b46      	ldr	r3, [pc, #280]	; (80059c0 <xPortStartScheduler+0x120>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a46      	ldr	r2, [pc, #280]	; (80059c4 <xPortStartScheduler+0x124>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d10a      	bne.n	80058c6 <xPortStartScheduler+0x26>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	613b      	str	r3, [r7, #16]
}
 80058c2:	bf00      	nop
 80058c4:	e7fe      	b.n	80058c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058c6:	4b3e      	ldr	r3, [pc, #248]	; (80059c0 <xPortStartScheduler+0x120>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a3f      	ldr	r2, [pc, #252]	; (80059c8 <xPortStartScheduler+0x128>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d10a      	bne.n	80058e6 <xPortStartScheduler+0x46>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	60fb      	str	r3, [r7, #12]
}
 80058e2:	bf00      	nop
 80058e4:	e7fe      	b.n	80058e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058e6:	4b39      	ldr	r3, [pc, #228]	; (80059cc <xPortStartScheduler+0x12c>)
 80058e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	22ff      	movs	r2, #255	; 0xff
 80058f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005900:	78fb      	ldrb	r3, [r7, #3]
 8005902:	b2db      	uxtb	r3, r3
 8005904:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005908:	b2da      	uxtb	r2, r3
 800590a:	4b31      	ldr	r3, [pc, #196]	; (80059d0 <xPortStartScheduler+0x130>)
 800590c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800590e:	4b31      	ldr	r3, [pc, #196]	; (80059d4 <xPortStartScheduler+0x134>)
 8005910:	2207      	movs	r2, #7
 8005912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005914:	e009      	b.n	800592a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005916:	4b2f      	ldr	r3, [pc, #188]	; (80059d4 <xPortStartScheduler+0x134>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3b01      	subs	r3, #1
 800591c:	4a2d      	ldr	r2, [pc, #180]	; (80059d4 <xPortStartScheduler+0x134>)
 800591e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	b2db      	uxtb	r3, r3
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	b2db      	uxtb	r3, r3
 8005928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800592a:	78fb      	ldrb	r3, [r7, #3]
 800592c:	b2db      	uxtb	r3, r3
 800592e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005932:	2b80      	cmp	r3, #128	; 0x80
 8005934:	d0ef      	beq.n	8005916 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005936:	4b27      	ldr	r3, [pc, #156]	; (80059d4 <xPortStartScheduler+0x134>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f1c3 0307 	rsb	r3, r3, #7
 800593e:	2b04      	cmp	r3, #4
 8005940:	d00a      	beq.n	8005958 <xPortStartScheduler+0xb8>
	__asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	60bb      	str	r3, [r7, #8]
}
 8005954:	bf00      	nop
 8005956:	e7fe      	b.n	8005956 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005958:	4b1e      	ldr	r3, [pc, #120]	; (80059d4 <xPortStartScheduler+0x134>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	021b      	lsls	r3, r3, #8
 800595e:	4a1d      	ldr	r2, [pc, #116]	; (80059d4 <xPortStartScheduler+0x134>)
 8005960:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005962:	4b1c      	ldr	r3, [pc, #112]	; (80059d4 <xPortStartScheduler+0x134>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800596a:	4a1a      	ldr	r2, [pc, #104]	; (80059d4 <xPortStartScheduler+0x134>)
 800596c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	b2da      	uxtb	r2, r3
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005976:	4b18      	ldr	r3, [pc, #96]	; (80059d8 <xPortStartScheduler+0x138>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a17      	ldr	r2, [pc, #92]	; (80059d8 <xPortStartScheduler+0x138>)
 800597c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005980:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005982:	4b15      	ldr	r3, [pc, #84]	; (80059d8 <xPortStartScheduler+0x138>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a14      	ldr	r2, [pc, #80]	; (80059d8 <xPortStartScheduler+0x138>)
 8005988:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800598c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800598e:	f000 f8dd 	bl	8005b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005992:	4b12      	ldr	r3, [pc, #72]	; (80059dc <xPortStartScheduler+0x13c>)
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005998:	f000 f8fc 	bl	8005b94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800599c:	4b10      	ldr	r3, [pc, #64]	; (80059e0 <xPortStartScheduler+0x140>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a0f      	ldr	r2, [pc, #60]	; (80059e0 <xPortStartScheduler+0x140>)
 80059a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80059a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059a8:	f7ff ff66 	bl	8005878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059ac:	f7ff fa92 	bl	8004ed4 <vTaskSwitchContext>
	prvTaskExitError();
 80059b0:	f7ff ff22 	bl	80057f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	e000ed00 	.word	0xe000ed00
 80059c4:	410fc271 	.word	0x410fc271
 80059c8:	410fc270 	.word	0x410fc270
 80059cc:	e000e400 	.word	0xe000e400
 80059d0:	20000424 	.word	0x20000424
 80059d4:	20000428 	.word	0x20000428
 80059d8:	e000ed20 	.word	0xe000ed20
 80059dc:	2000000c 	.word	0x2000000c
 80059e0:	e000ef34 	.word	0xe000ef34

080059e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
	__asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	607b      	str	r3, [r7, #4]
}
 80059fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059fe:	4b0f      	ldr	r3, [pc, #60]	; (8005a3c <vPortEnterCritical+0x58>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3301      	adds	r3, #1
 8005a04:	4a0d      	ldr	r2, [pc, #52]	; (8005a3c <vPortEnterCritical+0x58>)
 8005a06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a08:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <vPortEnterCritical+0x58>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d10f      	bne.n	8005a30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a10:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <vPortEnterCritical+0x5c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	603b      	str	r3, [r7, #0]
}
 8005a2c:	bf00      	nop
 8005a2e:	e7fe      	b.n	8005a2e <vPortEnterCritical+0x4a>
	}
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	2000000c 	.word	0x2000000c
 8005a40:	e000ed04 	.word	0xe000ed04

08005a44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a4a:	4b12      	ldr	r3, [pc, #72]	; (8005a94 <vPortExitCritical+0x50>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10a      	bne.n	8005a68 <vPortExitCritical+0x24>
	__asm volatile
 8005a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	607b      	str	r3, [r7, #4]
}
 8005a64:	bf00      	nop
 8005a66:	e7fe      	b.n	8005a66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a68:	4b0a      	ldr	r3, [pc, #40]	; (8005a94 <vPortExitCritical+0x50>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	4a09      	ldr	r2, [pc, #36]	; (8005a94 <vPortExitCritical+0x50>)
 8005a70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a72:	4b08      	ldr	r3, [pc, #32]	; (8005a94 <vPortExitCritical+0x50>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d105      	bne.n	8005a86 <vPortExitCritical+0x42>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	f383 8811 	msr	BASEPRI, r3
}
 8005a84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	2000000c 	.word	0x2000000c
	...

08005aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005aa0:	f3ef 8009 	mrs	r0, PSP
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	4b15      	ldr	r3, [pc, #84]	; (8005b00 <pxCurrentTCBConst>)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	f01e 0f10 	tst.w	lr, #16
 8005ab0:	bf08      	it	eq
 8005ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aba:	6010      	str	r0, [r2, #0]
 8005abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ac4:	f380 8811 	msr	BASEPRI, r0
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f7ff fa00 	bl	8004ed4 <vTaskSwitchContext>
 8005ad4:	f04f 0000 	mov.w	r0, #0
 8005ad8:	f380 8811 	msr	BASEPRI, r0
 8005adc:	bc09      	pop	{r0, r3}
 8005ade:	6819      	ldr	r1, [r3, #0]
 8005ae0:	6808      	ldr	r0, [r1, #0]
 8005ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae6:	f01e 0f10 	tst.w	lr, #16
 8005aea:	bf08      	it	eq
 8005aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005af0:	f380 8809 	msr	PSP, r0
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	f3af 8000 	nop.w

08005b00 <pxCurrentTCBConst>:
 8005b00:	200002f8 	.word	0x200002f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b04:	bf00      	nop
 8005b06:	bf00      	nop

08005b08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	607b      	str	r3, [r7, #4]
}
 8005b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b22:	f7ff f91f 	bl	8004d64 <xTaskIncrementTick>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b2c:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <xPortSysTickHandler+0x40>)
 8005b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	2300      	movs	r3, #0
 8005b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	f383 8811 	msr	BASEPRI, r3
}
 8005b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b40:	bf00      	nop
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	e000ed04 	.word	0xe000ed04

08005b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b50:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <vPortSetupTimerInterrupt+0x34>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b56:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <vPortSetupTimerInterrupt+0x38>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b5c:	4b0a      	ldr	r3, [pc, #40]	; (8005b88 <vPortSetupTimerInterrupt+0x3c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a0a      	ldr	r2, [pc, #40]	; (8005b8c <vPortSetupTimerInterrupt+0x40>)
 8005b62:	fba2 2303 	umull	r2, r3, r2, r3
 8005b66:	099b      	lsrs	r3, r3, #6
 8005b68:	4a09      	ldr	r2, [pc, #36]	; (8005b90 <vPortSetupTimerInterrupt+0x44>)
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b6e:	4b04      	ldr	r3, [pc, #16]	; (8005b80 <vPortSetupTimerInterrupt+0x34>)
 8005b70:	2207      	movs	r2, #7
 8005b72:	601a      	str	r2, [r3, #0]
}
 8005b74:	bf00      	nop
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	e000e010 	.word	0xe000e010
 8005b84:	e000e018 	.word	0xe000e018
 8005b88:	20000000 	.word	0x20000000
 8005b8c:	10624dd3 	.word	0x10624dd3
 8005b90:	e000e014 	.word	0xe000e014

08005b94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ba4 <vPortEnableVFP+0x10>
 8005b98:	6801      	ldr	r1, [r0, #0]
 8005b9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b9e:	6001      	str	r1, [r0, #0]
 8005ba0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ba2:	bf00      	nop
 8005ba4:	e000ed88 	.word	0xe000ed88

08005ba8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bae:	f3ef 8305 	mrs	r3, IPSR
 8005bb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b0f      	cmp	r3, #15
 8005bb8:	d914      	bls.n	8005be4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bba:	4a17      	ldr	r2, [pc, #92]	; (8005c18 <vPortValidateInterruptPriority+0x70>)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bc4:	4b15      	ldr	r3, [pc, #84]	; (8005c1c <vPortValidateInterruptPriority+0x74>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	7afa      	ldrb	r2, [r7, #11]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d20a      	bcs.n	8005be4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	607b      	str	r3, [r7, #4]
}
 8005be0:	bf00      	nop
 8005be2:	e7fe      	b.n	8005be2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005be4:	4b0e      	ldr	r3, [pc, #56]	; (8005c20 <vPortValidateInterruptPriority+0x78>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bec:	4b0d      	ldr	r3, [pc, #52]	; (8005c24 <vPortValidateInterruptPriority+0x7c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d90a      	bls.n	8005c0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	603b      	str	r3, [r7, #0]
}
 8005c06:	bf00      	nop
 8005c08:	e7fe      	b.n	8005c08 <vPortValidateInterruptPriority+0x60>
	}
 8005c0a:	bf00      	nop
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	e000e3f0 	.word	0xe000e3f0
 8005c1c:	20000424 	.word	0x20000424
 8005c20:	e000ed0c 	.word	0xe000ed0c
 8005c24:	20000428 	.word	0x20000428

08005c28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08a      	sub	sp, #40	; 0x28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c30:	2300      	movs	r3, #0
 8005c32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c34:	f7fe ffec 	bl	8004c10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c38:	4b5b      	ldr	r3, [pc, #364]	; (8005da8 <pvPortMalloc+0x180>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c40:	f000 f920 	bl	8005e84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c44:	4b59      	ldr	r3, [pc, #356]	; (8005dac <pvPortMalloc+0x184>)
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f040 8093 	bne.w	8005d78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d01d      	beq.n	8005c94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c58:	2208      	movs	r2, #8
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d014      	beq.n	8005c94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f023 0307 	bic.w	r3, r3, #7
 8005c70:	3308      	adds	r3, #8
 8005c72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00a      	beq.n	8005c94 <pvPortMalloc+0x6c>
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	617b      	str	r3, [r7, #20]
}
 8005c90:	bf00      	nop
 8005c92:	e7fe      	b.n	8005c92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d06e      	beq.n	8005d78 <pvPortMalloc+0x150>
 8005c9a:	4b45      	ldr	r3, [pc, #276]	; (8005db0 <pvPortMalloc+0x188>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d869      	bhi.n	8005d78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ca4:	4b43      	ldr	r3, [pc, #268]	; (8005db4 <pvPortMalloc+0x18c>)
 8005ca6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ca8:	4b42      	ldr	r3, [pc, #264]	; (8005db4 <pvPortMalloc+0x18c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cae:	e004      	b.n	8005cba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d903      	bls.n	8005ccc <pvPortMalloc+0xa4>
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1f1      	bne.n	8005cb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ccc:	4b36      	ldr	r3, [pc, #216]	; (8005da8 <pvPortMalloc+0x180>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d050      	beq.n	8005d78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2208      	movs	r2, #8
 8005cdc:	4413      	add	r3, r2
 8005cde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	1ad2      	subs	r2, r2, r3
 8005cf0:	2308      	movs	r3, #8
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d91f      	bls.n	8005d38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <pvPortMalloc+0xf8>
	__asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	613b      	str	r3, [r7, #16]
}
 8005d1c:	bf00      	nop
 8005d1e:	e7fe      	b.n	8005d1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	1ad2      	subs	r2, r2, r3
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d32:	69b8      	ldr	r0, [r7, #24]
 8005d34:	f000 f908 	bl	8005f48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d38:	4b1d      	ldr	r3, [pc, #116]	; (8005db0 <pvPortMalloc+0x188>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	4a1b      	ldr	r2, [pc, #108]	; (8005db0 <pvPortMalloc+0x188>)
 8005d44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d46:	4b1a      	ldr	r3, [pc, #104]	; (8005db0 <pvPortMalloc+0x188>)
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	4b1b      	ldr	r3, [pc, #108]	; (8005db8 <pvPortMalloc+0x190>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d203      	bcs.n	8005d5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d52:	4b17      	ldr	r3, [pc, #92]	; (8005db0 <pvPortMalloc+0x188>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a18      	ldr	r2, [pc, #96]	; (8005db8 <pvPortMalloc+0x190>)
 8005d58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	4b13      	ldr	r3, [pc, #76]	; (8005dac <pvPortMalloc+0x184>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	431a      	orrs	r2, r3
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d6e:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <pvPortMalloc+0x194>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3301      	adds	r3, #1
 8005d74:	4a11      	ldr	r2, [pc, #68]	; (8005dbc <pvPortMalloc+0x194>)
 8005d76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d78:	f7fe ff58 	bl	8004c2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	f003 0307 	and.w	r3, r3, #7
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00a      	beq.n	8005d9c <pvPortMalloc+0x174>
	__asm volatile
 8005d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8a:	f383 8811 	msr	BASEPRI, r3
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	60fb      	str	r3, [r7, #12]
}
 8005d98:	bf00      	nop
 8005d9a:	e7fe      	b.n	8005d9a <pvPortMalloc+0x172>
	return pvReturn;
 8005d9c:	69fb      	ldr	r3, [r7, #28]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3728      	adds	r7, #40	; 0x28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20004034 	.word	0x20004034
 8005dac:	20004048 	.word	0x20004048
 8005db0:	20004038 	.word	0x20004038
 8005db4:	2000402c 	.word	0x2000402c
 8005db8:	2000403c 	.word	0x2000403c
 8005dbc:	20004040 	.word	0x20004040

08005dc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d04d      	beq.n	8005e6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005dd2:	2308      	movs	r3, #8
 8005dd4:	425b      	negs	r3, r3
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	4413      	add	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	4b24      	ldr	r3, [pc, #144]	; (8005e78 <vPortFree+0xb8>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4013      	ands	r3, r2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10a      	bne.n	8005e04 <vPortFree+0x44>
	__asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	60fb      	str	r3, [r7, #12]
}
 8005e00:	bf00      	nop
 8005e02:	e7fe      	b.n	8005e02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00a      	beq.n	8005e22 <vPortFree+0x62>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	60bb      	str	r3, [r7, #8]
}
 8005e1e:	bf00      	nop
 8005e20:	e7fe      	b.n	8005e20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	4b14      	ldr	r3, [pc, #80]	; (8005e78 <vPortFree+0xb8>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01e      	beq.n	8005e6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d11a      	bne.n	8005e6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	4b0e      	ldr	r3, [pc, #56]	; (8005e78 <vPortFree+0xb8>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	43db      	mvns	r3, r3
 8005e42:	401a      	ands	r2, r3
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e48:	f7fe fee2 	bl	8004c10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	4b0a      	ldr	r3, [pc, #40]	; (8005e7c <vPortFree+0xbc>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4413      	add	r3, r2
 8005e56:	4a09      	ldr	r2, [pc, #36]	; (8005e7c <vPortFree+0xbc>)
 8005e58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e5a:	6938      	ldr	r0, [r7, #16]
 8005e5c:	f000 f874 	bl	8005f48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e60:	4b07      	ldr	r3, [pc, #28]	; (8005e80 <vPortFree+0xc0>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3301      	adds	r3, #1
 8005e66:	4a06      	ldr	r2, [pc, #24]	; (8005e80 <vPortFree+0xc0>)
 8005e68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e6a:	f7fe fedf 	bl	8004c2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e6e:	bf00      	nop
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20004048 	.word	0x20004048
 8005e7c:	20004038 	.word	0x20004038
 8005e80:	20004044 	.word	0x20004044

08005e84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e90:	4b27      	ldr	r3, [pc, #156]	; (8005f30 <prvHeapInit+0xac>)
 8005e92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00c      	beq.n	8005eb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3307      	adds	r3, #7
 8005ea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 0307 	bic.w	r3, r3, #7
 8005eaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	4a1f      	ldr	r2, [pc, #124]	; (8005f30 <prvHeapInit+0xac>)
 8005eb4:	4413      	add	r3, r2
 8005eb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ebc:	4a1d      	ldr	r2, [pc, #116]	; (8005f34 <prvHeapInit+0xb0>)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ec2:	4b1c      	ldr	r3, [pc, #112]	; (8005f34 <prvHeapInit+0xb0>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	4413      	add	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ed0:	2208      	movs	r2, #8
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	1a9b      	subs	r3, r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 0307 	bic.w	r3, r3, #7
 8005ede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4a15      	ldr	r2, [pc, #84]	; (8005f38 <prvHeapInit+0xb4>)
 8005ee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ee6:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <prvHeapInit+0xb4>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2200      	movs	r2, #0
 8005eec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005eee:	4b12      	ldr	r3, [pc, #72]	; (8005f38 <prvHeapInit+0xb4>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	1ad2      	subs	r2, r2, r3
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f04:	4b0c      	ldr	r3, [pc, #48]	; (8005f38 <prvHeapInit+0xb4>)
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	4a0a      	ldr	r2, [pc, #40]	; (8005f3c <prvHeapInit+0xb8>)
 8005f12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	4a09      	ldr	r2, [pc, #36]	; (8005f40 <prvHeapInit+0xbc>)
 8005f1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f1c:	4b09      	ldr	r3, [pc, #36]	; (8005f44 <prvHeapInit+0xc0>)
 8005f1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f22:	601a      	str	r2, [r3, #0]
}
 8005f24:	bf00      	nop
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	2000042c 	.word	0x2000042c
 8005f34:	2000402c 	.word	0x2000402c
 8005f38:	20004034 	.word	0x20004034
 8005f3c:	2000403c 	.word	0x2000403c
 8005f40:	20004038 	.word	0x20004038
 8005f44:	20004048 	.word	0x20004048

08005f48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f50:	4b28      	ldr	r3, [pc, #160]	; (8005ff4 <prvInsertBlockIntoFreeList+0xac>)
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	e002      	b.n	8005f5c <prvInsertBlockIntoFreeList+0x14>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d8f7      	bhi.n	8005f56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	4413      	add	r3, r2
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d108      	bne.n	8005f8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	441a      	add	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	441a      	add	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d118      	bne.n	8005fd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	4b15      	ldr	r3, [pc, #84]	; (8005ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d00d      	beq.n	8005fc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	441a      	add	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	e008      	b.n	8005fd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005fc6:	4b0c      	ldr	r3, [pc, #48]	; (8005ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	e003      	b.n	8005fd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d002      	beq.n	8005fe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fe6:	bf00      	nop
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	2000402c 	.word	0x2000402c
 8005ff8:	20004034 	.word	0x20004034

08005ffc <__errno>:
 8005ffc:	4b01      	ldr	r3, [pc, #4]	; (8006004 <__errno+0x8>)
 8005ffe:	6818      	ldr	r0, [r3, #0]
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20000010 	.word	0x20000010

08006008 <__libc_init_array>:
 8006008:	b570      	push	{r4, r5, r6, lr}
 800600a:	4d0d      	ldr	r5, [pc, #52]	; (8006040 <__libc_init_array+0x38>)
 800600c:	4c0d      	ldr	r4, [pc, #52]	; (8006044 <__libc_init_array+0x3c>)
 800600e:	1b64      	subs	r4, r4, r5
 8006010:	10a4      	asrs	r4, r4, #2
 8006012:	2600      	movs	r6, #0
 8006014:	42a6      	cmp	r6, r4
 8006016:	d109      	bne.n	800602c <__libc_init_array+0x24>
 8006018:	4d0b      	ldr	r5, [pc, #44]	; (8006048 <__libc_init_array+0x40>)
 800601a:	4c0c      	ldr	r4, [pc, #48]	; (800604c <__libc_init_array+0x44>)
 800601c:	f000 fc4e 	bl	80068bc <_init>
 8006020:	1b64      	subs	r4, r4, r5
 8006022:	10a4      	asrs	r4, r4, #2
 8006024:	2600      	movs	r6, #0
 8006026:	42a6      	cmp	r6, r4
 8006028:	d105      	bne.n	8006036 <__libc_init_array+0x2e>
 800602a:	bd70      	pop	{r4, r5, r6, pc}
 800602c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006030:	4798      	blx	r3
 8006032:	3601      	adds	r6, #1
 8006034:	e7ee      	b.n	8006014 <__libc_init_array+0xc>
 8006036:	f855 3b04 	ldr.w	r3, [r5], #4
 800603a:	4798      	blx	r3
 800603c:	3601      	adds	r6, #1
 800603e:	e7f2      	b.n	8006026 <__libc_init_array+0x1e>
 8006040:	08006a08 	.word	0x08006a08
 8006044:	08006a08 	.word	0x08006a08
 8006048:	08006a08 	.word	0x08006a08
 800604c:	08006a0c 	.word	0x08006a0c

08006050 <memcpy>:
 8006050:	440a      	add	r2, r1
 8006052:	4291      	cmp	r1, r2
 8006054:	f100 33ff 	add.w	r3, r0, #4294967295
 8006058:	d100      	bne.n	800605c <memcpy+0xc>
 800605a:	4770      	bx	lr
 800605c:	b510      	push	{r4, lr}
 800605e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006062:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006066:	4291      	cmp	r1, r2
 8006068:	d1f9      	bne.n	800605e <memcpy+0xe>
 800606a:	bd10      	pop	{r4, pc}

0800606c <memset>:
 800606c:	4402      	add	r2, r0
 800606e:	4603      	mov	r3, r0
 8006070:	4293      	cmp	r3, r2
 8006072:	d100      	bne.n	8006076 <memset+0xa>
 8006074:	4770      	bx	lr
 8006076:	f803 1b01 	strb.w	r1, [r3], #1
 800607a:	e7f9      	b.n	8006070 <memset+0x4>

0800607c <siprintf>:
 800607c:	b40e      	push	{r1, r2, r3}
 800607e:	b500      	push	{lr}
 8006080:	b09c      	sub	sp, #112	; 0x70
 8006082:	ab1d      	add	r3, sp, #116	; 0x74
 8006084:	9002      	str	r0, [sp, #8]
 8006086:	9006      	str	r0, [sp, #24]
 8006088:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800608c:	4809      	ldr	r0, [pc, #36]	; (80060b4 <siprintf+0x38>)
 800608e:	9107      	str	r1, [sp, #28]
 8006090:	9104      	str	r1, [sp, #16]
 8006092:	4909      	ldr	r1, [pc, #36]	; (80060b8 <siprintf+0x3c>)
 8006094:	f853 2b04 	ldr.w	r2, [r3], #4
 8006098:	9105      	str	r1, [sp, #20]
 800609a:	6800      	ldr	r0, [r0, #0]
 800609c:	9301      	str	r3, [sp, #4]
 800609e:	a902      	add	r1, sp, #8
 80060a0:	f000 f868 	bl	8006174 <_svfiprintf_r>
 80060a4:	9b02      	ldr	r3, [sp, #8]
 80060a6:	2200      	movs	r2, #0
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	b01c      	add	sp, #112	; 0x70
 80060ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80060b0:	b003      	add	sp, #12
 80060b2:	4770      	bx	lr
 80060b4:	20000010 	.word	0x20000010
 80060b8:	ffff0208 	.word	0xffff0208

080060bc <__ssputs_r>:
 80060bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c0:	688e      	ldr	r6, [r1, #8]
 80060c2:	429e      	cmp	r6, r3
 80060c4:	4682      	mov	sl, r0
 80060c6:	460c      	mov	r4, r1
 80060c8:	4690      	mov	r8, r2
 80060ca:	461f      	mov	r7, r3
 80060cc:	d838      	bhi.n	8006140 <__ssputs_r+0x84>
 80060ce:	898a      	ldrh	r2, [r1, #12]
 80060d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060d4:	d032      	beq.n	800613c <__ssputs_r+0x80>
 80060d6:	6825      	ldr	r5, [r4, #0]
 80060d8:	6909      	ldr	r1, [r1, #16]
 80060da:	eba5 0901 	sub.w	r9, r5, r1
 80060de:	6965      	ldr	r5, [r4, #20]
 80060e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060e8:	3301      	adds	r3, #1
 80060ea:	444b      	add	r3, r9
 80060ec:	106d      	asrs	r5, r5, #1
 80060ee:	429d      	cmp	r5, r3
 80060f0:	bf38      	it	cc
 80060f2:	461d      	movcc	r5, r3
 80060f4:	0553      	lsls	r3, r2, #21
 80060f6:	d531      	bpl.n	800615c <__ssputs_r+0xa0>
 80060f8:	4629      	mov	r1, r5
 80060fa:	f000 fb39 	bl	8006770 <_malloc_r>
 80060fe:	4606      	mov	r6, r0
 8006100:	b950      	cbnz	r0, 8006118 <__ssputs_r+0x5c>
 8006102:	230c      	movs	r3, #12
 8006104:	f8ca 3000 	str.w	r3, [sl]
 8006108:	89a3      	ldrh	r3, [r4, #12]
 800610a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800610e:	81a3      	strh	r3, [r4, #12]
 8006110:	f04f 30ff 	mov.w	r0, #4294967295
 8006114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006118:	6921      	ldr	r1, [r4, #16]
 800611a:	464a      	mov	r2, r9
 800611c:	f7ff ff98 	bl	8006050 <memcpy>
 8006120:	89a3      	ldrh	r3, [r4, #12]
 8006122:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612a:	81a3      	strh	r3, [r4, #12]
 800612c:	6126      	str	r6, [r4, #16]
 800612e:	6165      	str	r5, [r4, #20]
 8006130:	444e      	add	r6, r9
 8006132:	eba5 0509 	sub.w	r5, r5, r9
 8006136:	6026      	str	r6, [r4, #0]
 8006138:	60a5      	str	r5, [r4, #8]
 800613a:	463e      	mov	r6, r7
 800613c:	42be      	cmp	r6, r7
 800613e:	d900      	bls.n	8006142 <__ssputs_r+0x86>
 8006140:	463e      	mov	r6, r7
 8006142:	4632      	mov	r2, r6
 8006144:	6820      	ldr	r0, [r4, #0]
 8006146:	4641      	mov	r1, r8
 8006148:	f000 faa8 	bl	800669c <memmove>
 800614c:	68a3      	ldr	r3, [r4, #8]
 800614e:	6822      	ldr	r2, [r4, #0]
 8006150:	1b9b      	subs	r3, r3, r6
 8006152:	4432      	add	r2, r6
 8006154:	60a3      	str	r3, [r4, #8]
 8006156:	6022      	str	r2, [r4, #0]
 8006158:	2000      	movs	r0, #0
 800615a:	e7db      	b.n	8006114 <__ssputs_r+0x58>
 800615c:	462a      	mov	r2, r5
 800615e:	f000 fb61 	bl	8006824 <_realloc_r>
 8006162:	4606      	mov	r6, r0
 8006164:	2800      	cmp	r0, #0
 8006166:	d1e1      	bne.n	800612c <__ssputs_r+0x70>
 8006168:	6921      	ldr	r1, [r4, #16]
 800616a:	4650      	mov	r0, sl
 800616c:	f000 fab0 	bl	80066d0 <_free_r>
 8006170:	e7c7      	b.n	8006102 <__ssputs_r+0x46>
	...

08006174 <_svfiprintf_r>:
 8006174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006178:	4698      	mov	r8, r3
 800617a:	898b      	ldrh	r3, [r1, #12]
 800617c:	061b      	lsls	r3, r3, #24
 800617e:	b09d      	sub	sp, #116	; 0x74
 8006180:	4607      	mov	r7, r0
 8006182:	460d      	mov	r5, r1
 8006184:	4614      	mov	r4, r2
 8006186:	d50e      	bpl.n	80061a6 <_svfiprintf_r+0x32>
 8006188:	690b      	ldr	r3, [r1, #16]
 800618a:	b963      	cbnz	r3, 80061a6 <_svfiprintf_r+0x32>
 800618c:	2140      	movs	r1, #64	; 0x40
 800618e:	f000 faef 	bl	8006770 <_malloc_r>
 8006192:	6028      	str	r0, [r5, #0]
 8006194:	6128      	str	r0, [r5, #16]
 8006196:	b920      	cbnz	r0, 80061a2 <_svfiprintf_r+0x2e>
 8006198:	230c      	movs	r3, #12
 800619a:	603b      	str	r3, [r7, #0]
 800619c:	f04f 30ff 	mov.w	r0, #4294967295
 80061a0:	e0d1      	b.n	8006346 <_svfiprintf_r+0x1d2>
 80061a2:	2340      	movs	r3, #64	; 0x40
 80061a4:	616b      	str	r3, [r5, #20]
 80061a6:	2300      	movs	r3, #0
 80061a8:	9309      	str	r3, [sp, #36]	; 0x24
 80061aa:	2320      	movs	r3, #32
 80061ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80061b4:	2330      	movs	r3, #48	; 0x30
 80061b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006360 <_svfiprintf_r+0x1ec>
 80061ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061be:	f04f 0901 	mov.w	r9, #1
 80061c2:	4623      	mov	r3, r4
 80061c4:	469a      	mov	sl, r3
 80061c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061ca:	b10a      	cbz	r2, 80061d0 <_svfiprintf_r+0x5c>
 80061cc:	2a25      	cmp	r2, #37	; 0x25
 80061ce:	d1f9      	bne.n	80061c4 <_svfiprintf_r+0x50>
 80061d0:	ebba 0b04 	subs.w	fp, sl, r4
 80061d4:	d00b      	beq.n	80061ee <_svfiprintf_r+0x7a>
 80061d6:	465b      	mov	r3, fp
 80061d8:	4622      	mov	r2, r4
 80061da:	4629      	mov	r1, r5
 80061dc:	4638      	mov	r0, r7
 80061de:	f7ff ff6d 	bl	80060bc <__ssputs_r>
 80061e2:	3001      	adds	r0, #1
 80061e4:	f000 80aa 	beq.w	800633c <_svfiprintf_r+0x1c8>
 80061e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061ea:	445a      	add	r2, fp
 80061ec:	9209      	str	r2, [sp, #36]	; 0x24
 80061ee:	f89a 3000 	ldrb.w	r3, [sl]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 80a2 	beq.w	800633c <_svfiprintf_r+0x1c8>
 80061f8:	2300      	movs	r3, #0
 80061fa:	f04f 32ff 	mov.w	r2, #4294967295
 80061fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006202:	f10a 0a01 	add.w	sl, sl, #1
 8006206:	9304      	str	r3, [sp, #16]
 8006208:	9307      	str	r3, [sp, #28]
 800620a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800620e:	931a      	str	r3, [sp, #104]	; 0x68
 8006210:	4654      	mov	r4, sl
 8006212:	2205      	movs	r2, #5
 8006214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006218:	4851      	ldr	r0, [pc, #324]	; (8006360 <_svfiprintf_r+0x1ec>)
 800621a:	f7f9 ffe9 	bl	80001f0 <memchr>
 800621e:	9a04      	ldr	r2, [sp, #16]
 8006220:	b9d8      	cbnz	r0, 800625a <_svfiprintf_r+0xe6>
 8006222:	06d0      	lsls	r0, r2, #27
 8006224:	bf44      	itt	mi
 8006226:	2320      	movmi	r3, #32
 8006228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800622c:	0711      	lsls	r1, r2, #28
 800622e:	bf44      	itt	mi
 8006230:	232b      	movmi	r3, #43	; 0x2b
 8006232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006236:	f89a 3000 	ldrb.w	r3, [sl]
 800623a:	2b2a      	cmp	r3, #42	; 0x2a
 800623c:	d015      	beq.n	800626a <_svfiprintf_r+0xf6>
 800623e:	9a07      	ldr	r2, [sp, #28]
 8006240:	4654      	mov	r4, sl
 8006242:	2000      	movs	r0, #0
 8006244:	f04f 0c0a 	mov.w	ip, #10
 8006248:	4621      	mov	r1, r4
 800624a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800624e:	3b30      	subs	r3, #48	; 0x30
 8006250:	2b09      	cmp	r3, #9
 8006252:	d94e      	bls.n	80062f2 <_svfiprintf_r+0x17e>
 8006254:	b1b0      	cbz	r0, 8006284 <_svfiprintf_r+0x110>
 8006256:	9207      	str	r2, [sp, #28]
 8006258:	e014      	b.n	8006284 <_svfiprintf_r+0x110>
 800625a:	eba0 0308 	sub.w	r3, r0, r8
 800625e:	fa09 f303 	lsl.w	r3, r9, r3
 8006262:	4313      	orrs	r3, r2
 8006264:	9304      	str	r3, [sp, #16]
 8006266:	46a2      	mov	sl, r4
 8006268:	e7d2      	b.n	8006210 <_svfiprintf_r+0x9c>
 800626a:	9b03      	ldr	r3, [sp, #12]
 800626c:	1d19      	adds	r1, r3, #4
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	9103      	str	r1, [sp, #12]
 8006272:	2b00      	cmp	r3, #0
 8006274:	bfbb      	ittet	lt
 8006276:	425b      	neglt	r3, r3
 8006278:	f042 0202 	orrlt.w	r2, r2, #2
 800627c:	9307      	strge	r3, [sp, #28]
 800627e:	9307      	strlt	r3, [sp, #28]
 8006280:	bfb8      	it	lt
 8006282:	9204      	strlt	r2, [sp, #16]
 8006284:	7823      	ldrb	r3, [r4, #0]
 8006286:	2b2e      	cmp	r3, #46	; 0x2e
 8006288:	d10c      	bne.n	80062a4 <_svfiprintf_r+0x130>
 800628a:	7863      	ldrb	r3, [r4, #1]
 800628c:	2b2a      	cmp	r3, #42	; 0x2a
 800628e:	d135      	bne.n	80062fc <_svfiprintf_r+0x188>
 8006290:	9b03      	ldr	r3, [sp, #12]
 8006292:	1d1a      	adds	r2, r3, #4
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	9203      	str	r2, [sp, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	bfb8      	it	lt
 800629c:	f04f 33ff 	movlt.w	r3, #4294967295
 80062a0:	3402      	adds	r4, #2
 80062a2:	9305      	str	r3, [sp, #20]
 80062a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006370 <_svfiprintf_r+0x1fc>
 80062a8:	7821      	ldrb	r1, [r4, #0]
 80062aa:	2203      	movs	r2, #3
 80062ac:	4650      	mov	r0, sl
 80062ae:	f7f9 ff9f 	bl	80001f0 <memchr>
 80062b2:	b140      	cbz	r0, 80062c6 <_svfiprintf_r+0x152>
 80062b4:	2340      	movs	r3, #64	; 0x40
 80062b6:	eba0 000a 	sub.w	r0, r0, sl
 80062ba:	fa03 f000 	lsl.w	r0, r3, r0
 80062be:	9b04      	ldr	r3, [sp, #16]
 80062c0:	4303      	orrs	r3, r0
 80062c2:	3401      	adds	r4, #1
 80062c4:	9304      	str	r3, [sp, #16]
 80062c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062ca:	4826      	ldr	r0, [pc, #152]	; (8006364 <_svfiprintf_r+0x1f0>)
 80062cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062d0:	2206      	movs	r2, #6
 80062d2:	f7f9 ff8d 	bl	80001f0 <memchr>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	d038      	beq.n	800634c <_svfiprintf_r+0x1d8>
 80062da:	4b23      	ldr	r3, [pc, #140]	; (8006368 <_svfiprintf_r+0x1f4>)
 80062dc:	bb1b      	cbnz	r3, 8006326 <_svfiprintf_r+0x1b2>
 80062de:	9b03      	ldr	r3, [sp, #12]
 80062e0:	3307      	adds	r3, #7
 80062e2:	f023 0307 	bic.w	r3, r3, #7
 80062e6:	3308      	adds	r3, #8
 80062e8:	9303      	str	r3, [sp, #12]
 80062ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ec:	4433      	add	r3, r6
 80062ee:	9309      	str	r3, [sp, #36]	; 0x24
 80062f0:	e767      	b.n	80061c2 <_svfiprintf_r+0x4e>
 80062f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80062f6:	460c      	mov	r4, r1
 80062f8:	2001      	movs	r0, #1
 80062fa:	e7a5      	b.n	8006248 <_svfiprintf_r+0xd4>
 80062fc:	2300      	movs	r3, #0
 80062fe:	3401      	adds	r4, #1
 8006300:	9305      	str	r3, [sp, #20]
 8006302:	4619      	mov	r1, r3
 8006304:	f04f 0c0a 	mov.w	ip, #10
 8006308:	4620      	mov	r0, r4
 800630a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800630e:	3a30      	subs	r2, #48	; 0x30
 8006310:	2a09      	cmp	r2, #9
 8006312:	d903      	bls.n	800631c <_svfiprintf_r+0x1a8>
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0c5      	beq.n	80062a4 <_svfiprintf_r+0x130>
 8006318:	9105      	str	r1, [sp, #20]
 800631a:	e7c3      	b.n	80062a4 <_svfiprintf_r+0x130>
 800631c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006320:	4604      	mov	r4, r0
 8006322:	2301      	movs	r3, #1
 8006324:	e7f0      	b.n	8006308 <_svfiprintf_r+0x194>
 8006326:	ab03      	add	r3, sp, #12
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	462a      	mov	r2, r5
 800632c:	4b0f      	ldr	r3, [pc, #60]	; (800636c <_svfiprintf_r+0x1f8>)
 800632e:	a904      	add	r1, sp, #16
 8006330:	4638      	mov	r0, r7
 8006332:	f3af 8000 	nop.w
 8006336:	1c42      	adds	r2, r0, #1
 8006338:	4606      	mov	r6, r0
 800633a:	d1d6      	bne.n	80062ea <_svfiprintf_r+0x176>
 800633c:	89ab      	ldrh	r3, [r5, #12]
 800633e:	065b      	lsls	r3, r3, #25
 8006340:	f53f af2c 	bmi.w	800619c <_svfiprintf_r+0x28>
 8006344:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006346:	b01d      	add	sp, #116	; 0x74
 8006348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800634c:	ab03      	add	r3, sp, #12
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	462a      	mov	r2, r5
 8006352:	4b06      	ldr	r3, [pc, #24]	; (800636c <_svfiprintf_r+0x1f8>)
 8006354:	a904      	add	r1, sp, #16
 8006356:	4638      	mov	r0, r7
 8006358:	f000 f87a 	bl	8006450 <_printf_i>
 800635c:	e7eb      	b.n	8006336 <_svfiprintf_r+0x1c2>
 800635e:	bf00      	nop
 8006360:	080069cc 	.word	0x080069cc
 8006364:	080069d6 	.word	0x080069d6
 8006368:	00000000 	.word	0x00000000
 800636c:	080060bd 	.word	0x080060bd
 8006370:	080069d2 	.word	0x080069d2

08006374 <_printf_common>:
 8006374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006378:	4616      	mov	r6, r2
 800637a:	4699      	mov	r9, r3
 800637c:	688a      	ldr	r2, [r1, #8]
 800637e:	690b      	ldr	r3, [r1, #16]
 8006380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006384:	4293      	cmp	r3, r2
 8006386:	bfb8      	it	lt
 8006388:	4613      	movlt	r3, r2
 800638a:	6033      	str	r3, [r6, #0]
 800638c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006390:	4607      	mov	r7, r0
 8006392:	460c      	mov	r4, r1
 8006394:	b10a      	cbz	r2, 800639a <_printf_common+0x26>
 8006396:	3301      	adds	r3, #1
 8006398:	6033      	str	r3, [r6, #0]
 800639a:	6823      	ldr	r3, [r4, #0]
 800639c:	0699      	lsls	r1, r3, #26
 800639e:	bf42      	ittt	mi
 80063a0:	6833      	ldrmi	r3, [r6, #0]
 80063a2:	3302      	addmi	r3, #2
 80063a4:	6033      	strmi	r3, [r6, #0]
 80063a6:	6825      	ldr	r5, [r4, #0]
 80063a8:	f015 0506 	ands.w	r5, r5, #6
 80063ac:	d106      	bne.n	80063bc <_printf_common+0x48>
 80063ae:	f104 0a19 	add.w	sl, r4, #25
 80063b2:	68e3      	ldr	r3, [r4, #12]
 80063b4:	6832      	ldr	r2, [r6, #0]
 80063b6:	1a9b      	subs	r3, r3, r2
 80063b8:	42ab      	cmp	r3, r5
 80063ba:	dc26      	bgt.n	800640a <_printf_common+0x96>
 80063bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063c0:	1e13      	subs	r3, r2, #0
 80063c2:	6822      	ldr	r2, [r4, #0]
 80063c4:	bf18      	it	ne
 80063c6:	2301      	movne	r3, #1
 80063c8:	0692      	lsls	r2, r2, #26
 80063ca:	d42b      	bmi.n	8006424 <_printf_common+0xb0>
 80063cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063d0:	4649      	mov	r1, r9
 80063d2:	4638      	mov	r0, r7
 80063d4:	47c0      	blx	r8
 80063d6:	3001      	adds	r0, #1
 80063d8:	d01e      	beq.n	8006418 <_printf_common+0xa4>
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	68e5      	ldr	r5, [r4, #12]
 80063de:	6832      	ldr	r2, [r6, #0]
 80063e0:	f003 0306 	and.w	r3, r3, #6
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	bf08      	it	eq
 80063e8:	1aad      	subeq	r5, r5, r2
 80063ea:	68a3      	ldr	r3, [r4, #8]
 80063ec:	6922      	ldr	r2, [r4, #16]
 80063ee:	bf0c      	ite	eq
 80063f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063f4:	2500      	movne	r5, #0
 80063f6:	4293      	cmp	r3, r2
 80063f8:	bfc4      	itt	gt
 80063fa:	1a9b      	subgt	r3, r3, r2
 80063fc:	18ed      	addgt	r5, r5, r3
 80063fe:	2600      	movs	r6, #0
 8006400:	341a      	adds	r4, #26
 8006402:	42b5      	cmp	r5, r6
 8006404:	d11a      	bne.n	800643c <_printf_common+0xc8>
 8006406:	2000      	movs	r0, #0
 8006408:	e008      	b.n	800641c <_printf_common+0xa8>
 800640a:	2301      	movs	r3, #1
 800640c:	4652      	mov	r2, sl
 800640e:	4649      	mov	r1, r9
 8006410:	4638      	mov	r0, r7
 8006412:	47c0      	blx	r8
 8006414:	3001      	adds	r0, #1
 8006416:	d103      	bne.n	8006420 <_printf_common+0xac>
 8006418:	f04f 30ff 	mov.w	r0, #4294967295
 800641c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006420:	3501      	adds	r5, #1
 8006422:	e7c6      	b.n	80063b2 <_printf_common+0x3e>
 8006424:	18e1      	adds	r1, r4, r3
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	2030      	movs	r0, #48	; 0x30
 800642a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800642e:	4422      	add	r2, r4
 8006430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006438:	3302      	adds	r3, #2
 800643a:	e7c7      	b.n	80063cc <_printf_common+0x58>
 800643c:	2301      	movs	r3, #1
 800643e:	4622      	mov	r2, r4
 8006440:	4649      	mov	r1, r9
 8006442:	4638      	mov	r0, r7
 8006444:	47c0      	blx	r8
 8006446:	3001      	adds	r0, #1
 8006448:	d0e6      	beq.n	8006418 <_printf_common+0xa4>
 800644a:	3601      	adds	r6, #1
 800644c:	e7d9      	b.n	8006402 <_printf_common+0x8e>
	...

08006450 <_printf_i>:
 8006450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006454:	460c      	mov	r4, r1
 8006456:	4691      	mov	r9, r2
 8006458:	7e27      	ldrb	r7, [r4, #24]
 800645a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800645c:	2f78      	cmp	r7, #120	; 0x78
 800645e:	4680      	mov	r8, r0
 8006460:	469a      	mov	sl, r3
 8006462:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006466:	d807      	bhi.n	8006478 <_printf_i+0x28>
 8006468:	2f62      	cmp	r7, #98	; 0x62
 800646a:	d80a      	bhi.n	8006482 <_printf_i+0x32>
 800646c:	2f00      	cmp	r7, #0
 800646e:	f000 80d8 	beq.w	8006622 <_printf_i+0x1d2>
 8006472:	2f58      	cmp	r7, #88	; 0x58
 8006474:	f000 80a3 	beq.w	80065be <_printf_i+0x16e>
 8006478:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800647c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006480:	e03a      	b.n	80064f8 <_printf_i+0xa8>
 8006482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006486:	2b15      	cmp	r3, #21
 8006488:	d8f6      	bhi.n	8006478 <_printf_i+0x28>
 800648a:	a001      	add	r0, pc, #4	; (adr r0, 8006490 <_printf_i+0x40>)
 800648c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006490:	080064e9 	.word	0x080064e9
 8006494:	080064fd 	.word	0x080064fd
 8006498:	08006479 	.word	0x08006479
 800649c:	08006479 	.word	0x08006479
 80064a0:	08006479 	.word	0x08006479
 80064a4:	08006479 	.word	0x08006479
 80064a8:	080064fd 	.word	0x080064fd
 80064ac:	08006479 	.word	0x08006479
 80064b0:	08006479 	.word	0x08006479
 80064b4:	08006479 	.word	0x08006479
 80064b8:	08006479 	.word	0x08006479
 80064bc:	08006609 	.word	0x08006609
 80064c0:	0800652d 	.word	0x0800652d
 80064c4:	080065eb 	.word	0x080065eb
 80064c8:	08006479 	.word	0x08006479
 80064cc:	08006479 	.word	0x08006479
 80064d0:	0800662b 	.word	0x0800662b
 80064d4:	08006479 	.word	0x08006479
 80064d8:	0800652d 	.word	0x0800652d
 80064dc:	08006479 	.word	0x08006479
 80064e0:	08006479 	.word	0x08006479
 80064e4:	080065f3 	.word	0x080065f3
 80064e8:	680b      	ldr	r3, [r1, #0]
 80064ea:	1d1a      	adds	r2, r3, #4
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	600a      	str	r2, [r1, #0]
 80064f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80064f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064f8:	2301      	movs	r3, #1
 80064fa:	e0a3      	b.n	8006644 <_printf_i+0x1f4>
 80064fc:	6825      	ldr	r5, [r4, #0]
 80064fe:	6808      	ldr	r0, [r1, #0]
 8006500:	062e      	lsls	r6, r5, #24
 8006502:	f100 0304 	add.w	r3, r0, #4
 8006506:	d50a      	bpl.n	800651e <_printf_i+0xce>
 8006508:	6805      	ldr	r5, [r0, #0]
 800650a:	600b      	str	r3, [r1, #0]
 800650c:	2d00      	cmp	r5, #0
 800650e:	da03      	bge.n	8006518 <_printf_i+0xc8>
 8006510:	232d      	movs	r3, #45	; 0x2d
 8006512:	426d      	negs	r5, r5
 8006514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006518:	485e      	ldr	r0, [pc, #376]	; (8006694 <_printf_i+0x244>)
 800651a:	230a      	movs	r3, #10
 800651c:	e019      	b.n	8006552 <_printf_i+0x102>
 800651e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006522:	6805      	ldr	r5, [r0, #0]
 8006524:	600b      	str	r3, [r1, #0]
 8006526:	bf18      	it	ne
 8006528:	b22d      	sxthne	r5, r5
 800652a:	e7ef      	b.n	800650c <_printf_i+0xbc>
 800652c:	680b      	ldr	r3, [r1, #0]
 800652e:	6825      	ldr	r5, [r4, #0]
 8006530:	1d18      	adds	r0, r3, #4
 8006532:	6008      	str	r0, [r1, #0]
 8006534:	0628      	lsls	r0, r5, #24
 8006536:	d501      	bpl.n	800653c <_printf_i+0xec>
 8006538:	681d      	ldr	r5, [r3, #0]
 800653a:	e002      	b.n	8006542 <_printf_i+0xf2>
 800653c:	0669      	lsls	r1, r5, #25
 800653e:	d5fb      	bpl.n	8006538 <_printf_i+0xe8>
 8006540:	881d      	ldrh	r5, [r3, #0]
 8006542:	4854      	ldr	r0, [pc, #336]	; (8006694 <_printf_i+0x244>)
 8006544:	2f6f      	cmp	r7, #111	; 0x6f
 8006546:	bf0c      	ite	eq
 8006548:	2308      	moveq	r3, #8
 800654a:	230a      	movne	r3, #10
 800654c:	2100      	movs	r1, #0
 800654e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006552:	6866      	ldr	r6, [r4, #4]
 8006554:	60a6      	str	r6, [r4, #8]
 8006556:	2e00      	cmp	r6, #0
 8006558:	bfa2      	ittt	ge
 800655a:	6821      	ldrge	r1, [r4, #0]
 800655c:	f021 0104 	bicge.w	r1, r1, #4
 8006560:	6021      	strge	r1, [r4, #0]
 8006562:	b90d      	cbnz	r5, 8006568 <_printf_i+0x118>
 8006564:	2e00      	cmp	r6, #0
 8006566:	d04d      	beq.n	8006604 <_printf_i+0x1b4>
 8006568:	4616      	mov	r6, r2
 800656a:	fbb5 f1f3 	udiv	r1, r5, r3
 800656e:	fb03 5711 	mls	r7, r3, r1, r5
 8006572:	5dc7      	ldrb	r7, [r0, r7]
 8006574:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006578:	462f      	mov	r7, r5
 800657a:	42bb      	cmp	r3, r7
 800657c:	460d      	mov	r5, r1
 800657e:	d9f4      	bls.n	800656a <_printf_i+0x11a>
 8006580:	2b08      	cmp	r3, #8
 8006582:	d10b      	bne.n	800659c <_printf_i+0x14c>
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	07df      	lsls	r7, r3, #31
 8006588:	d508      	bpl.n	800659c <_printf_i+0x14c>
 800658a:	6923      	ldr	r3, [r4, #16]
 800658c:	6861      	ldr	r1, [r4, #4]
 800658e:	4299      	cmp	r1, r3
 8006590:	bfde      	ittt	le
 8006592:	2330      	movle	r3, #48	; 0x30
 8006594:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006598:	f106 36ff 	addle.w	r6, r6, #4294967295
 800659c:	1b92      	subs	r2, r2, r6
 800659e:	6122      	str	r2, [r4, #16]
 80065a0:	f8cd a000 	str.w	sl, [sp]
 80065a4:	464b      	mov	r3, r9
 80065a6:	aa03      	add	r2, sp, #12
 80065a8:	4621      	mov	r1, r4
 80065aa:	4640      	mov	r0, r8
 80065ac:	f7ff fee2 	bl	8006374 <_printf_common>
 80065b0:	3001      	adds	r0, #1
 80065b2:	d14c      	bne.n	800664e <_printf_i+0x1fe>
 80065b4:	f04f 30ff 	mov.w	r0, #4294967295
 80065b8:	b004      	add	sp, #16
 80065ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065be:	4835      	ldr	r0, [pc, #212]	; (8006694 <_printf_i+0x244>)
 80065c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	680e      	ldr	r6, [r1, #0]
 80065c8:	061f      	lsls	r7, r3, #24
 80065ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80065ce:	600e      	str	r6, [r1, #0]
 80065d0:	d514      	bpl.n	80065fc <_printf_i+0x1ac>
 80065d2:	07d9      	lsls	r1, r3, #31
 80065d4:	bf44      	itt	mi
 80065d6:	f043 0320 	orrmi.w	r3, r3, #32
 80065da:	6023      	strmi	r3, [r4, #0]
 80065dc:	b91d      	cbnz	r5, 80065e6 <_printf_i+0x196>
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	f023 0320 	bic.w	r3, r3, #32
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	2310      	movs	r3, #16
 80065e8:	e7b0      	b.n	800654c <_printf_i+0xfc>
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	f043 0320 	orr.w	r3, r3, #32
 80065f0:	6023      	str	r3, [r4, #0]
 80065f2:	2378      	movs	r3, #120	; 0x78
 80065f4:	4828      	ldr	r0, [pc, #160]	; (8006698 <_printf_i+0x248>)
 80065f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065fa:	e7e3      	b.n	80065c4 <_printf_i+0x174>
 80065fc:	065e      	lsls	r6, r3, #25
 80065fe:	bf48      	it	mi
 8006600:	b2ad      	uxthmi	r5, r5
 8006602:	e7e6      	b.n	80065d2 <_printf_i+0x182>
 8006604:	4616      	mov	r6, r2
 8006606:	e7bb      	b.n	8006580 <_printf_i+0x130>
 8006608:	680b      	ldr	r3, [r1, #0]
 800660a:	6826      	ldr	r6, [r4, #0]
 800660c:	6960      	ldr	r0, [r4, #20]
 800660e:	1d1d      	adds	r5, r3, #4
 8006610:	600d      	str	r5, [r1, #0]
 8006612:	0635      	lsls	r5, r6, #24
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	d501      	bpl.n	800661c <_printf_i+0x1cc>
 8006618:	6018      	str	r0, [r3, #0]
 800661a:	e002      	b.n	8006622 <_printf_i+0x1d2>
 800661c:	0671      	lsls	r1, r6, #25
 800661e:	d5fb      	bpl.n	8006618 <_printf_i+0x1c8>
 8006620:	8018      	strh	r0, [r3, #0]
 8006622:	2300      	movs	r3, #0
 8006624:	6123      	str	r3, [r4, #16]
 8006626:	4616      	mov	r6, r2
 8006628:	e7ba      	b.n	80065a0 <_printf_i+0x150>
 800662a:	680b      	ldr	r3, [r1, #0]
 800662c:	1d1a      	adds	r2, r3, #4
 800662e:	600a      	str	r2, [r1, #0]
 8006630:	681e      	ldr	r6, [r3, #0]
 8006632:	6862      	ldr	r2, [r4, #4]
 8006634:	2100      	movs	r1, #0
 8006636:	4630      	mov	r0, r6
 8006638:	f7f9 fdda 	bl	80001f0 <memchr>
 800663c:	b108      	cbz	r0, 8006642 <_printf_i+0x1f2>
 800663e:	1b80      	subs	r0, r0, r6
 8006640:	6060      	str	r0, [r4, #4]
 8006642:	6863      	ldr	r3, [r4, #4]
 8006644:	6123      	str	r3, [r4, #16]
 8006646:	2300      	movs	r3, #0
 8006648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800664c:	e7a8      	b.n	80065a0 <_printf_i+0x150>
 800664e:	6923      	ldr	r3, [r4, #16]
 8006650:	4632      	mov	r2, r6
 8006652:	4649      	mov	r1, r9
 8006654:	4640      	mov	r0, r8
 8006656:	47d0      	blx	sl
 8006658:	3001      	adds	r0, #1
 800665a:	d0ab      	beq.n	80065b4 <_printf_i+0x164>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	079b      	lsls	r3, r3, #30
 8006660:	d413      	bmi.n	800668a <_printf_i+0x23a>
 8006662:	68e0      	ldr	r0, [r4, #12]
 8006664:	9b03      	ldr	r3, [sp, #12]
 8006666:	4298      	cmp	r0, r3
 8006668:	bfb8      	it	lt
 800666a:	4618      	movlt	r0, r3
 800666c:	e7a4      	b.n	80065b8 <_printf_i+0x168>
 800666e:	2301      	movs	r3, #1
 8006670:	4632      	mov	r2, r6
 8006672:	4649      	mov	r1, r9
 8006674:	4640      	mov	r0, r8
 8006676:	47d0      	blx	sl
 8006678:	3001      	adds	r0, #1
 800667a:	d09b      	beq.n	80065b4 <_printf_i+0x164>
 800667c:	3501      	adds	r5, #1
 800667e:	68e3      	ldr	r3, [r4, #12]
 8006680:	9903      	ldr	r1, [sp, #12]
 8006682:	1a5b      	subs	r3, r3, r1
 8006684:	42ab      	cmp	r3, r5
 8006686:	dcf2      	bgt.n	800666e <_printf_i+0x21e>
 8006688:	e7eb      	b.n	8006662 <_printf_i+0x212>
 800668a:	2500      	movs	r5, #0
 800668c:	f104 0619 	add.w	r6, r4, #25
 8006690:	e7f5      	b.n	800667e <_printf_i+0x22e>
 8006692:	bf00      	nop
 8006694:	080069dd 	.word	0x080069dd
 8006698:	080069ee 	.word	0x080069ee

0800669c <memmove>:
 800669c:	4288      	cmp	r0, r1
 800669e:	b510      	push	{r4, lr}
 80066a0:	eb01 0402 	add.w	r4, r1, r2
 80066a4:	d902      	bls.n	80066ac <memmove+0x10>
 80066a6:	4284      	cmp	r4, r0
 80066a8:	4623      	mov	r3, r4
 80066aa:	d807      	bhi.n	80066bc <memmove+0x20>
 80066ac:	1e43      	subs	r3, r0, #1
 80066ae:	42a1      	cmp	r1, r4
 80066b0:	d008      	beq.n	80066c4 <memmove+0x28>
 80066b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066ba:	e7f8      	b.n	80066ae <memmove+0x12>
 80066bc:	4402      	add	r2, r0
 80066be:	4601      	mov	r1, r0
 80066c0:	428a      	cmp	r2, r1
 80066c2:	d100      	bne.n	80066c6 <memmove+0x2a>
 80066c4:	bd10      	pop	{r4, pc}
 80066c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066ce:	e7f7      	b.n	80066c0 <memmove+0x24>

080066d0 <_free_r>:
 80066d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066d2:	2900      	cmp	r1, #0
 80066d4:	d048      	beq.n	8006768 <_free_r+0x98>
 80066d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066da:	9001      	str	r0, [sp, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f1a1 0404 	sub.w	r4, r1, #4
 80066e2:	bfb8      	it	lt
 80066e4:	18e4      	addlt	r4, r4, r3
 80066e6:	f000 f8d3 	bl	8006890 <__malloc_lock>
 80066ea:	4a20      	ldr	r2, [pc, #128]	; (800676c <_free_r+0x9c>)
 80066ec:	9801      	ldr	r0, [sp, #4]
 80066ee:	6813      	ldr	r3, [r2, #0]
 80066f0:	4615      	mov	r5, r2
 80066f2:	b933      	cbnz	r3, 8006702 <_free_r+0x32>
 80066f4:	6063      	str	r3, [r4, #4]
 80066f6:	6014      	str	r4, [r2, #0]
 80066f8:	b003      	add	sp, #12
 80066fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066fe:	f000 b8cd 	b.w	800689c <__malloc_unlock>
 8006702:	42a3      	cmp	r3, r4
 8006704:	d90b      	bls.n	800671e <_free_r+0x4e>
 8006706:	6821      	ldr	r1, [r4, #0]
 8006708:	1862      	adds	r2, r4, r1
 800670a:	4293      	cmp	r3, r2
 800670c:	bf04      	itt	eq
 800670e:	681a      	ldreq	r2, [r3, #0]
 8006710:	685b      	ldreq	r3, [r3, #4]
 8006712:	6063      	str	r3, [r4, #4]
 8006714:	bf04      	itt	eq
 8006716:	1852      	addeq	r2, r2, r1
 8006718:	6022      	streq	r2, [r4, #0]
 800671a:	602c      	str	r4, [r5, #0]
 800671c:	e7ec      	b.n	80066f8 <_free_r+0x28>
 800671e:	461a      	mov	r2, r3
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	b10b      	cbz	r3, 8006728 <_free_r+0x58>
 8006724:	42a3      	cmp	r3, r4
 8006726:	d9fa      	bls.n	800671e <_free_r+0x4e>
 8006728:	6811      	ldr	r1, [r2, #0]
 800672a:	1855      	adds	r5, r2, r1
 800672c:	42a5      	cmp	r5, r4
 800672e:	d10b      	bne.n	8006748 <_free_r+0x78>
 8006730:	6824      	ldr	r4, [r4, #0]
 8006732:	4421      	add	r1, r4
 8006734:	1854      	adds	r4, r2, r1
 8006736:	42a3      	cmp	r3, r4
 8006738:	6011      	str	r1, [r2, #0]
 800673a:	d1dd      	bne.n	80066f8 <_free_r+0x28>
 800673c:	681c      	ldr	r4, [r3, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	6053      	str	r3, [r2, #4]
 8006742:	4421      	add	r1, r4
 8006744:	6011      	str	r1, [r2, #0]
 8006746:	e7d7      	b.n	80066f8 <_free_r+0x28>
 8006748:	d902      	bls.n	8006750 <_free_r+0x80>
 800674a:	230c      	movs	r3, #12
 800674c:	6003      	str	r3, [r0, #0]
 800674e:	e7d3      	b.n	80066f8 <_free_r+0x28>
 8006750:	6825      	ldr	r5, [r4, #0]
 8006752:	1961      	adds	r1, r4, r5
 8006754:	428b      	cmp	r3, r1
 8006756:	bf04      	itt	eq
 8006758:	6819      	ldreq	r1, [r3, #0]
 800675a:	685b      	ldreq	r3, [r3, #4]
 800675c:	6063      	str	r3, [r4, #4]
 800675e:	bf04      	itt	eq
 8006760:	1949      	addeq	r1, r1, r5
 8006762:	6021      	streq	r1, [r4, #0]
 8006764:	6054      	str	r4, [r2, #4]
 8006766:	e7c7      	b.n	80066f8 <_free_r+0x28>
 8006768:	b003      	add	sp, #12
 800676a:	bd30      	pop	{r4, r5, pc}
 800676c:	2000404c 	.word	0x2000404c

08006770 <_malloc_r>:
 8006770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006772:	1ccd      	adds	r5, r1, #3
 8006774:	f025 0503 	bic.w	r5, r5, #3
 8006778:	3508      	adds	r5, #8
 800677a:	2d0c      	cmp	r5, #12
 800677c:	bf38      	it	cc
 800677e:	250c      	movcc	r5, #12
 8006780:	2d00      	cmp	r5, #0
 8006782:	4606      	mov	r6, r0
 8006784:	db01      	blt.n	800678a <_malloc_r+0x1a>
 8006786:	42a9      	cmp	r1, r5
 8006788:	d903      	bls.n	8006792 <_malloc_r+0x22>
 800678a:	230c      	movs	r3, #12
 800678c:	6033      	str	r3, [r6, #0]
 800678e:	2000      	movs	r0, #0
 8006790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006792:	f000 f87d 	bl	8006890 <__malloc_lock>
 8006796:	4921      	ldr	r1, [pc, #132]	; (800681c <_malloc_r+0xac>)
 8006798:	680a      	ldr	r2, [r1, #0]
 800679a:	4614      	mov	r4, r2
 800679c:	b99c      	cbnz	r4, 80067c6 <_malloc_r+0x56>
 800679e:	4f20      	ldr	r7, [pc, #128]	; (8006820 <_malloc_r+0xb0>)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	b923      	cbnz	r3, 80067ae <_malloc_r+0x3e>
 80067a4:	4621      	mov	r1, r4
 80067a6:	4630      	mov	r0, r6
 80067a8:	f000 f862 	bl	8006870 <_sbrk_r>
 80067ac:	6038      	str	r0, [r7, #0]
 80067ae:	4629      	mov	r1, r5
 80067b0:	4630      	mov	r0, r6
 80067b2:	f000 f85d 	bl	8006870 <_sbrk_r>
 80067b6:	1c43      	adds	r3, r0, #1
 80067b8:	d123      	bne.n	8006802 <_malloc_r+0x92>
 80067ba:	230c      	movs	r3, #12
 80067bc:	6033      	str	r3, [r6, #0]
 80067be:	4630      	mov	r0, r6
 80067c0:	f000 f86c 	bl	800689c <__malloc_unlock>
 80067c4:	e7e3      	b.n	800678e <_malloc_r+0x1e>
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	1b5b      	subs	r3, r3, r5
 80067ca:	d417      	bmi.n	80067fc <_malloc_r+0x8c>
 80067cc:	2b0b      	cmp	r3, #11
 80067ce:	d903      	bls.n	80067d8 <_malloc_r+0x68>
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	441c      	add	r4, r3
 80067d4:	6025      	str	r5, [r4, #0]
 80067d6:	e004      	b.n	80067e2 <_malloc_r+0x72>
 80067d8:	6863      	ldr	r3, [r4, #4]
 80067da:	42a2      	cmp	r2, r4
 80067dc:	bf0c      	ite	eq
 80067de:	600b      	streq	r3, [r1, #0]
 80067e0:	6053      	strne	r3, [r2, #4]
 80067e2:	4630      	mov	r0, r6
 80067e4:	f000 f85a 	bl	800689c <__malloc_unlock>
 80067e8:	f104 000b 	add.w	r0, r4, #11
 80067ec:	1d23      	adds	r3, r4, #4
 80067ee:	f020 0007 	bic.w	r0, r0, #7
 80067f2:	1ac2      	subs	r2, r0, r3
 80067f4:	d0cc      	beq.n	8006790 <_malloc_r+0x20>
 80067f6:	1a1b      	subs	r3, r3, r0
 80067f8:	50a3      	str	r3, [r4, r2]
 80067fa:	e7c9      	b.n	8006790 <_malloc_r+0x20>
 80067fc:	4622      	mov	r2, r4
 80067fe:	6864      	ldr	r4, [r4, #4]
 8006800:	e7cc      	b.n	800679c <_malloc_r+0x2c>
 8006802:	1cc4      	adds	r4, r0, #3
 8006804:	f024 0403 	bic.w	r4, r4, #3
 8006808:	42a0      	cmp	r0, r4
 800680a:	d0e3      	beq.n	80067d4 <_malloc_r+0x64>
 800680c:	1a21      	subs	r1, r4, r0
 800680e:	4630      	mov	r0, r6
 8006810:	f000 f82e 	bl	8006870 <_sbrk_r>
 8006814:	3001      	adds	r0, #1
 8006816:	d1dd      	bne.n	80067d4 <_malloc_r+0x64>
 8006818:	e7cf      	b.n	80067ba <_malloc_r+0x4a>
 800681a:	bf00      	nop
 800681c:	2000404c 	.word	0x2000404c
 8006820:	20004050 	.word	0x20004050

08006824 <_realloc_r>:
 8006824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006826:	4607      	mov	r7, r0
 8006828:	4614      	mov	r4, r2
 800682a:	460e      	mov	r6, r1
 800682c:	b921      	cbnz	r1, 8006838 <_realloc_r+0x14>
 800682e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006832:	4611      	mov	r1, r2
 8006834:	f7ff bf9c 	b.w	8006770 <_malloc_r>
 8006838:	b922      	cbnz	r2, 8006844 <_realloc_r+0x20>
 800683a:	f7ff ff49 	bl	80066d0 <_free_r>
 800683e:	4625      	mov	r5, r4
 8006840:	4628      	mov	r0, r5
 8006842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006844:	f000 f830 	bl	80068a8 <_malloc_usable_size_r>
 8006848:	42a0      	cmp	r0, r4
 800684a:	d20f      	bcs.n	800686c <_realloc_r+0x48>
 800684c:	4621      	mov	r1, r4
 800684e:	4638      	mov	r0, r7
 8006850:	f7ff ff8e 	bl	8006770 <_malloc_r>
 8006854:	4605      	mov	r5, r0
 8006856:	2800      	cmp	r0, #0
 8006858:	d0f2      	beq.n	8006840 <_realloc_r+0x1c>
 800685a:	4631      	mov	r1, r6
 800685c:	4622      	mov	r2, r4
 800685e:	f7ff fbf7 	bl	8006050 <memcpy>
 8006862:	4631      	mov	r1, r6
 8006864:	4638      	mov	r0, r7
 8006866:	f7ff ff33 	bl	80066d0 <_free_r>
 800686a:	e7e9      	b.n	8006840 <_realloc_r+0x1c>
 800686c:	4635      	mov	r5, r6
 800686e:	e7e7      	b.n	8006840 <_realloc_r+0x1c>

08006870 <_sbrk_r>:
 8006870:	b538      	push	{r3, r4, r5, lr}
 8006872:	4d06      	ldr	r5, [pc, #24]	; (800688c <_sbrk_r+0x1c>)
 8006874:	2300      	movs	r3, #0
 8006876:	4604      	mov	r4, r0
 8006878:	4608      	mov	r0, r1
 800687a:	602b      	str	r3, [r5, #0]
 800687c:	f7fa fc08 	bl	8001090 <_sbrk>
 8006880:	1c43      	adds	r3, r0, #1
 8006882:	d102      	bne.n	800688a <_sbrk_r+0x1a>
 8006884:	682b      	ldr	r3, [r5, #0]
 8006886:	b103      	cbz	r3, 800688a <_sbrk_r+0x1a>
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	bd38      	pop	{r3, r4, r5, pc}
 800688c:	20004140 	.word	0x20004140

08006890 <__malloc_lock>:
 8006890:	4801      	ldr	r0, [pc, #4]	; (8006898 <__malloc_lock+0x8>)
 8006892:	f000 b811 	b.w	80068b8 <__retarget_lock_acquire_recursive>
 8006896:	bf00      	nop
 8006898:	20004148 	.word	0x20004148

0800689c <__malloc_unlock>:
 800689c:	4801      	ldr	r0, [pc, #4]	; (80068a4 <__malloc_unlock+0x8>)
 800689e:	f000 b80c 	b.w	80068ba <__retarget_lock_release_recursive>
 80068a2:	bf00      	nop
 80068a4:	20004148 	.word	0x20004148

080068a8 <_malloc_usable_size_r>:
 80068a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068ac:	1f18      	subs	r0, r3, #4
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	bfbc      	itt	lt
 80068b2:	580b      	ldrlt	r3, [r1, r0]
 80068b4:	18c0      	addlt	r0, r0, r3
 80068b6:	4770      	bx	lr

080068b8 <__retarget_lock_acquire_recursive>:
 80068b8:	4770      	bx	lr

080068ba <__retarget_lock_release_recursive>:
 80068ba:	4770      	bx	lr

080068bc <_init>:
 80068bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068be:	bf00      	nop
 80068c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068c2:	bc08      	pop	{r3}
 80068c4:	469e      	mov	lr, r3
 80068c6:	4770      	bx	lr

080068c8 <_fini>:
 80068c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ca:	bf00      	nop
 80068cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ce:	bc08      	pop	{r3}
 80068d0:	469e      	mov	lr, r3
 80068d2:	4770      	bx	lr
